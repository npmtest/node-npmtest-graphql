{"/home/travis/build/npmtest/node-npmtest-graphql/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_graphql */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - init-after","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - init-after","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-graphql/lib.npmtest_graphql.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/lib.npmtest_graphql.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_graphql */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_graphql = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_graphql = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-graphql/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":65},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-graphql && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_graphql */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - init-before","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_graphql","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // init-after","    // run browser js-env code - init-after","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - init-after","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_graphql.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_graphql.rollup.js'] =","            local.assetsDict['/assets.npmtest_graphql.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_graphql.__dirname + '/lib.npmtest_graphql.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/index.js","s":{"1":1,"2":1,"3":1,"4":2,"5":1,"6":1,"7":2,"8":1,"9":2,"10":1,"11":2,"12":1,"13":2,"14":1,"15":2,"16":1,"17":2,"18":1,"19":2,"20":1,"21":2,"22":1,"23":2,"24":1,"25":2,"26":1,"27":2,"28":1,"29":2,"30":1,"31":2,"32":1,"33":2,"34":1,"35":2,"36":1,"37":2,"38":1,"39":2,"40":1,"41":2,"42":1,"43":2,"44":1,"45":2,"46":1,"47":2,"48":1,"49":2,"50":1,"51":2,"52":1,"53":2,"54":1,"55":2,"56":1,"57":2,"58":1,"59":2,"60":1,"61":2,"62":1,"63":2,"64":1,"65":2,"66":1,"67":2,"68":1,"69":2,"70":1,"71":2,"72":1,"73":2,"74":1,"75":2,"76":1,"77":2,"78":1,"79":2,"80":1,"81":2,"82":1,"83":2,"84":1,"85":2,"86":1,"87":2,"88":1,"89":2,"90":1,"91":2,"92":1,"93":2,"94":1,"95":2,"96":1,"97":2,"98":1,"99":2,"100":1,"101":2,"102":1,"103":2,"104":1,"105":1,"106":2,"107":1,"108":2,"109":1,"110":2,"111":1,"112":2,"113":1,"114":2,"115":1,"116":2,"117":1,"118":2,"119":1,"120":2,"121":1,"122":2,"123":1,"124":2,"125":1,"126":2,"127":1,"128":2,"129":1,"130":1,"131":2,"132":1,"133":2,"134":1,"135":2,"136":1,"137":1,"138":2,"139":1,"140":2,"141":1,"142":2,"143":1,"144":1,"145":2,"146":1,"147":2,"148":1,"149":1,"150":2,"151":1,"152":2,"153":1,"154":2,"155":1,"156":2,"157":1,"158":2,"159":1,"160":2,"161":1,"162":2,"163":1,"164":2,"165":1,"166":2,"167":1,"168":2,"169":1,"170":2,"171":1,"172":2,"173":1,"174":2,"175":1,"176":2,"177":1,"178":2,"179":1,"180":2,"181":1,"182":2,"183":1,"184":2,"185":1,"186":2,"187":1,"188":2,"189":1,"190":2,"191":1,"192":2},"b":{},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2,"19":2,"20":2,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":2,"33":2,"34":2,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":2,"42":2,"43":2,"44":2,"45":2,"46":2,"47":2,"48":2,"49":2,"50":2,"51":2,"52":2,"53":2,"54":2,"55":2,"56":2,"57":2,"58":2,"59":2,"60":2,"61":2,"62":2,"63":2,"64":2,"65":2,"66":2,"67":2,"68":2,"69":2,"70":2,"71":2,"72":2,"73":2,"74":2,"75":2,"76":2,"77":2,"78":2,"79":2,"80":2,"81":2,"82":2,"83":2,"84":2,"85":2,"86":2,"87":2,"88":2,"89":2,"90":2,"91":2,"92":2},"fnMap":{"1":{"name":"get","line":11,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":22}}},"2":{"name":"get","line":20,"loc":{"start":{"line":20,"column":7},"end":{"line":20,"column":22}}},"3":{"name":"get","line":26,"loc":{"start":{"line":26,"column":7},"end":{"line":26,"column":22}}},"4":{"name":"get","line":32,"loc":{"start":{"line":32,"column":7},"end":{"line":32,"column":22}}},"5":{"name":"get","line":38,"loc":{"start":{"line":38,"column":7},"end":{"line":38,"column":22}}},"6":{"name":"get","line":44,"loc":{"start":{"line":44,"column":7},"end":{"line":44,"column":22}}},"7":{"name":"get","line":50,"loc":{"start":{"line":50,"column":7},"end":{"line":50,"column":22}}},"8":{"name":"get","line":56,"loc":{"start":{"line":56,"column":7},"end":{"line":56,"column":22}}},"9":{"name":"get","line":62,"loc":{"start":{"line":62,"column":7},"end":{"line":62,"column":22}}},"10":{"name":"get","line":68,"loc":{"start":{"line":68,"column":7},"end":{"line":68,"column":22}}},"11":{"name":"get","line":74,"loc":{"start":{"line":74,"column":7},"end":{"line":74,"column":22}}},"12":{"name":"get","line":80,"loc":{"start":{"line":80,"column":7},"end":{"line":80,"column":22}}},"13":{"name":"get","line":86,"loc":{"start":{"line":86,"column":7},"end":{"line":86,"column":22}}},"14":{"name":"get","line":92,"loc":{"start":{"line":92,"column":7},"end":{"line":92,"column":22}}},"15":{"name":"get","line":98,"loc":{"start":{"line":98,"column":7},"end":{"line":98,"column":22}}},"16":{"name":"get","line":104,"loc":{"start":{"line":104,"column":7},"end":{"line":104,"column":22}}},"17":{"name":"get","line":110,"loc":{"start":{"line":110,"column":7},"end":{"line":110,"column":22}}},"18":{"name":"get","line":116,"loc":{"start":{"line":116,"column":7},"end":{"line":116,"column":22}}},"19":{"name":"get","line":122,"loc":{"start":{"line":122,"column":7},"end":{"line":122,"column":22}}},"20":{"name":"get","line":128,"loc":{"start":{"line":128,"column":7},"end":{"line":128,"column":22}}},"21":{"name":"get","line":134,"loc":{"start":{"line":134,"column":7},"end":{"line":134,"column":22}}},"22":{"name":"get","line":140,"loc":{"start":{"line":140,"column":7},"end":{"line":140,"column":22}}},"23":{"name":"get","line":146,"loc":{"start":{"line":146,"column":7},"end":{"line":146,"column":22}}},"24":{"name":"get","line":152,"loc":{"start":{"line":152,"column":7},"end":{"line":152,"column":22}}},"25":{"name":"get","line":158,"loc":{"start":{"line":158,"column":7},"end":{"line":158,"column":22}}},"26":{"name":"get","line":164,"loc":{"start":{"line":164,"column":7},"end":{"line":164,"column":22}}},"27":{"name":"get","line":170,"loc":{"start":{"line":170,"column":7},"end":{"line":170,"column":22}}},"28":{"name":"get","line":176,"loc":{"start":{"line":176,"column":7},"end":{"line":176,"column":22}}},"29":{"name":"get","line":182,"loc":{"start":{"line":182,"column":7},"end":{"line":182,"column":22}}},"30":{"name":"get","line":188,"loc":{"start":{"line":188,"column":7},"end":{"line":188,"column":22}}},"31":{"name":"get","line":194,"loc":{"start":{"line":194,"column":7},"end":{"line":194,"column":22}}},"32":{"name":"get","line":200,"loc":{"start":{"line":200,"column":7},"end":{"line":200,"column":22}}},"33":{"name":"get","line":206,"loc":{"start":{"line":206,"column":7},"end":{"line":206,"column":22}}},"34":{"name":"get","line":212,"loc":{"start":{"line":212,"column":7},"end":{"line":212,"column":22}}},"35":{"name":"get","line":218,"loc":{"start":{"line":218,"column":7},"end":{"line":218,"column":22}}},"36":{"name":"get","line":224,"loc":{"start":{"line":224,"column":7},"end":{"line":224,"column":22}}},"37":{"name":"get","line":230,"loc":{"start":{"line":230,"column":7},"end":{"line":230,"column":22}}},"38":{"name":"get","line":236,"loc":{"start":{"line":236,"column":7},"end":{"line":236,"column":22}}},"39":{"name":"get","line":242,"loc":{"start":{"line":242,"column":7},"end":{"line":242,"column":22}}},"40":{"name":"get","line":248,"loc":{"start":{"line":248,"column":7},"end":{"line":248,"column":22}}},"41":{"name":"get","line":254,"loc":{"start":{"line":254,"column":7},"end":{"line":254,"column":22}}},"42":{"name":"get","line":260,"loc":{"start":{"line":260,"column":7},"end":{"line":260,"column":22}}},"43":{"name":"get","line":266,"loc":{"start":{"line":266,"column":7},"end":{"line":266,"column":22}}},"44":{"name":"get","line":272,"loc":{"start":{"line":272,"column":7},"end":{"line":272,"column":22}}},"45":{"name":"get","line":278,"loc":{"start":{"line":278,"column":7},"end":{"line":278,"column":22}}},"46":{"name":"get","line":284,"loc":{"start":{"line":284,"column":7},"end":{"line":284,"column":22}}},"47":{"name":"get","line":290,"loc":{"start":{"line":290,"column":7},"end":{"line":290,"column":22}}},"48":{"name":"get","line":296,"loc":{"start":{"line":296,"column":7},"end":{"line":296,"column":22}}},"49":{"name":"get","line":302,"loc":{"start":{"line":302,"column":7},"end":{"line":302,"column":22}}},"50":{"name":"get","line":308,"loc":{"start":{"line":308,"column":7},"end":{"line":308,"column":22}}},"51":{"name":"get","line":317,"loc":{"start":{"line":317,"column":7},"end":{"line":317,"column":22}}},"52":{"name":"get","line":323,"loc":{"start":{"line":323,"column":7},"end":{"line":323,"column":22}}},"53":{"name":"get","line":329,"loc":{"start":{"line":329,"column":7},"end":{"line":329,"column":22}}},"54":{"name":"get","line":335,"loc":{"start":{"line":335,"column":7},"end":{"line":335,"column":22}}},"55":{"name":"get","line":341,"loc":{"start":{"line":341,"column":7},"end":{"line":341,"column":22}}},"56":{"name":"get","line":347,"loc":{"start":{"line":347,"column":7},"end":{"line":347,"column":22}}},"57":{"name":"get","line":353,"loc":{"start":{"line":353,"column":7},"end":{"line":353,"column":22}}},"58":{"name":"get","line":359,"loc":{"start":{"line":359,"column":7},"end":{"line":359,"column":22}}},"59":{"name":"get","line":365,"loc":{"start":{"line":365,"column":7},"end":{"line":365,"column":22}}},"60":{"name":"get","line":371,"loc":{"start":{"line":371,"column":7},"end":{"line":371,"column":22}}},"61":{"name":"get","line":377,"loc":{"start":{"line":377,"column":7},"end":{"line":377,"column":22}}},"62":{"name":"get","line":383,"loc":{"start":{"line":383,"column":7},"end":{"line":383,"column":22}}},"63":{"name":"get","line":392,"loc":{"start":{"line":392,"column":7},"end":{"line":392,"column":22}}},"64":{"name":"get","line":398,"loc":{"start":{"line":398,"column":7},"end":{"line":398,"column":22}}},"65":{"name":"get","line":404,"loc":{"start":{"line":404,"column":7},"end":{"line":404,"column":22}}},"66":{"name":"get","line":413,"loc":{"start":{"line":413,"column":7},"end":{"line":413,"column":22}}},"67":{"name":"get","line":419,"loc":{"start":{"line":419,"column":7},"end":{"line":419,"column":22}}},"68":{"name":"get","line":425,"loc":{"start":{"line":425,"column":7},"end":{"line":425,"column":22}}},"69":{"name":"get","line":434,"loc":{"start":{"line":434,"column":7},"end":{"line":434,"column":22}}},"70":{"name":"get","line":440,"loc":{"start":{"line":440,"column":7},"end":{"line":440,"column":22}}},"71":{"name":"get","line":449,"loc":{"start":{"line":449,"column":7},"end":{"line":449,"column":22}}},"72":{"name":"get","line":455,"loc":{"start":{"line":455,"column":7},"end":{"line":455,"column":22}}},"73":{"name":"get","line":461,"loc":{"start":{"line":461,"column":7},"end":{"line":461,"column":22}}},"74":{"name":"get","line":467,"loc":{"start":{"line":467,"column":7},"end":{"line":467,"column":22}}},"75":{"name":"get","line":473,"loc":{"start":{"line":473,"column":7},"end":{"line":473,"column":22}}},"76":{"name":"get","line":479,"loc":{"start":{"line":479,"column":7},"end":{"line":479,"column":22}}},"77":{"name":"get","line":485,"loc":{"start":{"line":485,"column":7},"end":{"line":485,"column":22}}},"78":{"name":"get","line":491,"loc":{"start":{"line":491,"column":7},"end":{"line":491,"column":22}}},"79":{"name":"get","line":497,"loc":{"start":{"line":497,"column":7},"end":{"line":497,"column":22}}},"80":{"name":"get","line":503,"loc":{"start":{"line":503,"column":7},"end":{"line":503,"column":22}}},"81":{"name":"get","line":509,"loc":{"start":{"line":509,"column":7},"end":{"line":509,"column":22}}},"82":{"name":"get","line":515,"loc":{"start":{"line":515,"column":7},"end":{"line":515,"column":22}}},"83":{"name":"get","line":521,"loc":{"start":{"line":521,"column":7},"end":{"line":521,"column":22}}},"84":{"name":"get","line":527,"loc":{"start":{"line":527,"column":7},"end":{"line":527,"column":22}}},"85":{"name":"get","line":533,"loc":{"start":{"line":533,"column":7},"end":{"line":533,"column":22}}},"86":{"name":"get","line":539,"loc":{"start":{"line":539,"column":7},"end":{"line":539,"column":22}}},"87":{"name":"get","line":545,"loc":{"start":{"line":545,"column":7},"end":{"line":545,"column":22}}},"88":{"name":"get","line":551,"loc":{"start":{"line":551,"column":7},"end":{"line":551,"column":22}}},"89":{"name":"get","line":557,"loc":{"start":{"line":557,"column":7},"end":{"line":557,"column":22}}},"90":{"name":"get","line":563,"loc":{"start":{"line":563,"column":7},"end":{"line":563,"column":22}}},"91":{"name":"get","line":569,"loc":{"start":{"line":569,"column":7},"end":{"line":569,"column":22}}},"92":{"name":"get","line":575,"loc":{"start":{"line":575,"column":7},"end":{"line":575,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"3":{"start":{"line":9,"column":0},"end":{"line":14,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":28}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":30}},"6":{"start":{"line":18,"column":0},"end":{"line":23,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":31}},"8":{"start":{"line":24,"column":0},"end":{"line":29,"column":3}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":35}},"10":{"start":{"line":30,"column":0},"end":{"line":35,"column":3}},"11":{"start":{"line":33,"column":4},"end":{"line":33,"column":35}},"12":{"start":{"line":36,"column":0},"end":{"line":41,"column":3}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":38}},"14":{"start":{"line":42,"column":0},"end":{"line":47,"column":3}},"15":{"start":{"line":45,"column":4},"end":{"line":45,"column":34}},"16":{"start":{"line":48,"column":0},"end":{"line":53,"column":3}},"17":{"start":{"line":51,"column":4},"end":{"line":51,"column":33}},"18":{"start":{"line":54,"column":0},"end":{"line":59,"column":3}},"19":{"start":{"line":57,"column":4},"end":{"line":57,"column":40}},"20":{"start":{"line":60,"column":0},"end":{"line":65,"column":3}},"21":{"start":{"line":63,"column":4},"end":{"line":63,"column":29}},"22":{"start":{"line":66,"column":0},"end":{"line":71,"column":3}},"23":{"start":{"line":69,"column":4},"end":{"line":69,"column":32}},"24":{"start":{"line":72,"column":0},"end":{"line":77,"column":3}},"25":{"start":{"line":75,"column":4},"end":{"line":75,"column":34}},"26":{"start":{"line":78,"column":0},"end":{"line":83,"column":3}},"27":{"start":{"line":81,"column":4},"end":{"line":81,"column":26}},"28":{"start":{"line":84,"column":0},"end":{"line":89,"column":3}},"29":{"start":{"line":87,"column":4},"end":{"line":87,"column":35}},"30":{"start":{"line":90,"column":0},"end":{"line":95,"column":3}},"31":{"start":{"line":93,"column":4},"end":{"line":93,"column":28}},"32":{"start":{"line":96,"column":0},"end":{"line":101,"column":3}},"33":{"start":{"line":99,"column":4},"end":{"line":99,"column":30}},"34":{"start":{"line":102,"column":0},"end":{"line":107,"column":3}},"35":{"start":{"line":105,"column":4},"end":{"line":105,"column":31}},"36":{"start":{"line":108,"column":0},"end":{"line":113,"column":3}},"37":{"start":{"line":111,"column":4},"end":{"line":111,"column":32}},"38":{"start":{"line":114,"column":0},"end":{"line":119,"column":3}},"39":{"start":{"line":117,"column":4},"end":{"line":117,"column":27}},"40":{"start":{"line":120,"column":0},"end":{"line":125,"column":3}},"41":{"start":{"line":123,"column":4},"end":{"line":123,"column":37}},"42":{"start":{"line":126,"column":0},"end":{"line":131,"column":3}},"43":{"start":{"line":129,"column":4},"end":{"line":129,"column":41}},"44":{"start":{"line":132,"column":0},"end":{"line":137,"column":3}},"45":{"start":{"line":135,"column":4},"end":{"line":135,"column":38}},"46":{"start":{"line":138,"column":0},"end":{"line":143,"column":3}},"47":{"start":{"line":141,"column":4},"end":{"line":141,"column":44}},"48":{"start":{"line":144,"column":0},"end":{"line":149,"column":3}},"49":{"start":{"line":147,"column":4},"end":{"line":147,"column":44}},"50":{"start":{"line":150,"column":0},"end":{"line":155,"column":3}},"51":{"start":{"line":153,"column":4},"end":{"line":153,"column":36}},"52":{"start":{"line":156,"column":0},"end":{"line":161,"column":3}},"53":{"start":{"line":159,"column":4},"end":{"line":159,"column":34}},"54":{"start":{"line":162,"column":0},"end":{"line":167,"column":3}},"55":{"start":{"line":165,"column":4},"end":{"line":165,"column":38}},"56":{"start":{"line":168,"column":0},"end":{"line":173,"column":3}},"57":{"start":{"line":171,"column":4},"end":{"line":171,"column":26}},"58":{"start":{"line":174,"column":0},"end":{"line":179,"column":3}},"59":{"start":{"line":177,"column":4},"end":{"line":177,"column":29}},"60":{"start":{"line":180,"column":0},"end":{"line":185,"column":3}},"61":{"start":{"line":183,"column":4},"end":{"line":183,"column":37}},"62":{"start":{"line":186,"column":0},"end":{"line":191,"column":3}},"63":{"start":{"line":189,"column":4},"end":{"line":189,"column":24}},"64":{"start":{"line":192,"column":0},"end":{"line":197,"column":3}},"65":{"start":{"line":195,"column":4},"end":{"line":195,"column":25}},"66":{"start":{"line":198,"column":0},"end":{"line":203,"column":3}},"67":{"start":{"line":201,"column":4},"end":{"line":201,"column":30}},"68":{"start":{"line":204,"column":0},"end":{"line":209,"column":3}},"69":{"start":{"line":207,"column":4},"end":{"line":207,"column":29}},"70":{"start":{"line":210,"column":0},"end":{"line":215,"column":3}},"71":{"start":{"line":213,"column":4},"end":{"line":213,"column":28}},"72":{"start":{"line":216,"column":0},"end":{"line":221,"column":3}},"73":{"start":{"line":219,"column":4},"end":{"line":219,"column":24}},"74":{"start":{"line":222,"column":0},"end":{"line":227,"column":3}},"75":{"start":{"line":225,"column":4},"end":{"line":225,"column":29}},"76":{"start":{"line":228,"column":0},"end":{"line":233,"column":3}},"77":{"start":{"line":231,"column":4},"end":{"line":231,"column":30}},"78":{"start":{"line":234,"column":0},"end":{"line":239,"column":3}},"79":{"start":{"line":237,"column":4},"end":{"line":237,"column":28}},"80":{"start":{"line":240,"column":0},"end":{"line":245,"column":3}},"81":{"start":{"line":243,"column":4},"end":{"line":243,"column":33}},"82":{"start":{"line":246,"column":0},"end":{"line":251,"column":3}},"83":{"start":{"line":249,"column":4},"end":{"line":249,"column":32}},"84":{"start":{"line":252,"column":0},"end":{"line":257,"column":3}},"85":{"start":{"line":255,"column":4},"end":{"line":255,"column":29}},"86":{"start":{"line":258,"column":0},"end":{"line":263,"column":3}},"87":{"start":{"line":261,"column":4},"end":{"line":261,"column":28}},"88":{"start":{"line":264,"column":0},"end":{"line":269,"column":3}},"89":{"start":{"line":267,"column":4},"end":{"line":267,"column":33}},"90":{"start":{"line":270,"column":0},"end":{"line":275,"column":3}},"91":{"start":{"line":273,"column":4},"end":{"line":273,"column":34}},"92":{"start":{"line":276,"column":0},"end":{"line":281,"column":3}},"93":{"start":{"line":279,"column":4},"end":{"line":279,"column":32}},"94":{"start":{"line":282,"column":0},"end":{"line":287,"column":3}},"95":{"start":{"line":285,"column":4},"end":{"line":285,"column":37}},"96":{"start":{"line":288,"column":0},"end":{"line":293,"column":3}},"97":{"start":{"line":291,"column":4},"end":{"line":291,"column":36}},"98":{"start":{"line":294,"column":0},"end":{"line":299,"column":3}},"99":{"start":{"line":297,"column":4},"end":{"line":297,"column":33}},"100":{"start":{"line":300,"column":0},"end":{"line":305,"column":3}},"101":{"start":{"line":303,"column":4},"end":{"line":303,"column":33}},"102":{"start":{"line":306,"column":0},"end":{"line":311,"column":3}},"103":{"start":{"line":309,"column":4},"end":{"line":309,"column":30}},"104":{"start":{"line":313,"column":0},"end":{"line":313,"column":38}},"105":{"start":{"line":315,"column":0},"end":{"line":320,"column":3}},"106":{"start":{"line":318,"column":4},"end":{"line":318,"column":28}},"107":{"start":{"line":321,"column":0},"end":{"line":326,"column":3}},"108":{"start":{"line":324,"column":4},"end":{"line":324,"column":33}},"109":{"start":{"line":327,"column":0},"end":{"line":332,"column":3}},"110":{"start":{"line":330,"column":4},"end":{"line":330,"column":27}},"111":{"start":{"line":333,"column":0},"end":{"line":338,"column":3}},"112":{"start":{"line":336,"column":4},"end":{"line":336,"column":32}},"113":{"start":{"line":339,"column":0},"end":{"line":344,"column":3}},"114":{"start":{"line":342,"column":4},"end":{"line":342,"column":31}},"115":{"start":{"line":345,"column":0},"end":{"line":350,"column":3}},"116":{"start":{"line":348,"column":4},"end":{"line":348,"column":27}},"117":{"start":{"line":351,"column":0},"end":{"line":356,"column":3}},"118":{"start":{"line":354,"column":4},"end":{"line":354,"column":27}},"119":{"start":{"line":357,"column":0},"end":{"line":362,"column":3}},"120":{"start":{"line":360,"column":4},"end":{"line":360,"column":37}},"121":{"start":{"line":363,"column":0},"end":{"line":368,"column":3}},"122":{"start":{"line":366,"column":4},"end":{"line":366,"column":39}},"123":{"start":{"line":369,"column":0},"end":{"line":374,"column":3}},"124":{"start":{"line":372,"column":4},"end":{"line":372,"column":26}},"125":{"start":{"line":375,"column":0},"end":{"line":380,"column":3}},"126":{"start":{"line":378,"column":4},"end":{"line":378,"column":31}},"127":{"start":{"line":381,"column":0},"end":{"line":386,"column":3}},"128":{"start":{"line":384,"column":4},"end":{"line":384,"column":27}},"129":{"start":{"line":388,"column":0},"end":{"line":388,"column":40}},"130":{"start":{"line":390,"column":0},"end":{"line":395,"column":3}},"131":{"start":{"line":393,"column":4},"end":{"line":393,"column":30}},"132":{"start":{"line":396,"column":0},"end":{"line":401,"column":3}},"133":{"start":{"line":399,"column":4},"end":{"line":399,"column":43}},"134":{"start":{"line":402,"column":0},"end":{"line":407,"column":3}},"135":{"start":{"line":405,"column":4},"end":{"line":405,"column":42}},"136":{"start":{"line":409,"column":0},"end":{"line":409,"column":42}},"137":{"start":{"line":411,"column":0},"end":{"line":416,"column":3}},"138":{"start":{"line":414,"column":4},"end":{"line":414,"column":32}},"139":{"start":{"line":417,"column":0},"end":{"line":422,"column":3}},"140":{"start":{"line":420,"column":4},"end":{"line":420,"column":41}},"141":{"start":{"line":423,"column":0},"end":{"line":428,"column":3}},"142":{"start":{"line":426,"column":4},"end":{"line":426,"column":38}},"143":{"start":{"line":430,"column":0},"end":{"line":430,"column":32}},"144":{"start":{"line":432,"column":0},"end":{"line":437,"column":3}},"145":{"start":{"line":435,"column":4},"end":{"line":435,"column":31}},"146":{"start":{"line":438,"column":0},"end":{"line":443,"column":3}},"147":{"start":{"line":441,"column":4},"end":{"line":441,"column":30}},"148":{"start":{"line":445,"column":0},"end":{"line":445,"column":40}},"149":{"start":{"line":447,"column":0},"end":{"line":452,"column":3}},"150":{"start":{"line":450,"column":4},"end":{"line":450,"column":41}},"151":{"start":{"line":453,"column":0},"end":{"line":458,"column":3}},"152":{"start":{"line":456,"column":4},"end":{"line":456,"column":38}},"153":{"start":{"line":459,"column":0},"end":{"line":464,"column":3}},"154":{"start":{"line":462,"column":4},"end":{"line":462,"column":40}},"155":{"start":{"line":465,"column":0},"end":{"line":470,"column":3}},"156":{"start":{"line":468,"column":4},"end":{"line":468,"column":37}},"157":{"start":{"line":471,"column":0},"end":{"line":476,"column":3}},"158":{"start":{"line":474,"column":4},"end":{"line":474,"column":34}},"159":{"start":{"line":477,"column":0},"end":{"line":482,"column":3}},"160":{"start":{"line":480,"column":4},"end":{"line":480,"column":35}},"161":{"start":{"line":483,"column":0},"end":{"line":488,"column":3}},"162":{"start":{"line":486,"column":4},"end":{"line":486,"column":34}},"163":{"start":{"line":489,"column":0},"end":{"line":494,"column":3}},"164":{"start":{"line":492,"column":4},"end":{"line":492,"column":32}},"165":{"start":{"line":495,"column":0},"end":{"line":500,"column":3}},"166":{"start":{"line":498,"column":4},"end":{"line":498,"column":34}},"167":{"start":{"line":501,"column":0},"end":{"line":506,"column":3}},"168":{"start":{"line":504,"column":4},"end":{"line":504,"column":35}},"169":{"start":{"line":507,"column":0},"end":{"line":512,"column":3}},"170":{"start":{"line":510,"column":4},"end":{"line":510,"column":35}},"171":{"start":{"line":513,"column":0},"end":{"line":518,"column":3}},"172":{"start":{"line":516,"column":4},"end":{"line":516,"column":31}},"173":{"start":{"line":519,"column":0},"end":{"line":524,"column":3}},"174":{"start":{"line":522,"column":4},"end":{"line":522,"column":37}},"175":{"start":{"line":525,"column":0},"end":{"line":530,"column":3}},"176":{"start":{"line":528,"column":4},"end":{"line":528,"column":42}},"177":{"start":{"line":531,"column":0},"end":{"line":536,"column":3}},"178":{"start":{"line":534,"column":4},"end":{"line":534,"column":32}},"179":{"start":{"line":537,"column":0},"end":{"line":542,"column":3}},"180":{"start":{"line":540,"column":4},"end":{"line":540,"column":41}},"181":{"start":{"line":543,"column":0},"end":{"line":548,"column":3}},"182":{"start":{"line":546,"column":4},"end":{"line":546,"column":34}},"183":{"start":{"line":549,"column":0},"end":{"line":554,"column":3}},"184":{"start":{"line":552,"column":4},"end":{"line":552,"column":38}},"185":{"start":{"line":555,"column":0},"end":{"line":560,"column":3}},"186":{"start":{"line":558,"column":4},"end":{"line":558,"column":37}},"187":{"start":{"line":561,"column":0},"end":{"line":566,"column":3}},"188":{"start":{"line":564,"column":4},"end":{"line":564,"column":38}},"189":{"start":{"line":567,"column":0},"end":{"line":572,"column":3}},"190":{"start":{"line":570,"column":4},"end":{"line":570,"column":42}},"191":{"start":{"line":573,"column":0},"end":{"line":578,"column":3}},"192":{"start":{"line":576,"column":4},"end":{"line":576,"column":43}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","var _graphql = require('./graphql');","","Object.defineProperty(exports, 'graphql', {","  enumerable: true,","  get: function get() {","    return _graphql.graphql;","  }","});","","var _type = require('./type');","","Object.defineProperty(exports, 'GraphQLSchema', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLSchema;","  }","});","Object.defineProperty(exports, 'GraphQLScalarType', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLScalarType;","  }","});","Object.defineProperty(exports, 'GraphQLObjectType', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLObjectType;","  }","});","Object.defineProperty(exports, 'GraphQLInterfaceType', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLInterfaceType;","  }","});","Object.defineProperty(exports, 'GraphQLUnionType', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLUnionType;","  }","});","Object.defineProperty(exports, 'GraphQLEnumType', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLEnumType;","  }","});","Object.defineProperty(exports, 'GraphQLInputObjectType', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLInputObjectType;","  }","});","Object.defineProperty(exports, 'GraphQLList', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLList;","  }","});","Object.defineProperty(exports, 'GraphQLNonNull', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLNonNull;","  }","});","Object.defineProperty(exports, 'GraphQLDirective', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLDirective;","  }","});","Object.defineProperty(exports, 'TypeKind', {","  enumerable: true,","  get: function get() {","    return _type.TypeKind;","  }","});","Object.defineProperty(exports, 'DirectiveLocation', {","  enumerable: true,","  get: function get() {","    return _type.DirectiveLocation;","  }","});","Object.defineProperty(exports, 'GraphQLInt', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLInt;","  }","});","Object.defineProperty(exports, 'GraphQLFloat', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLFloat;","  }","});","Object.defineProperty(exports, 'GraphQLString', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLString;","  }","});","Object.defineProperty(exports, 'GraphQLBoolean', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLBoolean;","  }","});","Object.defineProperty(exports, 'GraphQLID', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLID;","  }","});","Object.defineProperty(exports, 'specifiedDirectives', {","  enumerable: true,","  get: function get() {","    return _type.specifiedDirectives;","  }","});","Object.defineProperty(exports, 'GraphQLIncludeDirective', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLIncludeDirective;","  }","});","Object.defineProperty(exports, 'GraphQLSkipDirective', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLSkipDirective;","  }","});","Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {","  enumerable: true,","  get: function get() {","    return _type.GraphQLDeprecatedDirective;","  }","});","Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {","  enumerable: true,","  get: function get() {","    return _type.DEFAULT_DEPRECATION_REASON;","  }","});","Object.defineProperty(exports, 'SchemaMetaFieldDef', {","  enumerable: true,","  get: function get() {","    return _type.SchemaMetaFieldDef;","  }","});","Object.defineProperty(exports, 'TypeMetaFieldDef', {","  enumerable: true,","  get: function get() {","    return _type.TypeMetaFieldDef;","  }","});","Object.defineProperty(exports, 'TypeNameMetaFieldDef', {","  enumerable: true,","  get: function get() {","    return _type.TypeNameMetaFieldDef;","  }","});","Object.defineProperty(exports, '__Schema', {","  enumerable: true,","  get: function get() {","    return _type.__Schema;","  }","});","Object.defineProperty(exports, '__Directive', {","  enumerable: true,","  get: function get() {","    return _type.__Directive;","  }","});","Object.defineProperty(exports, '__DirectiveLocation', {","  enumerable: true,","  get: function get() {","    return _type.__DirectiveLocation;","  }","});","Object.defineProperty(exports, '__Type', {","  enumerable: true,","  get: function get() {","    return _type.__Type;","  }","});","Object.defineProperty(exports, '__Field', {","  enumerable: true,","  get: function get() {","    return _type.__Field;","  }","});","Object.defineProperty(exports, '__InputValue', {","  enumerable: true,","  get: function get() {","    return _type.__InputValue;","  }","});","Object.defineProperty(exports, '__EnumValue', {","  enumerable: true,","  get: function get() {","    return _type.__EnumValue;","  }","});","Object.defineProperty(exports, '__TypeKind', {","  enumerable: true,","  get: function get() {","    return _type.__TypeKind;","  }","});","Object.defineProperty(exports, 'isType', {","  enumerable: true,","  get: function get() {","    return _type.isType;","  }","});","Object.defineProperty(exports, 'isInputType', {","  enumerable: true,","  get: function get() {","    return _type.isInputType;","  }","});","Object.defineProperty(exports, 'isOutputType', {","  enumerable: true,","  get: function get() {","    return _type.isOutputType;","  }","});","Object.defineProperty(exports, 'isLeafType', {","  enumerable: true,","  get: function get() {","    return _type.isLeafType;","  }","});","Object.defineProperty(exports, 'isCompositeType', {","  enumerable: true,","  get: function get() {","    return _type.isCompositeType;","  }","});","Object.defineProperty(exports, 'isAbstractType', {","  enumerable: true,","  get: function get() {","    return _type.isAbstractType;","  }","});","Object.defineProperty(exports, 'isNamedType', {","  enumerable: true,","  get: function get() {","    return _type.isNamedType;","  }","});","Object.defineProperty(exports, 'assertType', {","  enumerable: true,","  get: function get() {","    return _type.assertType;","  }","});","Object.defineProperty(exports, 'assertInputType', {","  enumerable: true,","  get: function get() {","    return _type.assertInputType;","  }","});","Object.defineProperty(exports, 'assertOutputType', {","  enumerable: true,","  get: function get() {","    return _type.assertOutputType;","  }","});","Object.defineProperty(exports, 'assertLeafType', {","  enumerable: true,","  get: function get() {","    return _type.assertLeafType;","  }","});","Object.defineProperty(exports, 'assertCompositeType', {","  enumerable: true,","  get: function get() {","    return _type.assertCompositeType;","  }","});","Object.defineProperty(exports, 'assertAbstractType', {","  enumerable: true,","  get: function get() {","    return _type.assertAbstractType;","  }","});","Object.defineProperty(exports, 'assertNamedType', {","  enumerable: true,","  get: function get() {","    return _type.assertNamedType;","  }","});","Object.defineProperty(exports, 'getNullableType', {","  enumerable: true,","  get: function get() {","    return _type.getNullableType;","  }","});","Object.defineProperty(exports, 'getNamedType', {","  enumerable: true,","  get: function get() {","    return _type.getNamedType;","  }","});","","var _language = require('./language');","","Object.defineProperty(exports, 'Source', {","  enumerable: true,","  get: function get() {","    return _language.Source;","  }","});","Object.defineProperty(exports, 'getLocation', {","  enumerable: true,","  get: function get() {","    return _language.getLocation;","  }","});","Object.defineProperty(exports, 'parse', {","  enumerable: true,","  get: function get() {","    return _language.parse;","  }","});","Object.defineProperty(exports, 'parseValue', {","  enumerable: true,","  get: function get() {","    return _language.parseValue;","  }","});","Object.defineProperty(exports, 'parseType', {","  enumerable: true,","  get: function get() {","    return _language.parseType;","  }","});","Object.defineProperty(exports, 'print', {","  enumerable: true,","  get: function get() {","    return _language.print;","  }","});","Object.defineProperty(exports, 'visit', {","  enumerable: true,","  get: function get() {","    return _language.visit;","  }","});","Object.defineProperty(exports, 'visitInParallel', {","  enumerable: true,","  get: function get() {","    return _language.visitInParallel;","  }","});","Object.defineProperty(exports, 'visitWithTypeInfo', {","  enumerable: true,","  get: function get() {","    return _language.visitWithTypeInfo;","  }","});","Object.defineProperty(exports, 'Kind', {","  enumerable: true,","  get: function get() {","    return _language.Kind;","  }","});","Object.defineProperty(exports, 'TokenKind', {","  enumerable: true,","  get: function get() {","    return _language.TokenKind;","  }","});","Object.defineProperty(exports, 'BREAK', {","  enumerable: true,","  get: function get() {","    return _language.BREAK;","  }","});","","var _execution = require('./execution');","","Object.defineProperty(exports, 'execute', {","  enumerable: true,","  get: function get() {","    return _execution.execute;","  }","});","Object.defineProperty(exports, 'defaultFieldResolver', {","  enumerable: true,","  get: function get() {","    return _execution.defaultFieldResolver;","  }","});","Object.defineProperty(exports, 'responsePathAsArray', {","  enumerable: true,","  get: function get() {","    return _execution.responsePathAsArray;","  }","});","","var _validation = require('./validation');","","Object.defineProperty(exports, 'validate', {","  enumerable: true,","  get: function get() {","    return _validation.validate;","  }","});","Object.defineProperty(exports, 'ValidationContext', {","  enumerable: true,","  get: function get() {","    return _validation.ValidationContext;","  }","});","Object.defineProperty(exports, 'specifiedRules', {","  enumerable: true,","  get: function get() {","    return _validation.specifiedRules;","  }","});","","var _error = require('./error');","","Object.defineProperty(exports, 'GraphQLError', {","  enumerable: true,","  get: function get() {","    return _error.GraphQLError;","  }","});","Object.defineProperty(exports, 'formatError', {","  enumerable: true,","  get: function get() {","    return _error.formatError;","  }","});","","var _utilities = require('./utilities');","","Object.defineProperty(exports, 'introspectionQuery', {","  enumerable: true,","  get: function get() {","    return _utilities.introspectionQuery;","  }","});","Object.defineProperty(exports, 'getOperationAST', {","  enumerable: true,","  get: function get() {","    return _utilities.getOperationAST;","  }","});","Object.defineProperty(exports, 'buildClientSchema', {","  enumerable: true,","  get: function get() {","    return _utilities.buildClientSchema;","  }","});","Object.defineProperty(exports, 'buildASTSchema', {","  enumerable: true,","  get: function get() {","    return _utilities.buildASTSchema;","  }","});","Object.defineProperty(exports, 'buildSchema', {","  enumerable: true,","  get: function get() {","    return _utilities.buildSchema;","  }","});","Object.defineProperty(exports, 'extendSchema', {","  enumerable: true,","  get: function get() {","    return _utilities.extendSchema;","  }","});","Object.defineProperty(exports, 'printSchema', {","  enumerable: true,","  get: function get() {","    return _utilities.printSchema;","  }","});","Object.defineProperty(exports, 'printType', {","  enumerable: true,","  get: function get() {","    return _utilities.printType;","  }","});","Object.defineProperty(exports, 'typeFromAST', {","  enumerable: true,","  get: function get() {","    return _utilities.typeFromAST;","  }","});","Object.defineProperty(exports, 'valueFromAST', {","  enumerable: true,","  get: function get() {","    return _utilities.valueFromAST;","  }","});","Object.defineProperty(exports, 'astFromValue', {","  enumerable: true,","  get: function get() {","    return _utilities.astFromValue;","  }","});","Object.defineProperty(exports, 'TypeInfo', {","  enumerable: true,","  get: function get() {","    return _utilities.TypeInfo;","  }","});","Object.defineProperty(exports, 'isValidJSValue', {","  enumerable: true,","  get: function get() {","    return _utilities.isValidJSValue;","  }","});","Object.defineProperty(exports, 'isValidLiteralValue', {","  enumerable: true,","  get: function get() {","    return _utilities.isValidLiteralValue;","  }","});","Object.defineProperty(exports, 'concatAST', {","  enumerable: true,","  get: function get() {","    return _utilities.concatAST;","  }","});","Object.defineProperty(exports, 'separateOperations', {","  enumerable: true,","  get: function get() {","    return _utilities.separateOperations;","  }","});","Object.defineProperty(exports, 'isEqualType', {","  enumerable: true,","  get: function get() {","    return _utilities.isEqualType;","  }","});","Object.defineProperty(exports, 'isTypeSubTypeOf', {","  enumerable: true,","  get: function get() {","    return _utilities.isTypeSubTypeOf;","  }","});","Object.defineProperty(exports, 'doTypesOverlap', {","  enumerable: true,","  get: function get() {","    return _utilities.doTypesOverlap;","  }","});","Object.defineProperty(exports, 'assertValidName', {","  enumerable: true,","  get: function get() {","    return _utilities.assertValidName;","  }","});","Object.defineProperty(exports, 'findBreakingChanges', {","  enumerable: true,","  get: function get() {","    return _utilities.findBreakingChanges;","  }","});","Object.defineProperty(exports, 'findDeprecatedUsages', {","  enumerable: true,","  get: function get() {","    return _utilities.findDeprecatedUsages;","  }","});"],"l":{"3":1,"7":1,"9":1,"12":2,"16":1,"18":1,"21":2,"24":1,"27":2,"30":1,"33":2,"36":1,"39":2,"42":1,"45":2,"48":1,"51":2,"54":1,"57":2,"60":1,"63":2,"66":1,"69":2,"72":1,"75":2,"78":1,"81":2,"84":1,"87":2,"90":1,"93":2,"96":1,"99":2,"102":1,"105":2,"108":1,"111":2,"114":1,"117":2,"120":1,"123":2,"126":1,"129":2,"132":1,"135":2,"138":1,"141":2,"144":1,"147":2,"150":1,"153":2,"156":1,"159":2,"162":1,"165":2,"168":1,"171":2,"174":1,"177":2,"180":1,"183":2,"186":1,"189":2,"192":1,"195":2,"198":1,"201":2,"204":1,"207":2,"210":1,"213":2,"216":1,"219":2,"222":1,"225":2,"228":1,"231":2,"234":1,"237":2,"240":1,"243":2,"246":1,"249":2,"252":1,"255":2,"258":1,"261":2,"264":1,"267":2,"270":1,"273":2,"276":1,"279":2,"282":1,"285":2,"288":1,"291":2,"294":1,"297":2,"300":1,"303":2,"306":1,"309":2,"313":1,"315":1,"318":2,"321":1,"324":2,"327":1,"330":2,"333":1,"336":2,"339":1,"342":2,"345":1,"348":2,"351":1,"354":2,"357":1,"360":2,"363":1,"366":2,"369":1,"372":2,"375":1,"378":2,"381":1,"384":2,"388":1,"390":1,"393":2,"396":1,"399":2,"402":1,"405":2,"409":1,"411":1,"414":2,"417":1,"420":2,"423":1,"426":2,"430":1,"432":1,"435":2,"438":1,"441":2,"445":1,"447":1,"450":2,"453":1,"456":2,"459":1,"462":2,"465":1,"468":2,"471":1,"474":2,"477":1,"480":2,"483":1,"486":2,"489":1,"492":2,"495":1,"498":2,"501":1,"504":2,"507":1,"510":2,"513":1,"516":2,"519":1,"522":2,"525":1,"528":2,"531":1,"534":2,"537":1,"540":2,"543":1,"546":2,"549":1,"552":2,"555":1,"558":2,"561":1,"564":2,"567":1,"570":2,"573":1,"576":2}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/graphql.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/graphql.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"graphql","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":96}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":21},"end":{"line":51,"column":40}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":21},"end":{"line":60,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":26}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":43}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":46}},"7":{"start":{"line":50,"column":0},"end":{"line":63,"column":1}},"8":{"start":{"line":51,"column":2},"end":{"line":62,"column":5}},"9":{"start":{"line":52,"column":4},"end":{"line":52,"column":76}},"10":{"start":{"line":53,"column":4},"end":{"line":53,"column":49}},"11":{"start":{"line":54,"column":4},"end":{"line":54,"column":72}},"12":{"start":{"line":55,"column":4},"end":{"line":59,"column":5}},"13":{"start":{"line":56,"column":6},"end":{"line":56,"column":44}},"14":{"start":{"line":58,"column":6},"end":{"line":58,"column":114}},"15":{"start":{"line":61,"column":4},"end":{"line":61,"column":31}}},"branchMap":{"1":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":36},"end":{"line":52,"column":49}},{"start":{"line":52,"column":53},"end":{"line":52,"column":55}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.graphql = graphql;","","var _source = require('./language/source');","","var _parser = require('./language/parser');","","var _validate = require('./validation/validate');","","var _execute = require('./execution/execute');","","/**"," * This is the primary entry point function for fulfilling GraphQL operations"," * by parsing, validating, and executing a GraphQL document along side a"," * GraphQL schema."," *"," * More sophisticated GraphQL servers, such as those which persist queries,"," * may wish to separate the validation and execution phases to a static time"," * tooling step, and a server runtime step."," *"," * schema:"," *    The GraphQL type system to use when validating and executing a query."," * requestString:"," *    A GraphQL language formatted string representing the requested operation."," * rootValue:"," *    The value provided as the first argument to resolver functions on the top"," *    level type (e.g. the query object type)."," * variableValues:"," *    A mapping of variable name to runtime value to use for all variables"," *    defined in the requestString."," * operationName:"," *    The name of the operation to use if requestString contains multiple"," *    possible operations. Can be omitted if requestString contains only"," *    one operation."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function graphql(schema, requestString, rootValue, contextValue, variableValues, operationName) {","  return new Promise(function (resolve) {","    var source = new _source.Source(requestString || '', 'GraphQL request');","    var documentAST = (0, _parser.parse)(source);","    var validationErrors = (0, _validate.validate)(schema, documentAST);","    if (validationErrors.length > 0) {","      resolve({ errors: validationErrors });","    } else {","      resolve((0, _execute.execute)(schema, documentAST, rootValue, contextValue, variableValues, operationName));","    }","  }).then(undefined, function (error) {","    return { errors: [error] };","  });","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"58":0,"61":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/source.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/source.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"_classCallCheck","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}}},"2":{"name":"Source","line":24,"loc":{"start":{"line":24,"column":30},"end":{"line":24,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":153}},"3":{"start":{"line":7,"column":50},"end":{"line":7,"column":151}},"4":{"start":{"line":7,"column":92},"end":{"line":7,"column":149}},"5":{"start":{"line":24,"column":0},"end":{"line":29,"column":2}},"6":{"start":{"line":25,"column":2},"end":{"line":25,"column":32}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":19}},"8":{"start":{"line":28,"column":2},"end":{"line":28,"column":32}}},"branchMap":{"1":{"line":7,"type":"if","locations":[{"start":{"line":7,"column":50},"end":{"line":7,"column":50}},{"start":{"line":7,"column":50},"end":{"line":7,"column":50}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":14},"end":{"line":28,"column":18}},{"start":{"line":28,"column":22},"end":{"line":28,"column":31}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * A representation of source input to GraphQL. The name is optional,"," * but is mostly useful for clients who store GraphQL documents in"," * source files; for example, if the GraphQL input is in a file Foo.graphql,"," * it might be useful for name to be \"Foo.graphql\"."," */","var Source = exports.Source = function Source(body, name) {","  _classCallCheck(this, Source);","","  this.body = body;","  this.name = name || 'GraphQL';","};"],"l":{"3":1,"7":1,"24":1,"25":0,"27":0,"28":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/parser.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/parser.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":1,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":1,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":1,"91":0,"92":1,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":1,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":1,"137":0,"138":1,"139":0,"140":1,"141":0,"142":0,"143":0,"144":1,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":1,"155":0,"156":0,"157":0,"158":0,"159":1,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":1,"175":0,"176":0,"177":1,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":1,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":0,"199":0,"200":0,"201":0,"202":1,"203":0,"204":0,"205":0,"206":0,"207":0,"208":1,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":1,"232":0,"233":0,"234":0,"235":1,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":1,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":1,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":1,"261":0,"262":0,"263":0,"264":0,"265":1,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":1,"273":0,"274":0,"275":0,"276":0,"277":1,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":1,"285":0,"286":0,"287":0,"288":0,"289":1,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":1,"299":0,"300":0,"301":0,"302":0,"303":1,"304":0,"305":0,"306":1,"307":0,"308":0,"309":0,"310":0,"311":0,"312":1,"313":0,"314":1,"315":0,"316":1,"317":0,"318":0,"319":0,"320":0,"321":1,"322":0,"323":0,"324":0,"325":0,"326":0,"327":1,"328":0,"329":0,"330":0,"331":0,"332":0,"333":1,"334":0,"335":0,"336":1,"337":0,"338":0,"339":0,"340":0,"341":0,"342":1,"343":0,"344":0,"345":0,"346":0,"347":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0,0,0,0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0,0,0,0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0,0,0,0,0,0,0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0},"fnMap":{"1":{"name":"parse","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":32}}},"2":{"name":"parseValue","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":37}}},"3":{"name":"parseType","line":75,"loc":{"start":{"line":75,"column":0},"end":{"line":75,"column":36}}},"4":{"name":"parseName","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":26}}},"5":{"name":"parseDocument","line":101,"loc":{"start":{"line":101,"column":0},"end":{"line":101,"column":30}}},"6":{"name":"parseDefinition","line":122,"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":32}}},"7":{"name":"parseOperationDefinition","line":162,"loc":{"start":{"line":162,"column":0},"end":{"line":162,"column":41}}},"8":{"name":"parseOperationType","line":194,"loc":{"start":{"line":194,"column":0},"end":{"line":194,"column":35}}},"9":{"name":"parseVariableDefinitions","line":212,"loc":{"start":{"line":212,"column":0},"end":{"line":212,"column":41}}},"10":{"name":"parseVariableDefinition","line":219,"loc":{"start":{"line":219,"column":0},"end":{"line":219,"column":40}}},"11":{"name":"parseVariable","line":233,"loc":{"start":{"line":233,"column":0},"end":{"line":233,"column":30}}},"12":{"name":"parseSelectionSet","line":246,"loc":{"start":{"line":246,"column":0},"end":{"line":246,"column":34}}},"13":{"name":"parseSelection","line":261,"loc":{"start":{"line":261,"column":0},"end":{"line":261,"column":31}}},"14":{"name":"parseField","line":270,"loc":{"start":{"line":270,"column":0},"end":{"line":270,"column":27}}},"15":{"name":"parseArguments","line":298,"loc":{"start":{"line":298,"column":0},"end":{"line":298,"column":31}}},"16":{"name":"parseArgument","line":305,"loc":{"start":{"line":305,"column":0},"end":{"line":305,"column":30}}},"17":{"name":"parseFragment","line":324,"loc":{"start":{"line":324,"column":0},"end":{"line":324,"column":30}}},"18":{"name":"parseFragmentDefinition","line":355,"loc":{"start":{"line":355,"column":0},"end":{"line":355,"column":40}}},"19":{"name":"parseFragmentName","line":371,"loc":{"start":{"line":371,"column":0},"end":{"line":371,"column":34}}},"20":{"name":"parseValueLiteral","line":398,"loc":{"start":{"line":398,"column":0},"end":{"line":398,"column":43}}},"21":{"name":"parseConstValue","line":456,"loc":{"start":{"line":456,"column":0},"end":{"line":456,"column":32}}},"22":{"name":"parseValueValue","line":460,"loc":{"start":{"line":460,"column":0},"end":{"line":460,"column":32}}},"23":{"name":"parseList","line":469,"loc":{"start":{"line":469,"column":0},"end":{"line":469,"column":35}}},"24":{"name":"parseObject","line":484,"loc":{"start":{"line":484,"column":0},"end":{"line":484,"column":37}}},"25":{"name":"parseObjectField","line":501,"loc":{"start":{"line":501,"column":0},"end":{"line":501,"column":42}}},"26":{"name":"parseDirectives","line":516,"loc":{"start":{"line":516,"column":0},"end":{"line":516,"column":32}}},"27":{"name":"parseDirective","line":527,"loc":{"start":{"line":527,"column":0},"end":{"line":527,"column":31}}},"28":{"name":"parseTypeReference","line":546,"loc":{"start":{"line":546,"column":0},"end":{"line":546,"column":35}}},"29":{"name":"parseNamedType","line":573,"loc":{"start":{"line":573,"column":0},"end":{"line":573,"column":31}}},"30":{"name":"parseTypeSystemDefinition","line":599,"loc":{"start":{"line":599,"column":0},"end":{"line":599,"column":42}}},"31":{"name":"parseSchemaDefinition","line":631,"loc":{"start":{"line":631,"column":0},"end":{"line":631,"column":38}}},"32":{"name":"parseOperationTypeDefinition","line":644,"loc":{"start":{"line":644,"column":0},"end":{"line":644,"column":45}}},"33":{"name":"parseScalarTypeDefinition","line":660,"loc":{"start":{"line":660,"column":0},"end":{"line":660,"column":42}}},"34":{"name":"parseObjectTypeDefinition","line":677,"loc":{"start":{"line":677,"column":0},"end":{"line":677,"column":42}}},"35":{"name":"parseImplementsInterfaces","line":697,"loc":{"start":{"line":697,"column":0},"end":{"line":697,"column":42}}},"36":{"name":"parseFieldDefinition","line":711,"loc":{"start":{"line":711,"column":0},"end":{"line":711,"column":37}}},"37":{"name":"parseArgumentDefs","line":731,"loc":{"start":{"line":731,"column":0},"end":{"line":731,"column":34}}},"38":{"name":"parseInputValueDef","line":741,"loc":{"start":{"line":741,"column":0},"end":{"line":741,"column":35}}},"39":{"name":"parseInterfaceTypeDefinition","line":764,"loc":{"start":{"line":764,"column":0},"end":{"line":764,"column":45}}},"40":{"name":"parseUnionTypeDefinition","line":782,"loc":{"start":{"line":782,"column":0},"end":{"line":782,"column":41}}},"41":{"name":"parseUnionMembers","line":803,"loc":{"start":{"line":803,"column":0},"end":{"line":803,"column":34}}},"42":{"name":"parseEnumTypeDefinition","line":814,"loc":{"start":{"line":814,"column":0},"end":{"line":814,"column":40}}},"43":{"name":"parseEnumValueDefinition","line":834,"loc":{"start":{"line":834,"column":0},"end":{"line":834,"column":41}}},"44":{"name":"parseInputObjectTypeDefinition","line":849,"loc":{"start":{"line":849,"column":0},"end":{"line":849,"column":47}}},"45":{"name":"parseTypeExtensionDefinition","line":867,"loc":{"start":{"line":867,"column":0},"end":{"line":867,"column":45}}},"46":{"name":"parseDirectiveDefinition","line":882,"loc":{"start":{"line":882,"column":0},"end":{"line":882,"column":41}}},"47":{"name":"parseDirectiveLocations","line":904,"loc":{"start":{"line":904,"column":0},"end":{"line":904,"column":40}}},"48":{"name":"loc","line":918,"loc":{"start":{"line":918,"column":0},"end":{"line":918,"column":32}}},"49":{"name":"Loc","line":924,"loc":{"start":{"line":924,"column":0},"end":{"line":924,"column":43}}},"50":{"name":"toJSON","line":933,"loc":{"start":{"line":933,"column":47},"end":{"line":933,"column":65}}},"51":{"name":"peek","line":940,"loc":{"start":{"line":940,"column":0},"end":{"line":940,"column":27}}},"52":{"name":"skip","line":948,"loc":{"start":{"line":948,"column":0},"end":{"line":948,"column":27}}},"53":{"name":"expect","line":960,"loc":{"start":{"line":960,"column":0},"end":{"line":960,"column":29}}},"54":{"name":"expectKeyword","line":974,"loc":{"start":{"line":974,"column":0},"end":{"line":974,"column":37}}},"55":{"name":"unexpected","line":987,"loc":{"start":{"line":987,"column":0},"end":{"line":987,"column":36}}},"56":{"name":"any","line":998,"loc":{"start":{"line":998,"column":0},"end":{"line":998,"column":50}}},"57":{"name":"many","line":1013,"loc":{"start":{"line":1013,"column":0},"end":{"line":1013,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":22}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":32}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":30}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":42}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":48}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"8":{"start":{"line":13,"column":0},"end":{"line":13,"column":34}},"9":{"start":{"line":15,"column":0},"end":{"line":15,"column":33}},"10":{"start":{"line":17,"column":0},"end":{"line":17,"column":32}},"11":{"start":{"line":19,"column":0},"end":{"line":19,"column":32}},"12":{"start":{"line":40,"column":0},"end":{"line":44,"column":1}},"13":{"start":{"line":41,"column":2},"end":{"line":41,"column":83}},"14":{"start":{"line":42,"column":2},"end":{"line":42,"column":64}},"15":{"start":{"line":43,"column":2},"end":{"line":43,"column":30}},"16":{"start":{"line":56,"column":0},"end":{"line":63,"column":1}},"17":{"start":{"line":57,"column":2},"end":{"line":57,"column":83}},"18":{"start":{"line":58,"column":2},"end":{"line":58,"column":64}},"19":{"start":{"line":59,"column":2},"end":{"line":59,"column":38}},"20":{"start":{"line":60,"column":2},"end":{"line":60,"column":46}},"21":{"start":{"line":61,"column":2},"end":{"line":61,"column":38}},"22":{"start":{"line":62,"column":2},"end":{"line":62,"column":15}},"23":{"start":{"line":75,"column":0},"end":{"line":82,"column":1}},"24":{"start":{"line":76,"column":2},"end":{"line":76,"column":83}},"25":{"start":{"line":77,"column":2},"end":{"line":77,"column":64}},"26":{"start":{"line":78,"column":2},"end":{"line":78,"column":38}},"27":{"start":{"line":79,"column":2},"end":{"line":79,"column":39}},"28":{"start":{"line":80,"column":2},"end":{"line":80,"column":38}},"29":{"start":{"line":81,"column":2},"end":{"line":81,"column":14}},"30":{"start":{"line":87,"column":0},"end":{"line":94,"column":1}},"31":{"start":{"line":88,"column":2},"end":{"line":88,"column":51}},"32":{"start":{"line":89,"column":2},"end":{"line":93,"column":4}},"33":{"start":{"line":101,"column":0},"end":{"line":114,"column":1}},"34":{"start":{"line":102,"column":2},"end":{"line":102,"column":26}},"35":{"start":{"line":103,"column":2},"end":{"line":103,"column":38}},"36":{"start":{"line":104,"column":2},"end":{"line":104,"column":23}},"37":{"start":{"line":105,"column":2},"end":{"line":107,"column":47}},"38":{"start":{"line":106,"column":4},"end":{"line":106,"column":45}},"39":{"start":{"line":109,"column":2},"end":{"line":113,"column":4}},"40":{"start":{"line":122,"column":0},"end":{"line":153,"column":1}},"41":{"start":{"line":123,"column":2},"end":{"line":125,"column":3}},"42":{"start":{"line":124,"column":4},"end":{"line":124,"column":43}},"43":{"start":{"line":127,"column":2},"end":{"line":150,"column":3}},"44":{"start":{"line":128,"column":4},"end":{"line":149,"column":5}},"45":{"start":{"line":133,"column":8},"end":{"line":133,"column":47}},"46":{"start":{"line":136,"column":8},"end":{"line":136,"column":46}},"47":{"start":{"line":148,"column":8},"end":{"line":148,"column":48}},"48":{"start":{"line":152,"column":2},"end":{"line":152,"column":26}},"49":{"start":{"line":162,"column":0},"end":{"line":189,"column":1}},"50":{"start":{"line":163,"column":2},"end":{"line":163,"column":26}},"51":{"start":{"line":164,"column":2},"end":{"line":174,"column":3}},"52":{"start":{"line":165,"column":4},"end":{"line":173,"column":6}},"53":{"start":{"line":175,"column":2},"end":{"line":175,"column":44}},"54":{"start":{"line":176,"column":2},"end":{"line":176,"column":20}},"55":{"start":{"line":177,"column":2},"end":{"line":179,"column":3}},"56":{"start":{"line":178,"column":4},"end":{"line":178,"column":28}},"57":{"start":{"line":180,"column":2},"end":{"line":188,"column":4}},"58":{"start":{"line":194,"column":0},"end":{"line":207,"column":1}},"59":{"start":{"line":195,"column":2},"end":{"line":195,"column":60}},"60":{"start":{"line":196,"column":2},"end":{"line":204,"column":3}},"61":{"start":{"line":198,"column":6},"end":{"line":198,"column":21}},"62":{"start":{"line":200,"column":6},"end":{"line":200,"column":24}},"63":{"start":{"line":203,"column":6},"end":{"line":203,"column":28}},"64":{"start":{"line":206,"column":2},"end":{"line":206,"column":42}},"65":{"start":{"line":212,"column":0},"end":{"line":214,"column":1}},"66":{"start":{"line":213,"column":2},"end":{"line":213,"column":143}},"67":{"start":{"line":219,"column":0},"end":{"line":228,"column":1}},"68":{"start":{"line":220,"column":2},"end":{"line":220,"column":26}},"69":{"start":{"line":221,"column":2},"end":{"line":227,"column":4}},"70":{"start":{"line":233,"column":0},"end":{"line":241,"column":1}},"71":{"start":{"line":234,"column":2},"end":{"line":234,"column":26}},"72":{"start":{"line":235,"column":2},"end":{"line":235,"column":41}},"73":{"start":{"line":236,"column":2},"end":{"line":240,"column":4}},"74":{"start":{"line":246,"column":0},"end":{"line":253,"column":1}},"75":{"start":{"line":247,"column":2},"end":{"line":247,"column":26}},"76":{"start":{"line":248,"column":2},"end":{"line":252,"column":4}},"77":{"start":{"line":261,"column":0},"end":{"line":263,"column":1}},"78":{"start":{"line":262,"column":2},"end":{"line":262,"column":89}},"79":{"start":{"line":270,"column":0},"end":{"line":293,"column":1}},"80":{"start":{"line":271,"column":2},"end":{"line":271,"column":26}},"81":{"start":{"line":273,"column":2},"end":{"line":273,"column":37}},"82":{"start":{"line":274,"column":2},"end":{"line":274,"column":21}},"83":{"start":{"line":275,"column":2},"end":{"line":275,"column":20}},"84":{"start":{"line":276,"column":2},"end":{"line":282,"column":3}},"85":{"start":{"line":277,"column":4},"end":{"line":277,"column":24}},"86":{"start":{"line":278,"column":4},"end":{"line":278,"column":28}},"87":{"start":{"line":280,"column":4},"end":{"line":280,"column":17}},"88":{"start":{"line":281,"column":4},"end":{"line":281,"column":23}},"89":{"start":{"line":284,"column":2},"end":{"line":292,"column":4}},"90":{"start":{"line":298,"column":0},"end":{"line":300,"column":1}},"91":{"start":{"line":299,"column":2},"end":{"line":299,"column":133}},"92":{"start":{"line":305,"column":0},"end":{"line":313,"column":1}},"93":{"start":{"line":306,"column":2},"end":{"line":306,"column":26}},"94":{"start":{"line":307,"column":2},"end":{"line":312,"column":4}},"95":{"start":{"line":324,"column":0},"end":{"line":347,"column":1}},"96":{"start":{"line":325,"column":2},"end":{"line":325,"column":26}},"97":{"start":{"line":326,"column":2},"end":{"line":326,"column":41}},"98":{"start":{"line":327,"column":2},"end":{"line":334,"column":3}},"99":{"start":{"line":328,"column":4},"end":{"line":333,"column":6}},"100":{"start":{"line":335,"column":2},"end":{"line":335,"column":27}},"101":{"start":{"line":336,"column":2},"end":{"line":339,"column":3}},"102":{"start":{"line":337,"column":4},"end":{"line":337,"column":20}},"103":{"start":{"line":338,"column":4},"end":{"line":338,"column":42}},"104":{"start":{"line":340,"column":2},"end":{"line":346,"column":4}},"105":{"start":{"line":355,"column":0},"end":{"line":366,"column":1}},"106":{"start":{"line":356,"column":2},"end":{"line":356,"column":26}},"107":{"start":{"line":357,"column":2},"end":{"line":357,"column":35}},"108":{"start":{"line":358,"column":2},"end":{"line":365,"column":4}},"109":{"start":{"line":371,"column":0},"end":{"line":376,"column":1}},"110":{"start":{"line":372,"column":2},"end":{"line":374,"column":3}},"111":{"start":{"line":373,"column":4},"end":{"line":373,"column":28}},"112":{"start":{"line":375,"column":2},"end":{"line":375,"column":26}},"113":{"start":{"line":398,"column":0},"end":{"line":454,"column":1}},"114":{"start":{"line":399,"column":2},"end":{"line":399,"column":26}},"115":{"start":{"line":400,"column":2},"end":{"line":452,"column":3}},"116":{"start":{"line":402,"column":6},"end":{"line":402,"column":39}},"117":{"start":{"line":404,"column":6},"end":{"line":404,"column":41}},"118":{"start":{"line":406,"column":6},"end":{"line":406,"column":22}},"119":{"start":{"line":407,"column":6},"end":{"line":411,"column":8}},"120":{"start":{"line":413,"column":6},"end":{"line":413,"column":22}},"121":{"start":{"line":414,"column":6},"end":{"line":418,"column":8}},"122":{"start":{"line":420,"column":6},"end":{"line":420,"column":22}},"123":{"start":{"line":421,"column":6},"end":{"line":425,"column":8}},"124":{"start":{"line":427,"column":6},"end":{"line":440,"column":7}},"125":{"start":{"line":428,"column":8},"end":{"line":428,"column":24}},"126":{"start":{"line":429,"column":8},"end":{"line":433,"column":10}},"127":{"start":{"line":434,"column":13},"end":{"line":440,"column":7}},"128":{"start":{"line":435,"column":8},"end":{"line":435,"column":24}},"129":{"start":{"line":436,"column":8},"end":{"line":439,"column":10}},"130":{"start":{"line":441,"column":6},"end":{"line":441,"column":22}},"131":{"start":{"line":442,"column":6},"end":{"line":446,"column":8}},"132":{"start":{"line":448,"column":6},"end":{"line":450,"column":7}},"133":{"start":{"line":449,"column":8},"end":{"line":449,"column":36}},"134":{"start":{"line":451,"column":6},"end":{"line":451,"column":12}},"135":{"start":{"line":453,"column":2},"end":{"line":453,"column":26}},"136":{"start":{"line":456,"column":0},"end":{"line":458,"column":1}},"137":{"start":{"line":457,"column":2},"end":{"line":457,"column":40}},"138":{"start":{"line":460,"column":0},"end":{"line":462,"column":1}},"139":{"start":{"line":461,"column":2},"end":{"line":461,"column":41}},"140":{"start":{"line":469,"column":0},"end":{"line":477,"column":1}},"141":{"start":{"line":470,"column":2},"end":{"line":470,"column":26}},"142":{"start":{"line":471,"column":2},"end":{"line":471,"column":57}},"143":{"start":{"line":472,"column":2},"end":{"line":476,"column":4}},"144":{"start":{"line":484,"column":0},"end":{"line":496,"column":1}},"145":{"start":{"line":485,"column":2},"end":{"line":485,"column":26}},"146":{"start":{"line":486,"column":2},"end":{"line":486,"column":42}},"147":{"start":{"line":487,"column":2},"end":{"line":487,"column":18}},"148":{"start":{"line":488,"column":2},"end":{"line":490,"column":3}},"149":{"start":{"line":489,"column":4},"end":{"line":489,"column":50}},"150":{"start":{"line":491,"column":2},"end":{"line":495,"column":4}},"151":{"start":{"line":501,"column":0},"end":{"line":509,"column":1}},"152":{"start":{"line":502,"column":2},"end":{"line":502,"column":26}},"153":{"start":{"line":503,"column":2},"end":{"line":508,"column":4}},"154":{"start":{"line":516,"column":0},"end":{"line":522,"column":1}},"155":{"start":{"line":517,"column":2},"end":{"line":517,"column":22}},"156":{"start":{"line":518,"column":2},"end":{"line":520,"column":3}},"157":{"start":{"line":519,"column":4},"end":{"line":519,"column":43}},"158":{"start":{"line":521,"column":2},"end":{"line":521,"column":20}},"159":{"start":{"line":527,"column":0},"end":{"line":536,"column":1}},"160":{"start":{"line":528,"column":2},"end":{"line":528,"column":26}},"161":{"start":{"line":529,"column":2},"end":{"line":529,"column":37}},"162":{"start":{"line":530,"column":2},"end":{"line":535,"column":4}},"163":{"start":{"line":546,"column":0},"end":{"line":568,"column":1}},"164":{"start":{"line":547,"column":2},"end":{"line":547,"column":26}},"165":{"start":{"line":548,"column":2},"end":{"line":548,"column":20}},"166":{"start":{"line":549,"column":2},"end":{"line":559,"column":3}},"167":{"start":{"line":550,"column":4},"end":{"line":550,"column":37}},"168":{"start":{"line":551,"column":4},"end":{"line":551,"column":46}},"169":{"start":{"line":552,"column":4},"end":{"line":556,"column":6}},"170":{"start":{"line":558,"column":4},"end":{"line":558,"column":33}},"171":{"start":{"line":560,"column":2},"end":{"line":566,"column":3}},"172":{"start":{"line":561,"column":4},"end":{"line":565,"column":6}},"173":{"start":{"line":567,"column":2},"end":{"line":567,"column":14}},"174":{"start":{"line":573,"column":0},"end":{"line":580,"column":1}},"175":{"start":{"line":574,"column":2},"end":{"line":574,"column":26}},"176":{"start":{"line":575,"column":2},"end":{"line":579,"column":4}},"177":{"start":{"line":599,"column":0},"end":{"line":624,"column":1}},"178":{"start":{"line":600,"column":2},"end":{"line":621,"column":3}},"179":{"start":{"line":601,"column":4},"end":{"line":620,"column":5}},"180":{"start":{"line":603,"column":8},"end":{"line":603,"column":44}},"181":{"start":{"line":605,"column":8},"end":{"line":605,"column":48}},"182":{"start":{"line":607,"column":8},"end":{"line":607,"column":48}},"183":{"start":{"line":609,"column":8},"end":{"line":609,"column":51}},"184":{"start":{"line":611,"column":8},"end":{"line":611,"column":47}},"185":{"start":{"line":613,"column":8},"end":{"line":613,"column":46}},"186":{"start":{"line":615,"column":8},"end":{"line":615,"column":53}},"187":{"start":{"line":617,"column":8},"end":{"line":617,"column":51}},"188":{"start":{"line":619,"column":8},"end":{"line":619,"column":47}},"189":{"start":{"line":623,"column":2},"end":{"line":623,"column":26}},"190":{"start":{"line":631,"column":0},"end":{"line":642,"column":1}},"191":{"start":{"line":632,"column":2},"end":{"line":632,"column":26}},"192":{"start":{"line":633,"column":2},"end":{"line":633,"column":33}},"193":{"start":{"line":634,"column":2},"end":{"line":634,"column":42}},"194":{"start":{"line":635,"column":2},"end":{"line":635,"column":117}},"195":{"start":{"line":636,"column":2},"end":{"line":641,"column":4}},"196":{"start":{"line":644,"column":0},"end":{"line":655,"column":1}},"197":{"start":{"line":645,"column":2},"end":{"line":645,"column":26}},"198":{"start":{"line":646,"column":2},"end":{"line":646,"column":44}},"199":{"start":{"line":647,"column":2},"end":{"line":647,"column":40}},"200":{"start":{"line":648,"column":2},"end":{"line":648,"column":35}},"201":{"start":{"line":649,"column":2},"end":{"line":654,"column":4}},"202":{"start":{"line":660,"column":0},"end":{"line":671,"column":1}},"203":{"start":{"line":661,"column":2},"end":{"line":661,"column":26}},"204":{"start":{"line":662,"column":2},"end":{"line":662,"column":33}},"205":{"start":{"line":663,"column":2},"end":{"line":663,"column":30}},"206":{"start":{"line":664,"column":2},"end":{"line":664,"column":42}},"207":{"start":{"line":665,"column":2},"end":{"line":670,"column":4}},"208":{"start":{"line":677,"column":0},"end":{"line":692,"column":1}},"209":{"start":{"line":678,"column":2},"end":{"line":678,"column":26}},"210":{"start":{"line":679,"column":2},"end":{"line":679,"column":31}},"211":{"start":{"line":680,"column":2},"end":{"line":680,"column":30}},"212":{"start":{"line":681,"column":2},"end":{"line":681,"column":52}},"213":{"start":{"line":682,"column":2},"end":{"line":682,"column":42}},"214":{"start":{"line":683,"column":2},"end":{"line":683,"column":100}},"215":{"start":{"line":684,"column":2},"end":{"line":691,"column":4}},"216":{"start":{"line":697,"column":0},"end":{"line":706,"column":1}},"217":{"start":{"line":698,"column":2},"end":{"line":698,"column":17}},"218":{"start":{"line":699,"column":2},"end":{"line":704,"column":3}},"219":{"start":{"line":700,"column":4},"end":{"line":700,"column":20}},"220":{"start":{"line":701,"column":4},"end":{"line":703,"column":49}},"221":{"start":{"line":702,"column":6},"end":{"line":702,"column":40}},"222":{"start":{"line":705,"column":2},"end":{"line":705,"column":15}},"223":{"start":{"line":711,"column":0},"end":{"line":726,"column":1}},"224":{"start":{"line":712,"column":2},"end":{"line":712,"column":26}},"225":{"start":{"line":713,"column":2},"end":{"line":713,"column":30}},"226":{"start":{"line":714,"column":2},"end":{"line":714,"column":38}},"227":{"start":{"line":715,"column":2},"end":{"line":715,"column":40}},"228":{"start":{"line":716,"column":2},"end":{"line":716,"column":39}},"229":{"start":{"line":717,"column":2},"end":{"line":717,"column":42}},"230":{"start":{"line":718,"column":2},"end":{"line":725,"column":4}},"231":{"start":{"line":731,"column":0},"end":{"line":736,"column":1}},"232":{"start":{"line":732,"column":2},"end":{"line":734,"column":3}},"233":{"start":{"line":733,"column":4},"end":{"line":733,"column":14}},"234":{"start":{"line":735,"column":2},"end":{"line":735,"column":93}},"235":{"start":{"line":741,"column":0},"end":{"line":759,"column":1}},"236":{"start":{"line":742,"column":2},"end":{"line":742,"column":26}},"237":{"start":{"line":743,"column":2},"end":{"line":743,"column":30}},"238":{"start":{"line":744,"column":2},"end":{"line":744,"column":40}},"239":{"start":{"line":745,"column":2},"end":{"line":745,"column":39}},"240":{"start":{"line":746,"column":2},"end":{"line":746,"column":26}},"241":{"start":{"line":747,"column":2},"end":{"line":749,"column":3}},"242":{"start":{"line":748,"column":4},"end":{"line":748,"column":42}},"243":{"start":{"line":750,"column":2},"end":{"line":750,"column":42}},"244":{"start":{"line":751,"column":2},"end":{"line":758,"column":4}},"245":{"start":{"line":764,"column":0},"end":{"line":777,"column":1}},"246":{"start":{"line":765,"column":2},"end":{"line":765,"column":26}},"247":{"start":{"line":766,"column":2},"end":{"line":766,"column":36}},"248":{"start":{"line":767,"column":2},"end":{"line":767,"column":30}},"249":{"start":{"line":768,"column":2},"end":{"line":768,"column":42}},"250":{"start":{"line":769,"column":2},"end":{"line":769,"column":100}},"251":{"start":{"line":770,"column":2},"end":{"line":776,"column":4}},"252":{"start":{"line":782,"column":0},"end":{"line":796,"column":1}},"253":{"start":{"line":783,"column":2},"end":{"line":783,"column":26}},"254":{"start":{"line":784,"column":2},"end":{"line":784,"column":32}},"255":{"start":{"line":785,"column":2},"end":{"line":785,"column":30}},"256":{"start":{"line":786,"column":2},"end":{"line":786,"column":42}},"257":{"start":{"line":787,"column":2},"end":{"line":787,"column":41}},"258":{"start":{"line":788,"column":2},"end":{"line":788,"column":39}},"259":{"start":{"line":789,"column":2},"end":{"line":795,"column":4}},"260":{"start":{"line":803,"column":0},"end":{"line":809,"column":1}},"261":{"start":{"line":804,"column":2},"end":{"line":804,"column":19}},"262":{"start":{"line":805,"column":2},"end":{"line":807,"column":47}},"263":{"start":{"line":806,"column":4},"end":{"line":806,"column":40}},"264":{"start":{"line":808,"column":2},"end":{"line":808,"column":17}},"265":{"start":{"line":814,"column":0},"end":{"line":827,"column":1}},"266":{"start":{"line":815,"column":2},"end":{"line":815,"column":26}},"267":{"start":{"line":816,"column":2},"end":{"line":816,"column":31}},"268":{"start":{"line":817,"column":2},"end":{"line":817,"column":30}},"269":{"start":{"line":818,"column":2},"end":{"line":818,"column":42}},"270":{"start":{"line":819,"column":2},"end":{"line":819,"column":105}},"271":{"start":{"line":820,"column":2},"end":{"line":826,"column":4}},"272":{"start":{"line":834,"column":0},"end":{"line":844,"column":1}},"273":{"start":{"line":835,"column":2},"end":{"line":835,"column":26}},"274":{"start":{"line":836,"column":2},"end":{"line":836,"column":30}},"275":{"start":{"line":837,"column":2},"end":{"line":837,"column":42}},"276":{"start":{"line":838,"column":2},"end":{"line":843,"column":4}},"277":{"start":{"line":849,"column":0},"end":{"line":862,"column":1}},"278":{"start":{"line":850,"column":2},"end":{"line":850,"column":26}},"279":{"start":{"line":851,"column":2},"end":{"line":851,"column":32}},"280":{"start":{"line":852,"column":2},"end":{"line":852,"column":30}},"281":{"start":{"line":853,"column":2},"end":{"line":853,"column":42}},"282":{"start":{"line":854,"column":2},"end":{"line":854,"column":98}},"283":{"start":{"line":855,"column":2},"end":{"line":861,"column":4}},"284":{"start":{"line":867,"column":0},"end":{"line":876,"column":1}},"285":{"start":{"line":868,"column":2},"end":{"line":868,"column":26}},"286":{"start":{"line":869,"column":2},"end":{"line":869,"column":33}},"287":{"start":{"line":870,"column":2},"end":{"line":870,"column":52}},"288":{"start":{"line":871,"column":2},"end":{"line":875,"column":4}},"289":{"start":{"line":882,"column":0},"end":{"line":897,"column":1}},"290":{"start":{"line":883,"column":2},"end":{"line":883,"column":26}},"291":{"start":{"line":884,"column":2},"end":{"line":884,"column":36}},"292":{"start":{"line":885,"column":2},"end":{"line":885,"column":37}},"293":{"start":{"line":886,"column":2},"end":{"line":886,"column":30}},"294":{"start":{"line":887,"column":2},"end":{"line":887,"column":38}},"295":{"start":{"line":888,"column":2},"end":{"line":888,"column":29}},"296":{"start":{"line":889,"column":2},"end":{"line":889,"column":49}},"297":{"start":{"line":890,"column":2},"end":{"line":896,"column":4}},"298":{"start":{"line":904,"column":0},"end":{"line":910,"column":1}},"299":{"start":{"line":905,"column":2},"end":{"line":905,"column":21}},"300":{"start":{"line":906,"column":2},"end":{"line":908,"column":47}},"301":{"start":{"line":907,"column":4},"end":{"line":907,"column":37}},"302":{"start":{"line":909,"column":2},"end":{"line":909,"column":19}},"303":{"start":{"line":918,"column":0},"end":{"line":922,"column":1}},"304":{"start":{"line":919,"column":2},"end":{"line":921,"column":3}},"305":{"start":{"line":920,"column":4},"end":{"line":920,"column":62}},"306":{"start":{"line":924,"column":0},"end":{"line":930,"column":1}},"307":{"start":{"line":925,"column":2},"end":{"line":925,"column":32}},"308":{"start":{"line":926,"column":2},"end":{"line":926,"column":26}},"309":{"start":{"line":927,"column":2},"end":{"line":927,"column":31}},"310":{"start":{"line":928,"column":2},"end":{"line":928,"column":27}},"311":{"start":{"line":929,"column":2},"end":{"line":929,"column":23}},"312":{"start":{"line":933,"column":0},"end":{"line":935,"column":2}},"313":{"start":{"line":934,"column":2},"end":{"line":934,"column":46}},"314":{"start":{"line":940,"column":0},"end":{"line":942,"column":1}},"315":{"start":{"line":941,"column":2},"end":{"line":941,"column":35}},"316":{"start":{"line":948,"column":0},"end":{"line":954,"column":1}},"317":{"start":{"line":949,"column":2},"end":{"line":949,"column":40}},"318":{"start":{"line":950,"column":2},"end":{"line":952,"column":3}},"319":{"start":{"line":951,"column":4},"end":{"line":951,"column":20}},"320":{"start":{"line":953,"column":2},"end":{"line":953,"column":15}},"321":{"start":{"line":960,"column":0},"end":{"line":967,"column":1}},"322":{"start":{"line":961,"column":2},"end":{"line":961,"column":26}},"323":{"start":{"line":962,"column":2},"end":{"line":965,"column":3}},"324":{"start":{"line":963,"column":4},"end":{"line":963,"column":20}},"325":{"start":{"line":964,"column":4},"end":{"line":964,"column":17}},"326":{"start":{"line":966,"column":2},"end":{"line":966,"column":126}},"327":{"start":{"line":974,"column":0},"end":{"line":981,"column":1}},"328":{"start":{"line":975,"column":2},"end":{"line":975,"column":26}},"329":{"start":{"line":976,"column":2},"end":{"line":979,"column":3}},"330":{"start":{"line":977,"column":4},"end":{"line":977,"column":20}},"331":{"start":{"line":978,"column":4},"end":{"line":978,"column":17}},"332":{"start":{"line":980,"column":2},"end":{"line":980,"column":129}},"333":{"start":{"line":987,"column":0},"end":{"line":990,"column":1}},"334":{"start":{"line":988,"column":2},"end":{"line":988,"column":37}},"335":{"start":{"line":989,"column":2},"end":{"line":989,"column":109}},"336":{"start":{"line":998,"column":0},"end":{"line":1005,"column":1}},"337":{"start":{"line":999,"column":2},"end":{"line":999,"column":26}},"338":{"start":{"line":1000,"column":2},"end":{"line":1000,"column":17}},"339":{"start":{"line":1001,"column":2},"end":{"line":1003,"column":3}},"340":{"start":{"line":1002,"column":4},"end":{"line":1002,"column":31}},"341":{"start":{"line":1004,"column":2},"end":{"line":1004,"column":15}},"342":{"start":{"line":1013,"column":0},"end":{"line":1020,"column":1}},"343":{"start":{"line":1014,"column":2},"end":{"line":1014,"column":26}},"344":{"start":{"line":1015,"column":2},"end":{"line":1015,"column":31}},"345":{"start":{"line":1016,"column":2},"end":{"line":1018,"column":3}},"346":{"start":{"line":1017,"column":4},"end":{"line":1017,"column":31}},"347":{"start":{"line":1019,"column":2},"end":{"line":1019,"column":15}}},"branchMap":{"1":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":47},"end":{"line":41,"column":73}},{"start":{"line":41,"column":76},"end":{"line":41,"column":82}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":49},"end":{"line":42,"column":56}},{"start":{"line":42,"column":60},"end":{"line":42,"column":62}}]},"3":{"line":57,"type":"cond-expr","locations":[{"start":{"line":57,"column":47},"end":{"line":57,"column":73}},{"start":{"line":57,"column":76},"end":{"line":57,"column":82}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":49},"end":{"line":58,"column":56}},{"start":{"line":58,"column":60},"end":{"line":58,"column":62}}]},"5":{"line":76,"type":"cond-expr","locations":[{"start":{"line":76,"column":47},"end":{"line":76,"column":73}},{"start":{"line":76,"column":76},"end":{"line":76,"column":82}}]},"6":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":49},"end":{"line":77,"column":56}},{"start":{"line":77,"column":60},"end":{"line":77,"column":62}}]},"7":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":2},"end":{"line":123,"column":2}},{"start":{"line":123,"column":2},"end":{"line":123,"column":2}}]},"8":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":2},"end":{"line":127,"column":2}},{"start":{"line":127,"column":2},"end":{"line":127,"column":2}}]},"9":{"line":128,"type":"switch","locations":[{"start":{"line":130,"column":6},"end":{"line":130,"column":19}},{"start":{"line":131,"column":6},"end":{"line":131,"column":22}},{"start":{"line":132,"column":6},"end":{"line":133,"column":47}},{"start":{"line":135,"column":6},"end":{"line":136,"column":46}},{"start":{"line":139,"column":6},"end":{"line":139,"column":20}},{"start":{"line":140,"column":6},"end":{"line":140,"column":20}},{"start":{"line":141,"column":6},"end":{"line":141,"column":18}},{"start":{"line":142,"column":6},"end":{"line":142,"column":23}},{"start":{"line":143,"column":6},"end":{"line":143,"column":19}},{"start":{"line":144,"column":6},"end":{"line":144,"column":18}},{"start":{"line":145,"column":6},"end":{"line":145,"column":19}},{"start":{"line":146,"column":6},"end":{"line":146,"column":20}},{"start":{"line":147,"column":6},"end":{"line":148,"column":48}}]},"10":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":2},"end":{"line":164,"column":2}},{"start":{"line":164,"column":2},"end":{"line":164,"column":2}}]},"11":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":2},"end":{"line":177,"column":2}},{"start":{"line":177,"column":2},"end":{"line":177,"column":2}}]},"12":{"line":196,"type":"switch","locations":[{"start":{"line":197,"column":4},"end":{"line":198,"column":21}},{"start":{"line":199,"column":4},"end":{"line":200,"column":24}},{"start":{"line":202,"column":4},"end":{"line":203,"column":28}}]},"13":{"line":213,"type":"cond-expr","locations":[{"start":{"line":213,"column":49},"end":{"line":213,"column":137}},{"start":{"line":213,"column":140},"end":{"line":213,"column":142}}]},"14":{"line":225,"type":"cond-expr","locations":[{"start":{"line":225,"column":57},"end":{"line":225,"column":87}},{"start":{"line":225,"column":90},"end":{"line":225,"column":94}}]},"15":{"line":262,"type":"cond-expr","locations":[{"start":{"line":262,"column":48},"end":{"line":262,"column":68}},{"start":{"line":262,"column":71},"end":{"line":262,"column":88}}]},"16":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":2},"end":{"line":276,"column":2}},{"start":{"line":276,"column":2},"end":{"line":276,"column":2}}]},"17":{"line":290,"type":"cond-expr","locations":[{"start":{"line":290,"column":58},"end":{"line":290,"column":82}},{"start":{"line":290,"column":85},"end":{"line":290,"column":89}}]},"18":{"line":299,"type":"cond-expr","locations":[{"start":{"line":299,"column":49},"end":{"line":299,"column":127}},{"start":{"line":299,"column":130},"end":{"line":299,"column":132}}]},"19":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":2},"end":{"line":327,"column":2}},{"start":{"line":327,"column":2},"end":{"line":327,"column":2}}]},"20":{"line":327,"type":"binary-expr","locations":[{"start":{"line":327,"column":6},"end":{"line":327,"column":40}},{"start":{"line":327,"column":44},"end":{"line":327,"column":70}}]},"21":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":2},"end":{"line":336,"column":2}},{"start":{"line":336,"column":2},"end":{"line":336,"column":2}}]},"22":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":2},"end":{"line":372,"column":2}},{"start":{"line":372,"column":2},"end":{"line":372,"column":2}}]},"23":{"line":400,"type":"switch","locations":[{"start":{"line":401,"column":4},"end":{"line":402,"column":39}},{"start":{"line":403,"column":4},"end":{"line":404,"column":41}},{"start":{"line":405,"column":4},"end":{"line":411,"column":8}},{"start":{"line":412,"column":4},"end":{"line":418,"column":8}},{"start":{"line":419,"column":4},"end":{"line":425,"column":8}},{"start":{"line":426,"column":4},"end":{"line":446,"column":8}},{"start":{"line":447,"column":4},"end":{"line":451,"column":12}}]},"24":{"line":427,"type":"if","locations":[{"start":{"line":427,"column":6},"end":{"line":427,"column":6}},{"start":{"line":427,"column":6},"end":{"line":427,"column":6}}]},"25":{"line":427,"type":"binary-expr","locations":[{"start":{"line":427,"column":10},"end":{"line":427,"column":32}},{"start":{"line":427,"column":36},"end":{"line":427,"column":59}}]},"26":{"line":434,"type":"if","locations":[{"start":{"line":434,"column":13},"end":{"line":434,"column":13}},{"start":{"line":434,"column":13},"end":{"line":434,"column":13}}]},"27":{"line":448,"type":"if","locations":[{"start":{"line":448,"column":6},"end":{"line":448,"column":6}},{"start":{"line":448,"column":6},"end":{"line":448,"column":6}}]},"28":{"line":471,"type":"cond-expr","locations":[{"start":{"line":471,"column":23},"end":{"line":471,"column":38}},{"start":{"line":471,"column":41},"end":{"line":471,"column":56}}]},"29":{"line":549,"type":"if","locations":[{"start":{"line":549,"column":2},"end":{"line":549,"column":2}},{"start":{"line":549,"column":2},"end":{"line":549,"column":2}}]},"30":{"line":560,"type":"if","locations":[{"start":{"line":560,"column":2},"end":{"line":560,"column":2}},{"start":{"line":560,"column":2},"end":{"line":560,"column":2}}]},"31":{"line":600,"type":"if","locations":[{"start":{"line":600,"column":2},"end":{"line":600,"column":2}},{"start":{"line":600,"column":2},"end":{"line":600,"column":2}}]},"32":{"line":601,"type":"switch","locations":[{"start":{"line":602,"column":6},"end":{"line":603,"column":44}},{"start":{"line":604,"column":6},"end":{"line":605,"column":48}},{"start":{"line":606,"column":6},"end":{"line":607,"column":48}},{"start":{"line":608,"column":6},"end":{"line":609,"column":51}},{"start":{"line":610,"column":6},"end":{"line":611,"column":47}},{"start":{"line":612,"column":6},"end":{"line":613,"column":46}},{"start":{"line":614,"column":6},"end":{"line":615,"column":53}},{"start":{"line":616,"column":6},"end":{"line":617,"column":51}},{"start":{"line":618,"column":6},"end":{"line":619,"column":47}}]},"33":{"line":699,"type":"if","locations":[{"start":{"line":699,"column":2},"end":{"line":699,"column":2}},{"start":{"line":699,"column":2},"end":{"line":699,"column":2}}]},"34":{"line":732,"type":"if","locations":[{"start":{"line":732,"column":2},"end":{"line":732,"column":2}},{"start":{"line":732,"column":2},"end":{"line":732,"column":2}}]},"35":{"line":747,"type":"if","locations":[{"start":{"line":747,"column":2},"end":{"line":747,"column":2}},{"start":{"line":747,"column":2},"end":{"line":747,"column":2}}]},"36":{"line":919,"type":"if","locations":[{"start":{"line":919,"column":2},"end":{"line":919,"column":2}},{"start":{"line":919,"column":2},"end":{"line":919,"column":2}}]},"37":{"line":950,"type":"if","locations":[{"start":{"line":950,"column":2},"end":{"line":950,"column":2}},{"start":{"line":950,"column":2},"end":{"line":950,"column":2}}]},"38":{"line":962,"type":"if","locations":[{"start":{"line":962,"column":2},"end":{"line":962,"column":2}},{"start":{"line":962,"column":2},"end":{"line":962,"column":2}}]},"39":{"line":976,"type":"if","locations":[{"start":{"line":976,"column":2},"end":{"line":976,"column":2}},{"start":{"line":976,"column":2},"end":{"line":976,"column":2}}]},"40":{"line":976,"type":"binary-expr","locations":[{"start":{"line":976,"column":6},"end":{"line":976,"column":42}},{"start":{"line":976,"column":46},"end":{"line":976,"column":67}}]},"41":{"line":988,"type":"binary-expr","locations":[{"start":{"line":988,"column":14},"end":{"line":988,"column":21}},{"start":{"line":988,"column":25},"end":{"line":988,"column":36}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.parse = parse;","exports.parseValue = parseValue;","exports.parseType = parseType;","exports.parseConstValue = parseConstValue;","exports.parseTypeReference = parseTypeReference;","exports.parseNamedType = parseNamedType;","","var _source = require('./source');","","var _error = require('../error');","","var _lexer = require('./lexer');","","var _kinds = require('./kinds');","","/**"," * Given a GraphQL source, parses it into a Document."," * Throws GraphQLError if a syntax error is encountered."," */","","","/**"," * Configuration options to control parser behavior"," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function parse(source, options) {","  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;","  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});","  return parseDocument(lexer);","}","","/**"," * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for"," * that value."," * Throws GraphQLError if a syntax error is encountered."," *"," * This is useful within tools that operate upon GraphQL Values directly and"," * in isolation of complete GraphQL documents."," *"," * Consider providing the results to the utility function: valueFromAST()."," */","function parseValue(source, options) {","  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;","  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});","  expect(lexer, _lexer.TokenKind.SOF);","  var value = parseValueLiteral(lexer, false);","  expect(lexer, _lexer.TokenKind.EOF);","  return value;","}","","/**"," * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for"," * that type."," * Throws GraphQLError if a syntax error is encountered."," *"," * This is useful within tools that operate upon GraphQL Types directly and"," * in isolation of complete GraphQL documents."," *"," * Consider providing the results to the utility function: typeFromAST()."," */","function parseType(source, options) {","  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;","  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});","  expect(lexer, _lexer.TokenKind.SOF);","  var type = parseTypeReference(lexer);","  expect(lexer, _lexer.TokenKind.EOF);","  return type;","}","","/**"," * Converts a name lex token into a name parse node."," */","function parseName(lexer) {","  var token = expect(lexer, _lexer.TokenKind.NAME);","  return {","    kind: _kinds.NAME,","    value: token.value,","    loc: loc(lexer, token)","  };","}","","// Implements the parsing rules in the Document section.","","/**"," * Document : Definition+"," */","function parseDocument(lexer) {","  var start = lexer.token;","  expect(lexer, _lexer.TokenKind.SOF);","  var definitions = [];","  do {","    definitions.push(parseDefinition(lexer));","  } while (!skip(lexer, _lexer.TokenKind.EOF));","","  return {","    kind: _kinds.DOCUMENT,","    definitions: definitions,","    loc: loc(lexer, start)","  };","}","","/**"," * Definition :"," *   - OperationDefinition"," *   - FragmentDefinition"," *   - TypeSystemDefinition"," */","function parseDefinition(lexer) {","  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {","    return parseOperationDefinition(lexer);","  }","","  if (peek(lexer, _lexer.TokenKind.NAME)) {","    switch (lexer.token.value) {","      // Note: subscription is an experimental non-spec addition.","      case 'query':","      case 'mutation':","      case 'subscription':","        return parseOperationDefinition(lexer);","","      case 'fragment':","        return parseFragmentDefinition(lexer);","","      // Note: the Type System IDL is an experimental non-spec addition.","      case 'schema':","      case 'scalar':","      case 'type':","      case 'interface':","      case 'union':","      case 'enum':","      case 'input':","      case 'extend':","      case 'directive':","        return parseTypeSystemDefinition(lexer);","    }","  }","","  throw unexpected(lexer);","}","","// Implements the parsing rules in the Operations section.","","/**"," * OperationDefinition :"," *  - SelectionSet"," *  - OperationType Name? VariableDefinitions? Directives? SelectionSet"," */","function parseOperationDefinition(lexer) {","  var start = lexer.token;","  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {","    return {","      kind: _kinds.OPERATION_DEFINITION,","      operation: 'query',","      name: null,","      variableDefinitions: null,","      directives: [],","      selectionSet: parseSelectionSet(lexer),","      loc: loc(lexer, start)","    };","  }","  var operation = parseOperationType(lexer);","  var name = void 0;","  if (peek(lexer, _lexer.TokenKind.NAME)) {","    name = parseName(lexer);","  }","  return {","    kind: _kinds.OPERATION_DEFINITION,","    operation: operation,","    name: name,","    variableDefinitions: parseVariableDefinitions(lexer),","    directives: parseDirectives(lexer),","    selectionSet: parseSelectionSet(lexer),","    loc: loc(lexer, start)","  };","}","","/**"," * OperationType : one of query mutation subscription"," */","function parseOperationType(lexer) {","  var operationToken = expect(lexer, _lexer.TokenKind.NAME);","  switch (operationToken.value) {","    case 'query':","      return 'query';","    case 'mutation':","      return 'mutation';","    // Note: subscription is an experimental non-spec addition.","    case 'subscription':","      return 'subscription';","  }","","  throw unexpected(lexer, operationToken);","}","","/**"," * VariableDefinitions : ( VariableDefinition+ )"," */","function parseVariableDefinitions(lexer) {","  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];","}","","/**"," * VariableDefinition : Variable : Type DefaultValue?"," */","function parseVariableDefinition(lexer) {","  var start = lexer.token;","  return {","    kind: _kinds.VARIABLE_DEFINITION,","    variable: parseVariable(lexer),","    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),","    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : null,","    loc: loc(lexer, start)","  };","}","","/**"," * Variable : $ Name"," */","function parseVariable(lexer) {","  var start = lexer.token;","  expect(lexer, _lexer.TokenKind.DOLLAR);","  return {","    kind: _kinds.VARIABLE,","    name: parseName(lexer),","    loc: loc(lexer, start)","  };","}","","/**"," * SelectionSet : { Selection+ }"," */","function parseSelectionSet(lexer) {","  var start = lexer.token;","  return {","    kind: _kinds.SELECTION_SET,","    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),","    loc: loc(lexer, start)","  };","}","","/**"," * Selection :"," *   - Field"," *   - FragmentSpread"," *   - InlineFragment"," */","function parseSelection(lexer) {","  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);","}","","/**"," * Field : Alias? Name Arguments? Directives? SelectionSet?"," *"," * Alias : Name :"," */","function parseField(lexer) {","  var start = lexer.token;","","  var nameOrAlias = parseName(lexer);","  var alias = void 0;","  var name = void 0;","  if (skip(lexer, _lexer.TokenKind.COLON)) {","    alias = nameOrAlias;","    name = parseName(lexer);","  } else {","    alias = null;","    name = nameOrAlias;","  }","","  return {","    kind: _kinds.FIELD,","    alias: alias,","    name: name,","    arguments: parseArguments(lexer),","    directives: parseDirectives(lexer),","    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : null,","    loc: loc(lexer, start)","  };","}","","/**"," * Arguments : ( Argument+ )"," */","function parseArguments(lexer) {","  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseArgument, _lexer.TokenKind.PAREN_R) : [];","}","","/**"," * Argument : Name : Value"," */","function parseArgument(lexer) {","  var start = lexer.token;","  return {","    kind: _kinds.ARGUMENT,","    name: parseName(lexer),","    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),","    loc: loc(lexer, start)","  };","}","","// Implements the parsing rules in the Fragments section.","","/**"," * Corresponds to both FragmentSpread and InlineFragment in the spec."," *"," * FragmentSpread : ... FragmentName Directives?"," *"," * InlineFragment : ... TypeCondition? Directives? SelectionSet"," */","function parseFragment(lexer) {","  var start = lexer.token;","  expect(lexer, _lexer.TokenKind.SPREAD);","  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {","    return {","      kind: _kinds.FRAGMENT_SPREAD,","      name: parseFragmentName(lexer),","      directives: parseDirectives(lexer),","      loc: loc(lexer, start)","    };","  }","  var typeCondition = null;","  if (lexer.token.value === 'on') {","    lexer.advance();","    typeCondition = parseNamedType(lexer);","  }","  return {","    kind: _kinds.INLINE_FRAGMENT,","    typeCondition: typeCondition,","    directives: parseDirectives(lexer),","    selectionSet: parseSelectionSet(lexer),","    loc: loc(lexer, start)","  };","}","","/**"," * FragmentDefinition :"," *   - fragment FragmentName on TypeCondition Directives? SelectionSet"," *"," * TypeCondition : NamedType"," */","function parseFragmentDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'fragment');","  return {","    kind: _kinds.FRAGMENT_DEFINITION,","    name: parseFragmentName(lexer),","    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),","    directives: parseDirectives(lexer),","    selectionSet: parseSelectionSet(lexer),","    loc: loc(lexer, start)","  };","}","","/**"," * FragmentName : Name but not `on`"," */","function parseFragmentName(lexer) {","  if (lexer.token.value === 'on') {","    throw unexpected(lexer);","  }","  return parseName(lexer);","}","","// Implements the parsing rules in the Values section.","","/**"," * Value[Const] :"," *   - [~Const] Variable"," *   - IntValue"," *   - FloatValue"," *   - StringValue"," *   - BooleanValue"," *   - NullValue"," *   - EnumValue"," *   - ListValue[?Const]"," *   - ObjectValue[?Const]"," *"," * BooleanValue : one of `true` `false`"," *"," * NullValue : `null`"," *"," * EnumValue : Name but not `true`, `false` or `null`"," */","function parseValueLiteral(lexer, isConst) {","  var token = lexer.token;","  switch (token.kind) {","    case _lexer.TokenKind.BRACKET_L:","      return parseList(lexer, isConst);","    case _lexer.TokenKind.BRACE_L:","      return parseObject(lexer, isConst);","    case _lexer.TokenKind.INT:","      lexer.advance();","      return {","        kind: _kinds.INT,","        value: token.value,","        loc: loc(lexer, token)","      };","    case _lexer.TokenKind.FLOAT:","      lexer.advance();","      return {","        kind: _kinds.FLOAT,","        value: token.value,","        loc: loc(lexer, token)","      };","    case _lexer.TokenKind.STRING:","      lexer.advance();","      return {","        kind: _kinds.STRING,","        value: token.value,","        loc: loc(lexer, token)","      };","    case _lexer.TokenKind.NAME:","      if (token.value === 'true' || token.value === 'false') {","        lexer.advance();","        return {","          kind: _kinds.BOOLEAN,","          value: token.value === 'true',","          loc: loc(lexer, token)","        };","      } else if (token.value === 'null') {","        lexer.advance();","        return {","          kind: _kinds.NULL,","          loc: loc(lexer, token)","        };","      }","      lexer.advance();","      return {","        kind: _kinds.ENUM,","        value: token.value,","        loc: loc(lexer, token)","      };","    case _lexer.TokenKind.DOLLAR:","      if (!isConst) {","        return parseVariable(lexer);","      }","      break;","  }","  throw unexpected(lexer);","}","","function parseConstValue(lexer) {","  return parseValueLiteral(lexer, true);","}","","function parseValueValue(lexer) {","  return parseValueLiteral(lexer, false);","}","","/**"," * ListValue[Const] :"," *   - [ ]"," *   - [ Value[?Const]+ ]"," */","function parseList(lexer, isConst) {","  var start = lexer.token;","  var item = isConst ? parseConstValue : parseValueValue;","  return {","    kind: _kinds.LIST,","    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),","    loc: loc(lexer, start)","  };","}","","/**"," * ObjectValue[Const] :"," *   - { }"," *   - { ObjectField[?Const]+ }"," */","function parseObject(lexer, isConst) {","  var start = lexer.token;","  expect(lexer, _lexer.TokenKind.BRACE_L);","  var fields = [];","  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {","    fields.push(parseObjectField(lexer, isConst));","  }","  return {","    kind: _kinds.OBJECT,","    fields: fields,","    loc: loc(lexer, start)","  };","}","","/**"," * ObjectField[Const] : Name : Value[?Const]"," */","function parseObjectField(lexer, isConst) {","  var start = lexer.token;","  return {","    kind: _kinds.OBJECT_FIELD,","    name: parseName(lexer),","    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),","    loc: loc(lexer, start)","  };","}","","// Implements the parsing rules in the Directives section.","","/**"," * Directives : Directive+"," */","function parseDirectives(lexer) {","  var directives = [];","  while (peek(lexer, _lexer.TokenKind.AT)) {","    directives.push(parseDirective(lexer));","  }","  return directives;","}","","/**"," * Directive : @ Name Arguments?"," */","function parseDirective(lexer) {","  var start = lexer.token;","  expect(lexer, _lexer.TokenKind.AT);","  return {","    kind: _kinds.DIRECTIVE,","    name: parseName(lexer),","    arguments: parseArguments(lexer),","    loc: loc(lexer, start)","  };","}","","// Implements the parsing rules in the Types section.","","/**"," * Type :"," *   - NamedType"," *   - ListType"," *   - NonNullType"," */","function parseTypeReference(lexer) {","  var start = lexer.token;","  var type = void 0;","  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {","    type = parseTypeReference(lexer);","    expect(lexer, _lexer.TokenKind.BRACKET_R);","    type = {","      kind: _kinds.LIST_TYPE,","      type: type,","      loc: loc(lexer, start)","    };","  } else {","    type = parseNamedType(lexer);","  }","  if (skip(lexer, _lexer.TokenKind.BANG)) {","    return {","      kind: _kinds.NON_NULL_TYPE,","      type: type,","      loc: loc(lexer, start)","    };","  }","  return type;","}","","/**"," * NamedType : Name"," */","function parseNamedType(lexer) {","  var start = lexer.token;","  return {","    kind: _kinds.NAMED_TYPE,","    name: parseName(lexer),","    loc: loc(lexer, start)","  };","}","","// Implements the parsing rules in the Type Definition section.","","/**"," * TypeSystemDefinition :"," *   - SchemaDefinition"," *   - TypeDefinition"," *   - TypeExtensionDefinition"," *   - DirectiveDefinition"," *"," * TypeDefinition :"," *   - ScalarTypeDefinition"," *   - ObjectTypeDefinition"," *   - InterfaceTypeDefinition"," *   - UnionTypeDefinition"," *   - EnumTypeDefinition"," *   - InputObjectTypeDefinition"," */","function parseTypeSystemDefinition(lexer) {","  if (peek(lexer, _lexer.TokenKind.NAME)) {","    switch (lexer.token.value) {","      case 'schema':","        return parseSchemaDefinition(lexer);","      case 'scalar':","        return parseScalarTypeDefinition(lexer);","      case 'type':","        return parseObjectTypeDefinition(lexer);","      case 'interface':","        return parseInterfaceTypeDefinition(lexer);","      case 'union':","        return parseUnionTypeDefinition(lexer);","      case 'enum':","        return parseEnumTypeDefinition(lexer);","      case 'input':","        return parseInputObjectTypeDefinition(lexer);","      case 'extend':","        return parseTypeExtensionDefinition(lexer);","      case 'directive':","        return parseDirectiveDefinition(lexer);","    }","  }","","  throw unexpected(lexer);","}","","/**"," * SchemaDefinition : schema Directives? { OperationTypeDefinition+ }"," *"," * OperationTypeDefinition : OperationType : NamedType"," */","function parseSchemaDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'schema');","  var directives = parseDirectives(lexer);","  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);","  return {","    kind: _kinds.SCHEMA_DEFINITION,","    directives: directives,","    operationTypes: operationTypes,","    loc: loc(lexer, start)","  };","}","","function parseOperationTypeDefinition(lexer) {","  var start = lexer.token;","  var operation = parseOperationType(lexer);","  expect(lexer, _lexer.TokenKind.COLON);","  var type = parseNamedType(lexer);","  return {","    kind: _kinds.OPERATION_TYPE_DEFINITION,","    operation: operation,","    type: type,","    loc: loc(lexer, start)","  };","}","","/**"," * ScalarTypeDefinition : scalar Name Directives?"," */","function parseScalarTypeDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'scalar');","  var name = parseName(lexer);","  var directives = parseDirectives(lexer);","  return {","    kind: _kinds.SCALAR_TYPE_DEFINITION,","    name: name,","    directives: directives,","    loc: loc(lexer, start)","  };","}","","/**"," * ObjectTypeDefinition :"," *   - type Name ImplementsInterfaces? Directives? { FieldDefinition+ }"," */","function parseObjectTypeDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'type');","  var name = parseName(lexer);","  var interfaces = parseImplementsInterfaces(lexer);","  var directives = parseDirectives(lexer);","  var fields = any(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R);","  return {","    kind: _kinds.OBJECT_TYPE_DEFINITION,","    name: name,","    interfaces: interfaces,","    directives: directives,","    fields: fields,","    loc: loc(lexer, start)","  };","}","","/**"," * ImplementsInterfaces : implements NamedType+"," */","function parseImplementsInterfaces(lexer) {","  var types = [];","  if (lexer.token.value === 'implements') {","    lexer.advance();","    do {","      types.push(parseNamedType(lexer));","    } while (peek(lexer, _lexer.TokenKind.NAME));","  }","  return types;","}","","/**"," * FieldDefinition : Name ArgumentsDefinition? : Type Directives?"," */","function parseFieldDefinition(lexer) {","  var start = lexer.token;","  var name = parseName(lexer);","  var args = parseArgumentDefs(lexer);","  expect(lexer, _lexer.TokenKind.COLON);","  var type = parseTypeReference(lexer);","  var directives = parseDirectives(lexer);","  return {","    kind: _kinds.FIELD_DEFINITION,","    name: name,","    arguments: args,","    type: type,","    directives: directives,","    loc: loc(lexer, start)","  };","}","","/**"," * ArgumentsDefinition : ( InputValueDefinition+ )"," */","function parseArgumentDefs(lexer) {","  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {","    return [];","  }","  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);","}","","/**"," * InputValueDefinition : Name : Type DefaultValue? Directives?"," */","function parseInputValueDef(lexer) {","  var start = lexer.token;","  var name = parseName(lexer);","  expect(lexer, _lexer.TokenKind.COLON);","  var type = parseTypeReference(lexer);","  var defaultValue = null;","  if (skip(lexer, _lexer.TokenKind.EQUALS)) {","    defaultValue = parseConstValue(lexer);","  }","  var directives = parseDirectives(lexer);","  return {","    kind: _kinds.INPUT_VALUE_DEFINITION,","    name: name,","    type: type,","    defaultValue: defaultValue,","    directives: directives,","    loc: loc(lexer, start)","  };","}","","/**"," * InterfaceTypeDefinition : interface Name Directives? { FieldDefinition+ }"," */","function parseInterfaceTypeDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'interface');","  var name = parseName(lexer);","  var directives = parseDirectives(lexer);","  var fields = any(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R);","  return {","    kind: _kinds.INTERFACE_TYPE_DEFINITION,","    name: name,","    directives: directives,","    fields: fields,","    loc: loc(lexer, start)","  };","}","","/**"," * UnionTypeDefinition : union Name Directives? = UnionMembers"," */","function parseUnionTypeDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'union');","  var name = parseName(lexer);","  var directives = parseDirectives(lexer);","  expect(lexer, _lexer.TokenKind.EQUALS);","  var types = parseUnionMembers(lexer);","  return {","    kind: _kinds.UNION_TYPE_DEFINITION,","    name: name,","    directives: directives,","    types: types,","    loc: loc(lexer, start)","  };","}","","/**"," * UnionMembers :"," *   - NamedType"," *   - UnionMembers | NamedType"," */","function parseUnionMembers(lexer) {","  var members = [];","  do {","    members.push(parseNamedType(lexer));","  } while (skip(lexer, _lexer.TokenKind.PIPE));","  return members;","}","","/**"," * EnumTypeDefinition : enum Name Directives? { EnumValueDefinition+ }"," */","function parseEnumTypeDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'enum');","  var name = parseName(lexer);","  var directives = parseDirectives(lexer);","  var values = many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R);","  return {","    kind: _kinds.ENUM_TYPE_DEFINITION,","    name: name,","    directives: directives,","    values: values,","    loc: loc(lexer, start)","  };","}","","/**"," * EnumValueDefinition : EnumValue Directives?"," *"," * EnumValue : Name"," */","function parseEnumValueDefinition(lexer) {","  var start = lexer.token;","  var name = parseName(lexer);","  var directives = parseDirectives(lexer);","  return {","    kind: _kinds.ENUM_VALUE_DEFINITION,","    name: name,","    directives: directives,","    loc: loc(lexer, start)","  };","}","","/**"," * InputObjectTypeDefinition : input Name Directives? { InputValueDefinition+ }"," */","function parseInputObjectTypeDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'input');","  var name = parseName(lexer);","  var directives = parseDirectives(lexer);","  var fields = any(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R);","  return {","    kind: _kinds.INPUT_OBJECT_TYPE_DEFINITION,","    name: name,","    directives: directives,","    fields: fields,","    loc: loc(lexer, start)","  };","}","","/**"," * TypeExtensionDefinition : extend ObjectTypeDefinition"," */","function parseTypeExtensionDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'extend');","  var definition = parseObjectTypeDefinition(lexer);","  return {","    kind: _kinds.TYPE_EXTENSION_DEFINITION,","    definition: definition,","    loc: loc(lexer, start)","  };","}","","/**"," * DirectiveDefinition :"," *   - directive @ Name ArgumentsDefinition? on DirectiveLocations"," */","function parseDirectiveDefinition(lexer) {","  var start = lexer.token;","  expectKeyword(lexer, 'directive');","  expect(lexer, _lexer.TokenKind.AT);","  var name = parseName(lexer);","  var args = parseArgumentDefs(lexer);","  expectKeyword(lexer, 'on');","  var locations = parseDirectiveLocations(lexer);","  return {","    kind: _kinds.DIRECTIVE_DEFINITION,","    name: name,","    arguments: args,","    locations: locations,","    loc: loc(lexer, start)","  };","}","","/**"," * DirectiveLocations :"," *   - Name"," *   - DirectiveLocations | Name"," */","function parseDirectiveLocations(lexer) {","  var locations = [];","  do {","    locations.push(parseName(lexer));","  } while (skip(lexer, _lexer.TokenKind.PIPE));","  return locations;","}","","// Core parsing utility functions","","/**"," * Returns a location object, used to identify the place in"," * the source that created a given parsed object."," */","function loc(lexer, startToken) {","  if (!lexer.options.noLocation) {","    return new Loc(startToken, lexer.lastToken, lexer.source);","  }","}","","function Loc(startToken, endToken, source) {","  this.start = startToken.start;","  this.end = endToken.end;","  this.startToken = startToken;","  this.endToken = endToken;","  this.source = source;","}","","// Print a simplified form when appearing in JSON/util.inspect.","Loc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {","  return { start: this.start, end: this.end };","};","","/**"," * Determines if the next token is of a given kind"," */","function peek(lexer, kind) {","  return lexer.token.kind === kind;","}","","/**"," * If the next token is of the given kind, return true after advancing"," * the lexer. Otherwise, do not change the parser state and return false."," */","function skip(lexer, kind) {","  var match = lexer.token.kind === kind;","  if (match) {","    lexer.advance();","  }","  return match;","}","","/**"," * If the next token is of the given kind, return that token after advancing"," * the lexer. Otherwise, do not change the parser state and throw an error."," */","function expect(lexer, kind) {","  var token = lexer.token;","  if (token.kind === kind) {","    lexer.advance();","    return token;","  }","  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));","}","","/**"," * If the next token is a keyword with the given value, return that token after"," * advancing the lexer. Otherwise, do not change the parser state and return"," * false."," */","function expectKeyword(lexer, value) {","  var token = lexer.token;","  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {","    lexer.advance();","    return token;","  }","  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));","}","","/**"," * Helper function for creating an error when an unexpected lexed token"," * is encountered."," */","function unexpected(lexer, atToken) {","  var token = atToken || lexer.token;","  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));","}","","/**"," * Returns a possibly empty list of parse nodes, determined by"," * the parseFn. This list begins with a lex token of openKind"," * and ends with a lex token of closeKind. Advances the parser"," * to the next lex token after the closing token."," */","function any(lexer, openKind, parseFn, closeKind) {","  expect(lexer, openKind);","  var nodes = [];","  while (!skip(lexer, closeKind)) {","    nodes.push(parseFn(lexer));","  }","  return nodes;","}","","/**"," * Returns a non-empty list of parse nodes, determined by"," * the parseFn. This list begins with a lex token of openKind"," * and ends with a lex token of closeKind. Advances the parser"," * to the next lex token after the closing token."," */","function many(lexer, openKind, parseFn, closeKind) {","  expect(lexer, openKind);","  var nodes = [parseFn(lexer)];","  while (!skip(lexer, closeKind)) {","    nodes.push(parseFn(lexer));","  }","  return nodes;","}"],"l":{"3":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"13":1,"15":1,"17":1,"19":1,"40":1,"41":0,"42":0,"43":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"87":1,"88":0,"89":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"109":0,"122":1,"123":0,"124":0,"127":0,"128":0,"133":0,"136":0,"148":0,"152":0,"162":1,"163":0,"164":0,"165":0,"175":0,"176":0,"177":0,"178":0,"180":0,"194":1,"195":0,"196":0,"198":0,"200":0,"203":0,"206":0,"212":1,"213":0,"219":1,"220":0,"221":0,"233":1,"234":0,"235":0,"236":0,"246":1,"247":0,"248":0,"261":1,"262":0,"270":1,"271":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"280":0,"281":0,"284":0,"298":1,"299":0,"305":1,"306":0,"307":0,"324":1,"325":0,"326":0,"327":0,"328":0,"335":0,"336":0,"337":0,"338":0,"340":0,"355":1,"356":0,"357":0,"358":0,"371":1,"372":0,"373":0,"375":0,"398":1,"399":0,"400":0,"402":0,"404":0,"406":0,"407":0,"413":0,"414":0,"420":0,"421":0,"427":0,"428":0,"429":0,"434":0,"435":0,"436":0,"441":0,"442":0,"448":0,"449":0,"451":0,"453":0,"456":1,"457":0,"460":1,"461":0,"469":1,"470":0,"471":0,"472":0,"484":1,"485":0,"486":0,"487":0,"488":0,"489":0,"491":0,"501":1,"502":0,"503":0,"516":1,"517":0,"518":0,"519":0,"521":0,"527":1,"528":0,"529":0,"530":0,"546":1,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"558":0,"560":0,"561":0,"567":0,"573":1,"574":0,"575":0,"599":1,"600":0,"601":0,"603":0,"605":0,"607":0,"609":0,"611":0,"613":0,"615":0,"617":0,"619":0,"623":0,"631":1,"632":0,"633":0,"634":0,"635":0,"636":0,"644":1,"645":0,"646":0,"647":0,"648":0,"649":0,"660":1,"661":0,"662":0,"663":0,"664":0,"665":0,"677":1,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"697":1,"698":0,"699":0,"700":0,"701":0,"702":0,"705":0,"711":1,"712":0,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"731":1,"732":0,"733":0,"735":0,"741":1,"742":0,"743":0,"744":0,"745":0,"746":0,"747":0,"748":0,"750":0,"751":0,"764":1,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"782":1,"783":0,"784":0,"785":0,"786":0,"787":0,"788":0,"789":0,"803":1,"804":0,"805":0,"806":0,"808":0,"814":1,"815":0,"816":0,"817":0,"818":0,"819":0,"820":0,"834":1,"835":0,"836":0,"837":0,"838":0,"849":1,"850":0,"851":0,"852":0,"853":0,"854":0,"855":0,"867":1,"868":0,"869":0,"870":0,"871":0,"882":1,"883":0,"884":0,"885":0,"886":0,"887":0,"888":0,"889":0,"890":0,"904":1,"905":0,"906":0,"907":0,"909":0,"918":1,"919":0,"920":0,"924":1,"925":0,"926":0,"927":0,"928":0,"929":0,"933":1,"934":0,"940":1,"941":0,"948":1,"949":0,"950":0,"951":0,"953":0,"960":1,"961":0,"962":0,"963":0,"964":0,"966":0,"974":1,"975":0,"976":0,"977":0,"978":0,"980":0,"987":1,"988":0,"989":0,"998":1,"999":0,"1000":0,"1001":0,"1002":0,"1004":0,"1013":1,"1014":0,"1015":0,"1016":0,"1017":0,"1019":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/index.js","s":{"1":1,"2":1,"3":1,"4":2,"5":1,"6":1,"7":0,"8":1,"9":1,"10":0,"11":1,"12":1,"13":2},"b":{},"f":{"1":2,"2":0,"3":0,"4":2},"fnMap":{"1":{"name":"get","line":11,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":22}}},"2":{"name":"get","line":20,"loc":{"start":{"line":20,"column":7},"end":{"line":20,"column":22}}},"3":{"name":"get","line":29,"loc":{"start":{"line":29,"column":7},"end":{"line":29,"column":22}}},"4":{"name":"get","line":38,"loc":{"start":{"line":38,"column":7},"end":{"line":38,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"3":{"start":{"line":9,"column":0},"end":{"line":14,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":38}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":44}},"6":{"start":{"line":18,"column":0},"end":{"line":23,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":36}},"8":{"start":{"line":25,"column":0},"end":{"line":25,"column":46}},"9":{"start":{"line":27,"column":0},"end":{"line":32,"column":3}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":38}},"11":{"start":{"line":34,"column":0},"end":{"line":34,"column":44}},"12":{"start":{"line":36,"column":0},"end":{"line":41,"column":3}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":36}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","var _GraphQLError = require('./GraphQLError');","","Object.defineProperty(exports, 'GraphQLError', {","  enumerable: true,","  get: function get() {","    return _GraphQLError.GraphQLError;","  }","});","","var _syntaxError = require('./syntaxError');","","Object.defineProperty(exports, 'syntaxError', {","  enumerable: true,","  get: function get() {","    return _syntaxError.syntaxError;","  }","});","","var _locatedError = require('./locatedError');","","Object.defineProperty(exports, 'locatedError', {","  enumerable: true,","  get: function get() {","    return _locatedError.locatedError;","  }","});","","var _formatError = require('./formatError');","","Object.defineProperty(exports, 'formatError', {","  enumerable: true,","  get: function get() {","    return _formatError.formatError;","  }","});"],"l":{"3":1,"7":1,"9":1,"12":2,"16":1,"18":1,"21":0,"25":1,"27":1,"30":0,"34":1,"36":1,"39":2}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/GraphQLError.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/GraphQLError.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"GraphQLError","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":17,"column":56}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":30},"end":{"line":44,"column":46}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":11},"end":{"line":46,"column":27}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":32},"end":{"line":57,"column":47}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"4":{"start":{"line":16,"column":0},"end":{"line":102,"column":1}},"5":{"start":{"line":19,"column":2},"end":{"line":33,"column":3}},"6":{"start":{"line":20,"column":4},"end":{"line":24,"column":7}},"7":{"start":{"line":25,"column":9},"end":{"line":33,"column":3}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":48}},"9":{"start":{"line":28,"column":4},"end":{"line":32,"column":7}},"10":{"start":{"line":36,"column":2},"end":{"line":36,"column":23}},"11":{"start":{"line":37,"column":2},"end":{"line":40,"column":3}},"12":{"start":{"line":38,"column":4},"end":{"line":38,"column":24}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":50}},"14":{"start":{"line":42,"column":2},"end":{"line":42,"column":29}},"15":{"start":{"line":43,"column":2},"end":{"line":49,"column":3}},"16":{"start":{"line":44,"column":4},"end":{"line":48,"column":7}},"17":{"start":{"line":45,"column":6},"end":{"line":45,"column":31}},"18":{"start":{"line":47,"column":6},"end":{"line":47,"column":28}},"19":{"start":{"line":50,"column":2},"end":{"line":52,"column":3}},"20":{"start":{"line":51,"column":4},"end":{"line":51,"column":27}},"21":{"start":{"line":54,"column":2},"end":{"line":54,"column":26}},"22":{"start":{"line":55,"column":2},"end":{"line":55,"column":25}},"23":{"start":{"line":56,"column":2},"end":{"line":60,"column":3}},"24":{"start":{"line":57,"column":4},"end":{"line":59,"column":7}},"25":{"start":{"line":58,"column":6},"end":{"line":58,"column":55}},"26":{"start":{"line":62,"column":2},"end":{"line":101,"column":5}},"27":{"start":{"line":112,"column":0},"end":{"line":115,"column":3}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":19}},{"start":{"line":19,"column":23},"end":{"line":19,"column":42}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":9},"end":{"line":25,"column":9}},{"start":{"line":25,"column":9},"end":{"line":25,"column":9}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"5":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":14}},{"start":{"line":37,"column":18},"end":{"line":37,"column":23}},{"start":{"line":37,"column":27},"end":{"line":37,"column":43}}]},"6":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":14},"end":{"line":39,"column":18}},{"start":{"line":39,"column":22},"end":{"line":39,"column":30}},{"start":{"line":39,"column":34},"end":{"line":39,"column":49}}]},"7":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]},"8":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":17}},{"start":{"line":43,"column":21},"end":{"line":43,"column":26}}]},"9":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"10":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":16}},{"start":{"line":50,"column":20},"end":{"line":50,"column":43}}]},"11":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"12":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":14}},{"start":{"line":56,"column":18},"end":{"line":56,"column":28}}]},"13":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":13},"end":{"line":74,"column":23}},{"start":{"line":74,"column":27},"end":{"line":74,"column":36}}]},"14":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":13},"end":{"line":83,"column":17}},{"start":{"line":83,"column":21},"end":{"line":83,"column":30}}]},"15":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":13},"end":{"line":90,"column":18}},{"start":{"line":90,"column":22},"end":{"line":90,"column":31}}]},"16":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":13},"end":{"line":93,"column":20}},{"start":{"line":93,"column":24},"end":{"line":93,"column":33}}]},"17":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":13},"end":{"line":96,"column":23}},{"start":{"line":96,"column":27},"end":{"line":96,"column":36}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.GraphQLError = GraphQLError;","","var _location = require('../language/location');","","/**"," * A GraphQLError describes an Error found during the parse, validate, or"," * execute phases of performing a GraphQL operation. In addition to a message"," * and stack trace, it also includes information about the locations in a"," * GraphQL document and/or execution result that correspond to the Error."," */","function GraphQLError( // eslint-disable-line no-redeclare","message, nodes, source, positions, path, originalError) {","  // Include (non-enumerable) stack trace.","  if (originalError && originalError.stack) {","    Object.defineProperty(this, 'stack', {","      value: originalError.stack,","      writable: true,","      configurable: true","    });","  } else if (Error.captureStackTrace) {","    Error.captureStackTrace(this, GraphQLError);","  } else {","    Object.defineProperty(this, 'stack', {","      value: Error().stack,","      writable: true,","      configurable: true","    });","  }","","  // Compute locations in the source for the given nodes/positions.","  var _source = source;","  if (!_source && nodes && nodes.length > 0) {","    var node = nodes[0];","    _source = node && node.loc && node.loc.source;","  }","","  var _positions = positions;","  if (!_positions && nodes) {","    _positions = nodes.filter(function (node) {","      return Boolean(node.loc);","    }).map(function (node) {","      return node.loc.start;","    });","  }","  if (_positions && _positions.length === 0) {","    _positions = undefined;","  }","","  var _locations = void 0;","  var _source2 = _source; // seems here Flow need a const to resolve type.","  if (_source2 && _positions) {","    _locations = _positions.map(function (pos) {","      return (0, _location.getLocation)(_source2, pos);","    });","  }","","  Object.defineProperties(this, {","    message: {","      value: message,","      // By being enumerable, JSON.stringify will include `message` in the","      // resulting output. This ensures that the simplist possible GraphQL","      // service adheres to the spec.","      enumerable: true,","      writable: true","    },","    locations: {","      // Coercing falsey values to undefined ensures they will not be included","      // in JSON.stringify() when not provided.","      value: _locations || undefined,","      // By being enumerable, JSON.stringify will include `locations` in the","      // resulting output. This ensures that the simplist possible GraphQL","      // service adheres to the spec.","      enumerable: true","    },","    path: {","      // Coercing falsey values to undefined ensures they will not be included","      // in JSON.stringify() when not provided.","      value: path || undefined,","      // By being enumerable, JSON.stringify will include `path` in the","      // resulting output. This ensures that the simplist possible GraphQL","      // service adheres to the spec.","      enumerable: true","    },","    nodes: {","      value: nodes || undefined","    },","    source: {","      value: _source || undefined","    },","    positions: {","      value: _positions || undefined","    },","    originalError: {","      value: originalError","    }","  });","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","GraphQLError.prototype = Object.create(Error.prototype, {","  constructor: { value: GraphQLError },","  name: { value: 'GraphQLError' }","});"],"l":{"3":1,"6":1,"8":1,"16":1,"19":0,"20":0,"25":0,"26":0,"28":0,"36":0,"37":0,"38":0,"39":0,"42":0,"43":0,"44":0,"45":0,"47":0,"50":0,"51":0,"54":0,"55":0,"56":0,"57":0,"58":0,"62":0,"112":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/location.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/location.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"getLocation","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":23,"column":0},"end":{"line":33,"column":1}},"4":{"start":{"line":24,"column":2},"end":{"line":24,"column":34}},"5":{"start":{"line":25,"column":2},"end":{"line":25,"column":15}},"6":{"start":{"line":26,"column":2},"end":{"line":26,"column":28}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":21}},"8":{"start":{"line":28,"column":2},"end":{"line":31,"column":3}},"9":{"start":{"line":29,"column":4},"end":{"line":29,"column":14}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":60}},"11":{"start":{"line":32,"column":2},"end":{"line":32,"column":40}}},"branchMap":{"1":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":10},"end":{"line":28,"column":46}},{"start":{"line":28,"column":51},"end":{"line":28,"column":73}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.getLocation = getLocation;","","","/**"," * Takes a Source and a UTF-8 character offset, and returns the corresponding"," * line and column as a SourceLocation."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function getLocation(source, position) {","  var lineRegexp = /\\r\\n|[\\n\\r]/g;","  var line = 1;","  var column = position + 1;","  var match = void 0;","  while ((match = lineRegexp.exec(source.body)) && match.index < position) {","    line += 1;","    column = position + 1 - (match.index + match[0].length);","  }","  return { line: line, column: column };","}","","/**"," * Represents a location in a Source."," */"],"l":{"3":1,"6":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/syntaxError.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/syntaxError.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"syntaxError","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":52}}},"2":{"name":"highlightSourceAtLocation","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":53}}},"3":{"name":"lpad","line":46,"loc":{"start":{"line":46,"column":0},"end":{"line":46,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":46}},"5":{"start":{"line":26,"column":0},"end":{"line":30,"column":1}},"6":{"start":{"line":27,"column":2},"end":{"line":27,"column":62}},"7":{"start":{"line":28,"column":2},"end":{"line":28,"column":230}},"8":{"start":{"line":29,"column":2},"end":{"line":29,"column":15}},"9":{"start":{"line":36,"column":0},"end":{"line":44,"column":1}},"10":{"start":{"line":37,"column":2},"end":{"line":37,"column":27}},"11":{"start":{"line":38,"column":2},"end":{"line":38,"column":42}},"12":{"start":{"line":39,"column":2},"end":{"line":39,"column":32}},"13":{"start":{"line":40,"column":2},"end":{"line":40,"column":42}},"14":{"start":{"line":41,"column":2},"end":{"line":41,"column":34}},"15":{"start":{"line":42,"column":2},"end":{"line":42,"column":48}},"16":{"start":{"line":43,"column":2},"end":{"line":43,"column":283}},"17":{"start":{"line":46,"column":0},"end":{"line":48,"column":1}},"18":{"start":{"line":47,"column":2},"end":{"line":47,"column":53}}},"branchMap":{"1":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":22},"end":{"line":43,"column":79}},{"start":{"line":43,"column":82},"end":{"line":43,"column":84}}]},"2":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":223},"end":{"line":43,"column":276}},{"start":{"line":43,"column":279},"end":{"line":43,"column":281}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.syntaxError = syntaxError;","","var _location = require('../language/location');","","var _GraphQLError = require('./GraphQLError');","","/**"," * Produces a GraphQLError representing a syntax error, containing useful"," * descriptive information about the syntax error's position in the source."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function syntaxError(source, position, description) {","  var location = (0, _location.getLocation)(source, position);","  var error = new _GraphQLError.GraphQLError('Syntax Error ' + source.name + ' (' + location.line + ':' + location.column + ') ' + description + '\\n\\n' + highlightSourceAtLocation(source, location), undefined, source, [position]);","  return error;","}","","/**"," * Render a helpful description of the location of the error in the GraphQL"," * Source document."," */","function highlightSourceAtLocation(source, location) {","  var line = location.line;","  var prevLineNum = (line - 1).toString();","  var lineNum = line.toString();","  var nextLineNum = (line + 1).toString();","  var padLen = nextLineNum.length;","  var lines = source.body.split(/\\r\\n|[\\n\\r]/g);","  return (line >= 2 ? lpad(padLen, prevLineNum) + ': ' + lines[line - 2] + '\\n' : '') + lpad(padLen, lineNum) + ': ' + lines[line - 1] + '\\n' + Array(2 + padLen + location.column).join(' ') + '^\\n' + (line < lines.length ? lpad(padLen, nextLineNum) + ': ' + lines[line] + '\\n' : '');","}","","function lpad(len, str) {","  return Array(len - str.length + 1).join(' ') + str;","}"],"l":{"3":1,"6":1,"8":1,"10":1,"26":1,"27":0,"28":0,"29":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"46":1,"47":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/locatedError.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/locatedError.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"locatedError","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"4":{"start":{"line":15,"column":0},"end":{"line":24,"column":1}},"5":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":25}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":110}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":198}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":6},"end":{"line":18,"column":19}},{"start":{"line":18,"column":23},"end":{"line":18,"column":41}}]},"3":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":32},"end":{"line":22,"column":78}},{"start":{"line":22,"column":81},"end":{"line":22,"column":109}}]},"4":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":32},"end":{"line":22,"column":53}},{"start":{"line":22,"column":57},"end":{"line":22,"column":78}}]},"5":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":49},"end":{"line":23,"column":62}},{"start":{"line":23,"column":66},"end":{"line":23,"column":85}},{"start":{"line":23,"column":89},"end":{"line":23,"column":94}}]},"6":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":96},"end":{"line":23,"column":109}},{"start":{"line":23,"column":113},"end":{"line":23,"column":133}}]},"7":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":135},"end":{"line":23,"column":148}},{"start":{"line":23,"column":152},"end":{"line":23,"column":175}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.locatedError = locatedError;","","var _GraphQLError = require('./GraphQLError');","","/**"," * Given an arbitrary Error, presumably thrown while attempting to execute a"," * GraphQL operation, produce a new GraphQLError aware of the location in the"," * document responsible for the original Error."," */","function locatedError(originalError, nodes, path) {","  // Note: this uses a brand-check to support GraphQL errors originating from","  // other contexts.","  if (originalError && originalError.path) {","    return originalError;","  }","","  var message = originalError ? originalError.message || String(originalError) : 'An unknown error occurred.';","  return new _GraphQLError.GraphQLError(message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"8":1,"15":1,"18":0,"19":0,"22":0,"23":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/formatError.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/error/formatError.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0},"b":{"1":[1,0],"2":[1,1]},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}}},"2":{"name":"formatError","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":53}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":97}},"6":{"start":{"line":12,"column":39},"end":{"line":12,"column":95}},"7":{"start":{"line":18,"column":0},"end":{"line":25,"column":1}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":71}},"9":{"start":{"line":20,"column":2},"end":{"line":24,"column":4}}},"branchMap":{"1":{"line":12,"type":"cond-expr","locations":[{"start":{"line":12,"column":70},"end":{"line":12,"column":73}},{"start":{"line":12,"column":76},"end":{"line":12,"column":94}}]},"2":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":46},"end":{"line":12,"column":49}},{"start":{"line":12,"column":53},"end":{"line":12,"column":67}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.formatError = formatError;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Given a GraphQLError, format it according to the rules described by the"," * Response Format, Errors section of the GraphQL Specification."," */","function formatError(error) {","  (0, _invariant2.default)(error, 'Received null or undefined error.');","  return {","    message: error.message,","    locations: error.locations,","    path: error.path","  };","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"18":1,"19":0,"20":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/invariant.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/invariant.js","s":{"1":1,"2":1,"3":1,"4":83,"5":0},"b":{"1":[0,83]},"f":{"1":83},"fnMap":{"1":{"name":"invariant","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"3":{"start":{"line":17,"column":0},"end":{"line":21,"column":1}},"4":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"5":{"start":{"line":19,"column":4},"end":{"line":19,"column":29}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]}},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = invariant;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function invariant(condition, message) {","  if (!condition) {","    throw new Error(message);","  }","}"],"l":{"3":1,"6":1,"17":1,"18":83,"19":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/lexer.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/lexer.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":0,"40":0,"41":1,"42":1,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":1,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":1,"199":0,"200":1,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0,0,0,0,0,0,0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0,0,0,0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"createLexer","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":38}}},"2":{"name":"advanceLexer","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}}},"3":{"name":"getTokenDesc","line":110,"loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":29}}},"4":{"name":"Tok","line":121,"loc":{"start":{"line":121,"column":0},"end":{"line":121,"column":58}}},"5":{"name":"toJSON","line":133,"loc":{"start":{"line":133,"column":47},"end":{"line":133,"column":65}}},"6":{"name":"printCharCode","line":142,"loc":{"start":{"line":142,"column":0},"end":{"line":142,"column":29}}},"7":{"name":"readToken","line":160,"loc":{"start":{"line":160,"column":0},"end":{"line":160,"column":32}}},"8":{"name":"unexpectedCharacterMessage","line":253,"loc":{"start":{"line":253,"column":0},"end":{"line":253,"column":42}}},"9":{"name":"positionAfterWhitespace","line":267,"loc":{"start":{"line":267,"column":0},"end":{"line":267,"column":61}}},"10":{"name":"readComment","line":301,"loc":{"start":{"line":301,"column":0},"end":{"line":301,"column":53}}},"11":{"name":"readNumber","line":322,"loc":{"start":{"line":322,"column":0},"end":{"line":322,"column":63}}},"12":{"name":"readDigits","line":371,"loc":{"start":{"line":371,"column":0},"end":{"line":371,"column":46}}},"13":{"name":"readString","line":390,"loc":{"start":{"line":390,"column":0},"end":{"line":390,"column":52}}},"14":{"name":"uniCharCode","line":465,"loc":{"start":{"line":465,"column":0},"end":{"line":465,"column":33}}},"15":{"name":"char2hex","line":477,"loc":{"start":{"line":477,"column":0},"end":{"line":477,"column":21}}},"16":{"name":"readName","line":489,"loc":{"start":{"line":489,"column":0},"end":{"line":489,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":30}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":36}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":33}},"6":{"start":{"line":20,"column":0},"end":{"line":32,"column":1}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":56}},"8":{"start":{"line":22,"column":2},"end":{"line":30,"column":4}},"9":{"start":{"line":31,"column":2},"end":{"line":31,"column":15}},"10":{"start":{"line":42,"column":0},"end":{"line":51,"column":1}},"11":{"start":{"line":43,"column":2},"end":{"line":43,"column":42}},"12":{"start":{"line":44,"column":2},"end":{"line":49,"column":3}},"13":{"start":{"line":45,"column":4},"end":{"line":47,"column":37}},"14":{"start":{"line":46,"column":6},"end":{"line":46,"column":50}},"15":{"start":{"line":48,"column":4},"end":{"line":48,"column":23}},"16":{"start":{"line":50,"column":2},"end":{"line":50,"column":15}},"17":{"start":{"line":59,"column":0},"end":{"line":59,"column":18}},"18":{"start":{"line":60,"column":0},"end":{"line":60,"column":18}},"19":{"start":{"line":61,"column":0},"end":{"line":61,"column":15}},"20":{"start":{"line":62,"column":0},"end":{"line":62,"column":17}},"21":{"start":{"line":63,"column":0},"end":{"line":63,"column":18}},"22":{"start":{"line":64,"column":0},"end":{"line":64,"column":18}},"23":{"start":{"line":65,"column":0},"end":{"line":65,"column":19}},"24":{"start":{"line":66,"column":0},"end":{"line":66,"column":16}},"25":{"start":{"line":67,"column":0},"end":{"line":67,"column":17}},"26":{"start":{"line":68,"column":0},"end":{"line":68,"column":13}},"27":{"start":{"line":69,"column":0},"end":{"line":69,"column":20}},"28":{"start":{"line":70,"column":0},"end":{"line":70,"column":20}},"29":{"start":{"line":71,"column":0},"end":{"line":71,"column":18}},"30":{"start":{"line":72,"column":0},"end":{"line":72,"column":15}},"31":{"start":{"line":73,"column":0},"end":{"line":73,"column":18}},"32":{"start":{"line":74,"column":0},"end":{"line":74,"column":18}},"33":{"start":{"line":75,"column":0},"end":{"line":75,"column":16}},"34":{"start":{"line":76,"column":0},"end":{"line":76,"column":20}},"35":{"start":{"line":77,"column":0},"end":{"line":77,"column":22}},"36":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"37":{"start":{"line":84,"column":0},"end":{"line":105,"column":2}},"38":{"start":{"line":110,"column":0},"end":{"line":113,"column":1}},"39":{"start":{"line":111,"column":2},"end":{"line":111,"column":26}},"40":{"start":{"line":112,"column":2},"end":{"line":112,"column":62}},"41":{"start":{"line":115,"column":0},"end":{"line":115,"column":45}},"42":{"start":{"line":116,"column":0},"end":{"line":116,"column":35}},"43":{"start":{"line":121,"column":0},"end":{"line":130,"column":1}},"44":{"start":{"line":122,"column":2},"end":{"line":122,"column":19}},"45":{"start":{"line":123,"column":2},"end":{"line":123,"column":21}},"46":{"start":{"line":124,"column":2},"end":{"line":124,"column":17}},"47":{"start":{"line":125,"column":2},"end":{"line":125,"column":19}},"48":{"start":{"line":126,"column":2},"end":{"line":126,"column":23}},"49":{"start":{"line":127,"column":2},"end":{"line":127,"column":21}},"50":{"start":{"line":128,"column":2},"end":{"line":128,"column":19}},"51":{"start":{"line":129,"column":2},"end":{"line":129,"column":19}},"52":{"start":{"line":133,"column":0},"end":{"line":140,"column":2}},"53":{"start":{"line":134,"column":2},"end":{"line":139,"column":4}},"54":{"start":{"line":142,"column":0},"end":{"line":151,"column":1}},"55":{"start":{"line":143,"column":2},"end":{"line":150,"column":4}},"56":{"start":{"line":160,"column":0},"end":{"line":248,"column":1}},"57":{"start":{"line":161,"column":2},"end":{"line":161,"column":28}},"58":{"start":{"line":162,"column":2},"end":{"line":162,"column":25}},"59":{"start":{"line":163,"column":2},"end":{"line":163,"column":31}},"60":{"start":{"line":165,"column":2},"end":{"line":165,"column":64}},"61":{"start":{"line":166,"column":2},"end":{"line":166,"column":24}},"62":{"start":{"line":167,"column":2},"end":{"line":167,"column":43}},"63":{"start":{"line":169,"column":2},"end":{"line":171,"column":3}},"64":{"start":{"line":170,"column":4},"end":{"line":170,"column":65}},"65":{"start":{"line":173,"column":2},"end":{"line":173,"column":45}},"66":{"start":{"line":176,"column":2},"end":{"line":178,"column":3}},"67":{"start":{"line":177,"column":4},"end":{"line":177,"column":121}},"68":{"start":{"line":180,"column":2},"end":{"line":245,"column":3}},"69":{"start":{"line":183,"column":6},"end":{"line":183,"column":68}},"70":{"start":{"line":186,"column":6},"end":{"line":186,"column":60}},"71":{"start":{"line":189,"column":6},"end":{"line":189,"column":70}},"72":{"start":{"line":192,"column":6},"end":{"line":192,"column":71}},"73":{"start":{"line":195,"column":6},"end":{"line":195,"column":71}},"74":{"start":{"line":198,"column":6},"end":{"line":200,"column":7}},"75":{"start":{"line":199,"column":8},"end":{"line":199,"column":72}},"76":{"start":{"line":201,"column":6},"end":{"line":201,"column":12}},"77":{"start":{"line":204,"column":6},"end":{"line":204,"column":69}},"78":{"start":{"line":207,"column":6},"end":{"line":207,"column":70}},"79":{"start":{"line":210,"column":6},"end":{"line":210,"column":66}},"80":{"start":{"line":213,"column":6},"end":{"line":213,"column":73}},"81":{"start":{"line":216,"column":6},"end":{"line":216,"column":73}},"82":{"start":{"line":219,"column":6},"end":{"line":219,"column":71}},"83":{"start":{"line":222,"column":6},"end":{"line":222,"column":68}},"84":{"start":{"line":225,"column":6},"end":{"line":225,"column":71}},"85":{"start":{"line":236,"column":6},"end":{"line":236,"column":57}},"86":{"start":{"line":241,"column":6},"end":{"line":241,"column":65}},"87":{"start":{"line":244,"column":6},"end":{"line":244,"column":59}},"88":{"start":{"line":247,"column":2},"end":{"line":247,"column":84}},"89":{"start":{"line":253,"column":0},"end":{"line":260,"column":1}},"90":{"start":{"line":254,"column":2},"end":{"line":257,"column":3}},"91":{"start":{"line":256,"column":4},"end":{"line":256,"column":98}},"92":{"start":{"line":259,"column":2},"end":{"line":259,"column":78}},"93":{"start":{"line":267,"column":0},"end":{"line":294,"column":1}},"94":{"start":{"line":268,"column":2},"end":{"line":268,"column":31}},"95":{"start":{"line":269,"column":2},"end":{"line":269,"column":31}},"96":{"start":{"line":270,"column":2},"end":{"line":292,"column":3}},"97":{"start":{"line":271,"column":4},"end":{"line":271,"column":47}},"98":{"start":{"line":273,"column":4},"end":{"line":291,"column":5}},"99":{"start":{"line":274,"column":6},"end":{"line":274,"column":17}},"100":{"start":{"line":275,"column":11},"end":{"line":291,"column":5}},"101":{"start":{"line":277,"column":6},"end":{"line":277,"column":17}},"102":{"start":{"line":278,"column":6},"end":{"line":278,"column":19}},"103":{"start":{"line":279,"column":6},"end":{"line":279,"column":33}},"104":{"start":{"line":280,"column":11},"end":{"line":291,"column":5}},"105":{"start":{"line":282,"column":6},"end":{"line":286,"column":7}},"106":{"start":{"line":283,"column":8},"end":{"line":283,"column":22}},"107":{"start":{"line":285,"column":8},"end":{"line":285,"column":19}},"108":{"start":{"line":287,"column":6},"end":{"line":287,"column":19}},"109":{"start":{"line":288,"column":6},"end":{"line":288,"column":33}},"110":{"start":{"line":290,"column":6},"end":{"line":290,"column":12}},"111":{"start":{"line":293,"column":2},"end":{"line":293,"column":18}},"112":{"start":{"line":301,"column":0},"end":{"line":313,"column":1}},"113":{"start":{"line":302,"column":2},"end":{"line":302,"column":25}},"114":{"start":{"line":303,"column":2},"end":{"line":303,"column":20}},"115":{"start":{"line":304,"column":2},"end":{"line":304,"column":23}},"116":{"start":{"line":306,"column":2},"end":{"line":310,"column":37}},"117":{"start":{"line":307,"column":4},"end":{"line":307,"column":45}},"118":{"start":{"line":312,"column":2},"end":{"line":312,"column":99}},"119":{"start":{"line":322,"column":0},"end":{"line":366,"column":1}},"120":{"start":{"line":323,"column":2},"end":{"line":323,"column":25}},"121":{"start":{"line":324,"column":2},"end":{"line":324,"column":23}},"122":{"start":{"line":325,"column":2},"end":{"line":325,"column":23}},"123":{"start":{"line":326,"column":2},"end":{"line":326,"column":22}},"124":{"start":{"line":328,"column":2},"end":{"line":331,"column":3}},"125":{"start":{"line":330,"column":4},"end":{"line":330,"column":45}},"126":{"start":{"line":333,"column":2},"end":{"line":342,"column":3}},"127":{"start":{"line":335,"column":4},"end":{"line":335,"column":45}},"128":{"start":{"line":336,"column":4},"end":{"line":338,"column":5}},"129":{"start":{"line":337,"column":6},"end":{"line":337,"column":128}},"130":{"start":{"line":340,"column":4},"end":{"line":340,"column":50}},"131":{"start":{"line":341,"column":4},"end":{"line":341,"column":43}},"132":{"start":{"line":344,"column":2},"end":{"line":351,"column":3}},"133":{"start":{"line":346,"column":4},"end":{"line":346,"column":19}},"134":{"start":{"line":348,"column":4},"end":{"line":348,"column":45}},"135":{"start":{"line":349,"column":4},"end":{"line":349,"column":50}},"136":{"start":{"line":350,"column":4},"end":{"line":350,"column":43}},"137":{"start":{"line":353,"column":2},"end":{"line":363,"column":3}},"138":{"start":{"line":355,"column":4},"end":{"line":355,"column":19}},"139":{"start":{"line":357,"column":4},"end":{"line":357,"column":45}},"140":{"start":{"line":358,"column":4},"end":{"line":361,"column":5}},"141":{"start":{"line":360,"column":6},"end":{"line":360,"column":47}},"142":{"start":{"line":362,"column":4},"end":{"line":362,"column":50}},"143":{"start":{"line":365,"column":2},"end":{"line":365,"column":109}},"144":{"start":{"line":371,"column":0},"end":{"line":383,"column":1}},"145":{"start":{"line":372,"column":2},"end":{"line":372,"column":25}},"146":{"start":{"line":373,"column":2},"end":{"line":373,"column":23}},"147":{"start":{"line":374,"column":2},"end":{"line":374,"column":23}},"148":{"start":{"line":375,"column":2},"end":{"line":381,"column":3}},"149":{"start":{"line":377,"column":4},"end":{"line":379,"column":39}},"150":{"start":{"line":378,"column":6},"end":{"line":378,"column":47}},"151":{"start":{"line":380,"column":4},"end":{"line":380,"column":20}},"152":{"start":{"line":382,"column":2},"end":{"line":382,"column":122}},"153":{"start":{"line":390,"column":0},"end":{"line":453,"column":1}},"154":{"start":{"line":391,"column":2},"end":{"line":391,"column":25}},"155":{"start":{"line":392,"column":2},"end":{"line":392,"column":27}},"156":{"start":{"line":393,"column":2},"end":{"line":393,"column":28}},"157":{"start":{"line":394,"column":2},"end":{"line":394,"column":15}},"158":{"start":{"line":395,"column":2},"end":{"line":395,"column":17}},"159":{"start":{"line":397,"column":2},"end":{"line":444,"column":3}},"160":{"start":{"line":403,"column":4},"end":{"line":405,"column":5}},"161":{"start":{"line":404,"column":6},"end":{"line":404,"column":119}},"162":{"start":{"line":407,"column":4},"end":{"line":407,"column":15}},"163":{"start":{"line":408,"column":4},"end":{"line":443,"column":5}},"164":{"start":{"line":410,"column":6},"end":{"line":410,"column":58}},"165":{"start":{"line":411,"column":6},"end":{"line":411,"column":45}},"166":{"start":{"line":412,"column":6},"end":{"line":440,"column":7}},"167":{"start":{"line":414,"column":10},"end":{"line":414,"column":23}},"168":{"start":{"line":414,"column":23},"end":{"line":414,"column":29}},"169":{"start":{"line":416,"column":10},"end":{"line":416,"column":23}},"170":{"start":{"line":416,"column":23},"end":{"line":416,"column":29}},"171":{"start":{"line":418,"column":10},"end":{"line":418,"column":24}},"172":{"start":{"line":418,"column":24},"end":{"line":418,"column":30}},"173":{"start":{"line":420,"column":10},"end":{"line":420,"column":24}},"174":{"start":{"line":420,"column":24},"end":{"line":420,"column":30}},"175":{"start":{"line":422,"column":10},"end":{"line":422,"column":24}},"176":{"start":{"line":422,"column":24},"end":{"line":422,"column":30}},"177":{"start":{"line":424,"column":10},"end":{"line":424,"column":24}},"178":{"start":{"line":424,"column":24},"end":{"line":424,"column":30}},"179":{"start":{"line":426,"column":10},"end":{"line":426,"column":24}},"180":{"start":{"line":426,"column":24},"end":{"line":426,"column":30}},"181":{"start":{"line":428,"column":10},"end":{"line":428,"column":24}},"182":{"start":{"line":428,"column":24},"end":{"line":428,"column":30}},"183":{"start":{"line":431,"column":10},"end":{"line":431,"column":185}},"184":{"start":{"line":432,"column":10},"end":{"line":434,"column":11}},"185":{"start":{"line":433,"column":12},"end":{"line":433,"column":156}},"186":{"start":{"line":435,"column":10},"end":{"line":435,"column":49}},"187":{"start":{"line":436,"column":10},"end":{"line":436,"column":24}},"188":{"start":{"line":437,"column":10},"end":{"line":437,"column":16}},"189":{"start":{"line":439,"column":10},"end":{"line":439,"column":133}},"190":{"start":{"line":441,"column":6},"end":{"line":441,"column":17}},"191":{"start":{"line":442,"column":6},"end":{"line":442,"column":28}},"192":{"start":{"line":446,"column":2},"end":{"line":449,"column":3}},"193":{"start":{"line":448,"column":4},"end":{"line":448,"column":76}},"194":{"start":{"line":451,"column":2},"end":{"line":451,"column":50}},"195":{"start":{"line":452,"column":2},"end":{"line":452,"column":70}},"196":{"start":{"line":465,"column":0},"end":{"line":467,"column":1}},"197":{"start":{"line":466,"column":2},"end":{"line":466,"column":79}},"198":{"start":{"line":477,"column":0},"end":{"line":482,"column":1}},"199":{"start":{"line":478,"column":2},"end":{"line":481,"column":5}},"200":{"start":{"line":489,"column":0},"end":{"line":502,"column":1}},"201":{"start":{"line":490,"column":2},"end":{"line":490,"column":25}},"202":{"start":{"line":491,"column":2},"end":{"line":491,"column":31}},"203":{"start":{"line":492,"column":2},"end":{"line":492,"column":25}},"204":{"start":{"line":493,"column":2},"end":{"line":493,"column":15}},"205":{"start":{"line":494,"column":2},"end":{"line":500,"column":3}},"206":{"start":{"line":499,"column":4},"end":{"line":499,"column":10}},"207":{"start":{"line":501,"column":2},"end":{"line":501,"column":88}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"2":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":17},"end":{"line":112,"column":48}},{"start":{"line":112,"column":51},"end":{"line":112,"column":61}}]},"3":{"line":145,"type":"cond-expr","locations":[{"start":{"line":145,"column":18},"end":{"line":145,"column":21}},{"start":{"line":147,"column":4},"end":{"line":149,"column":69}}]},"4":{"line":147,"type":"cond-expr","locations":[{"start":{"line":147,"column":20},"end":{"line":147,"column":61}},{"start":{"line":149,"column":4},"end":{"line":149,"column":69}}]},"5":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":2},"end":{"line":169,"column":2}},{"start":{"line":169,"column":2},"end":{"line":169,"column":2}}]},"6":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":2},"end":{"line":176,"column":2}},{"start":{"line":176,"column":2},"end":{"line":176,"column":2}}]},"7":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":6},"end":{"line":176,"column":19}},{"start":{"line":176,"column":23},"end":{"line":176,"column":38}},{"start":{"line":176,"column":42},"end":{"line":176,"column":57}},{"start":{"line":176,"column":61},"end":{"line":176,"column":76}}]},"8":{"line":180,"type":"switch","locations":[{"start":{"line":182,"column":4},"end":{"line":183,"column":68}},{"start":{"line":185,"column":4},"end":{"line":186,"column":60}},{"start":{"line":188,"column":4},"end":{"line":189,"column":70}},{"start":{"line":191,"column":4},"end":{"line":192,"column":71}},{"start":{"line":194,"column":4},"end":{"line":195,"column":71}},{"start":{"line":197,"column":4},"end":{"line":201,"column":12}},{"start":{"line":203,"column":4},"end":{"line":204,"column":69}},{"start":{"line":206,"column":4},"end":{"line":207,"column":70}},{"start":{"line":209,"column":4},"end":{"line":210,"column":66}},{"start":{"line":212,"column":4},"end":{"line":213,"column":73}},{"start":{"line":215,"column":4},"end":{"line":216,"column":73}},{"start":{"line":218,"column":4},"end":{"line":219,"column":71}},{"start":{"line":221,"column":4},"end":{"line":222,"column":68}},{"start":{"line":224,"column":4},"end":{"line":225,"column":71}},{"start":{"line":227,"column":4},"end":{"line":227,"column":12}},{"start":{"line":227,"column":12},"end":{"line":227,"column":20}},{"start":{"line":227,"column":20},"end":{"line":227,"column":28}},{"start":{"line":227,"column":28},"end":{"line":227,"column":36}},{"start":{"line":227,"column":36},"end":{"line":227,"column":44}},{"start":{"line":227,"column":44},"end":{"line":227,"column":52}},{"start":{"line":227,"column":52},"end":{"line":227,"column":60}},{"start":{"line":227,"column":60},"end":{"line":227,"column":68}},{"start":{"line":228,"column":4},"end":{"line":228,"column":12}},{"start":{"line":228,"column":12},"end":{"line":228,"column":20}},{"start":{"line":228,"column":20},"end":{"line":228,"column":28}},{"start":{"line":228,"column":28},"end":{"line":228,"column":36}},{"start":{"line":228,"column":36},"end":{"line":228,"column":44}},{"start":{"line":228,"column":44},"end":{"line":228,"column":52}},{"start":{"line":228,"column":52},"end":{"line":228,"column":60}},{"start":{"line":228,"column":60},"end":{"line":228,"column":68}},{"start":{"line":229,"column":4},"end":{"line":229,"column":12}},{"start":{"line":229,"column":12},"end":{"line":229,"column":20}},{"start":{"line":229,"column":20},"end":{"line":229,"column":28}},{"start":{"line":229,"column":28},"end":{"line":229,"column":36}},{"start":{"line":229,"column":36},"end":{"line":229,"column":44}},{"start":{"line":229,"column":44},"end":{"line":229,"column":52}},{"start":{"line":229,"column":52},"end":{"line":229,"column":60}},{"start":{"line":229,"column":60},"end":{"line":229,"column":68}},{"start":{"line":230,"column":4},"end":{"line":230,"column":12}},{"start":{"line":230,"column":12},"end":{"line":230,"column":20}},{"start":{"line":231,"column":4},"end":{"line":231,"column":12}},{"start":{"line":232,"column":4},"end":{"line":232,"column":12}},{"start":{"line":232,"column":12},"end":{"line":232,"column":20}},{"start":{"line":232,"column":20},"end":{"line":232,"column":28}},{"start":{"line":232,"column":28},"end":{"line":232,"column":37}},{"start":{"line":232,"column":37},"end":{"line":232,"column":46}},{"start":{"line":232,"column":46},"end":{"line":232,"column":55}},{"start":{"line":232,"column":55},"end":{"line":232,"column":64}},{"start":{"line":232,"column":64},"end":{"line":232,"column":73}},{"start":{"line":233,"column":4},"end":{"line":233,"column":13}},{"start":{"line":233,"column":13},"end":{"line":233,"column":22}},{"start":{"line":233,"column":22},"end":{"line":233,"column":31}},{"start":{"line":233,"column":31},"end":{"line":233,"column":40}},{"start":{"line":233,"column":40},"end":{"line":233,"column":49}},{"start":{"line":233,"column":49},"end":{"line":233,"column":58}},{"start":{"line":233,"column":58},"end":{"line":233,"column":67}},{"start":{"line":234,"column":4},"end":{"line":234,"column":13}},{"start":{"line":234,"column":13},"end":{"line":234,"column":22}},{"start":{"line":234,"column":22},"end":{"line":234,"column":31}},{"start":{"line":234,"column":31},"end":{"line":234,"column":40}},{"start":{"line":234,"column":40},"end":{"line":234,"column":49}},{"start":{"line":234,"column":49},"end":{"line":234,"column":58}},{"start":{"line":234,"column":58},"end":{"line":234,"column":67}},{"start":{"line":235,"column":4},"end":{"line":235,"column":13}},{"start":{"line":235,"column":13},"end":{"line":235,"column":22}},{"start":{"line":235,"column":22},"end":{"line":235,"column":31}},{"start":{"line":235,"column":31},"end":{"line":236,"column":57}},{"start":{"line":238,"column":4},"end":{"line":238,"column":12}},{"start":{"line":239,"column":4},"end":{"line":239,"column":12}},{"start":{"line":239,"column":12},"end":{"line":239,"column":20}},{"start":{"line":239,"column":20},"end":{"line":239,"column":28}},{"start":{"line":239,"column":28},"end":{"line":239,"column":36}},{"start":{"line":239,"column":36},"end":{"line":239,"column":44}},{"start":{"line":240,"column":4},"end":{"line":240,"column":12}},{"start":{"line":240,"column":12},"end":{"line":240,"column":20}},{"start":{"line":240,"column":20},"end":{"line":240,"column":28}},{"start":{"line":240,"column":28},"end":{"line":240,"column":36}},{"start":{"line":240,"column":36},"end":{"line":241,"column":65}},{"start":{"line":243,"column":4},"end":{"line":244,"column":59}}]},"9":{"line":198,"type":"if","locations":[{"start":{"line":198,"column":6},"end":{"line":198,"column":6}},{"start":{"line":198,"column":6},"end":{"line":198,"column":6}}]},"10":{"line":198,"type":"binary-expr","locations":[{"start":{"line":198,"column":10},"end":{"line":198,"column":52}},{"start":{"line":198,"column":56},"end":{"line":198,"column":98}}]},"11":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":2},"end":{"line":254,"column":2}},{"start":{"line":254,"column":2},"end":{"line":254,"column":2}}]},"12":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":4},"end":{"line":273,"column":4}},{"start":{"line":273,"column":4},"end":{"line":273,"column":4}}]},"13":{"line":273,"type":"binary-expr","locations":[{"start":{"line":273,"column":8},"end":{"line":273,"column":18}},{"start":{"line":273,"column":22},"end":{"line":273,"column":33}},{"start":{"line":273,"column":37},"end":{"line":273,"column":48}},{"start":{"line":273,"column":52},"end":{"line":273,"column":67}}]},"14":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":11},"end":{"line":275,"column":11}},{"start":{"line":275,"column":11},"end":{"line":275,"column":11}}]},"15":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":11},"end":{"line":280,"column":11}},{"start":{"line":280,"column":11},"end":{"line":280,"column":11}}]},"16":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":6},"end":{"line":282,"column":6}},{"start":{"line":282,"column":6},"end":{"line":282,"column":6}}]},"17":{"line":308,"type":"binary-expr","locations":[{"start":{"line":308,"column":11},"end":{"line":308,"column":24}},{"start":{"line":310,"column":2},"end":{"line":310,"column":15}},{"start":{"line":310,"column":19},"end":{"line":310,"column":34}}]},"18":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":2},"end":{"line":328,"column":2}},{"start":{"line":328,"column":2},"end":{"line":328,"column":2}}]},"19":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":2},"end":{"line":333,"column":2}},{"start":{"line":333,"column":2},"end":{"line":333,"column":2}}]},"20":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":4},"end":{"line":336,"column":4}},{"start":{"line":336,"column":4},"end":{"line":336,"column":4}}]},"21":{"line":336,"type":"binary-expr","locations":[{"start":{"line":336,"column":8},"end":{"line":336,"column":18}},{"start":{"line":336,"column":22},"end":{"line":336,"column":32}}]},"22":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":2},"end":{"line":344,"column":2}},{"start":{"line":344,"column":2},"end":{"line":344,"column":2}}]},"23":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":2},"end":{"line":353,"column":2}},{"start":{"line":353,"column":2},"end":{"line":353,"column":2}}]},"24":{"line":353,"type":"binary-expr","locations":[{"start":{"line":353,"column":6},"end":{"line":353,"column":17}},{"start":{"line":353,"column":21},"end":{"line":353,"column":33}}]},"25":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":4},"end":{"line":358,"column":4}},{"start":{"line":358,"column":4},"end":{"line":358,"column":4}}]},"26":{"line":358,"type":"binary-expr","locations":[{"start":{"line":358,"column":8},"end":{"line":358,"column":19}},{"start":{"line":358,"column":23},"end":{"line":358,"column":34}}]},"27":{"line":365,"type":"cond-expr","locations":[{"start":{"line":365,"column":27},"end":{"line":365,"column":32}},{"start":{"line":365,"column":35},"end":{"line":365,"column":38}}]},"28":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":2},"end":{"line":375,"column":2}},{"start":{"line":375,"column":2},"end":{"line":375,"column":2}}]},"29":{"line":375,"type":"binary-expr","locations":[{"start":{"line":375,"column":6},"end":{"line":375,"column":16}},{"start":{"line":375,"column":20},"end":{"line":375,"column":30}}]},"30":{"line":379,"type":"binary-expr","locations":[{"start":{"line":379,"column":13},"end":{"line":379,"column":23}},{"start":{"line":379,"column":27},"end":{"line":379,"column":37}}]},"31":{"line":397,"type":"binary-expr","locations":[{"start":{"line":397,"column":9},"end":{"line":397,"column":31}},{"start":{"line":397,"column":35},"end":{"line":397,"column":84}},{"start":{"line":399,"column":2},"end":{"line":399,"column":17}},{"start":{"line":399,"column":21},"end":{"line":399,"column":36}},{"start":{"line":401,"column":2},"end":{"line":401,"column":13}}]},"32":{"line":403,"type":"if","locations":[{"start":{"line":403,"column":4},"end":{"line":403,"column":4}},{"start":{"line":403,"column":4},"end":{"line":403,"column":4}}]},"33":{"line":403,"type":"binary-expr","locations":[{"start":{"line":403,"column":8},"end":{"line":403,"column":21}},{"start":{"line":403,"column":25},"end":{"line":403,"column":40}}]},"34":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":4},"end":{"line":408,"column":4}},{"start":{"line":408,"column":4},"end":{"line":408,"column":4}}]},"35":{"line":412,"type":"switch","locations":[{"start":{"line":413,"column":8},"end":{"line":414,"column":29}},{"start":{"line":415,"column":8},"end":{"line":416,"column":29}},{"start":{"line":417,"column":8},"end":{"line":418,"column":30}},{"start":{"line":419,"column":8},"end":{"line":420,"column":30}},{"start":{"line":421,"column":8},"end":{"line":422,"column":30}},{"start":{"line":423,"column":8},"end":{"line":424,"column":30}},{"start":{"line":425,"column":8},"end":{"line":426,"column":30}},{"start":{"line":427,"column":8},"end":{"line":428,"column":30}},{"start":{"line":429,"column":8},"end":{"line":437,"column":16}},{"start":{"line":438,"column":8},"end":{"line":439,"column":133}}]},"36":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":10},"end":{"line":432,"column":10}},{"start":{"line":432,"column":10},"end":{"line":432,"column":10}}]},"37":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":2},"end":{"line":446,"column":2}},{"start":{"line":446,"column":2},"end":{"line":446,"column":2}}]},"38":{"line":478,"type":"cond-expr","locations":[{"start":{"line":478,"column":30},"end":{"line":478,"column":36}},{"start":{"line":479,"column":2},"end":{"line":481,"column":4}}]},"39":{"line":478,"type":"binary-expr","locations":[{"start":{"line":478,"column":9},"end":{"line":478,"column":16}},{"start":{"line":478,"column":20},"end":{"line":478,"column":27}}]},"40":{"line":479,"type":"cond-expr","locations":[{"start":{"line":479,"column":23},"end":{"line":479,"column":29}},{"start":{"line":480,"column":2},"end":{"line":481,"column":4}}]},"41":{"line":479,"type":"binary-expr","locations":[{"start":{"line":479,"column":2},"end":{"line":479,"column":9}},{"start":{"line":479,"column":13},"end":{"line":479,"column":20}}]},"42":{"line":480,"type":"cond-expr","locations":[{"start":{"line":480,"column":24},"end":{"line":480,"column":30}},{"start":{"line":481,"column":2},"end":{"line":481,"column":4}}]},"43":{"line":480,"type":"binary-expr","locations":[{"start":{"line":480,"column":2},"end":{"line":480,"column":9}},{"start":{"line":480,"column":13},"end":{"line":480,"column":21}}]},"44":{"line":494,"type":"binary-expr","locations":[{"start":{"line":494,"column":9},"end":{"line":494,"column":27}},{"start":{"line":494,"column":31},"end":{"line":494,"column":75}},{"start":{"line":494,"column":80},"end":{"line":494,"column":91}},{"start":{"line":495,"column":2},"end":{"line":495,"column":12}},{"start":{"line":495,"column":16},"end":{"line":495,"column":26}},{"start":{"line":496,"column":2},"end":{"line":496,"column":12}},{"start":{"line":496,"column":16},"end":{"line":496,"column":26}},{"start":{"line":497,"column":2},"end":{"line":497,"column":12}},{"start":{"line":497,"column":16},"end":{"line":497,"column":27}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.TokenKind = undefined;","exports.createLexer = createLexer;","exports.getTokenDesc = getTokenDesc;","","var _error = require('../error');","","/**"," * Given a Source object, this returns a Lexer for that source."," * A Lexer is a stateful stream generator in that every time"," * it is advanced, it returns the next token in the Source. Assuming the"," * source lexes, the final Token emitted by the lexer will be of kind"," * EOF, after which the lexer will repeatedly return the same EOF token"," * whenever called."," */","function createLexer(source, options) {","  var startOfFileToken = new Tok(SOF, 0, 0, 0, 0, null);","  var lexer = {","    source: source,","    options: options,","    lastToken: startOfFileToken,","    token: startOfFileToken,","    line: 1,","    lineStart: 0,","    advance: advanceLexer","  };","  return lexer;","} /*  /","  /**","   *  Copyright (c) 2015, Facebook, Inc.","   *  All rights reserved.","   *","   *  This source code is licensed under the BSD-style license found in the","   *  LICENSE file in the root directory of this source tree. An additional grant","   *  of patent rights can be found in the PATENTS file in the same directory.","   */","","function advanceLexer() {","  var token = this.lastToken = this.token;","  if (token.kind !== EOF) {","    do {","      token = token.next = readToken(this, token);","    } while (token.kind === COMMENT);","    this.token = token;","  }","  return token;","}","","/**"," * The return type of createLexer."," */","","","// Each kind of token.","var SOF = '<SOF>';","var EOF = '<EOF>';","var BANG = '!';","var DOLLAR = '$';","var PAREN_L = '(';","var PAREN_R = ')';","var SPREAD = '...';","var COLON = ':';","var EQUALS = '=';","var AT = '@';","var BRACKET_L = '[';","var BRACKET_R = ']';","var BRACE_L = '{';","var PIPE = '|';","var BRACE_R = '}';","var NAME = 'Name';","var INT = 'Int';","var FLOAT = 'Float';","var STRING = 'String';","var COMMENT = 'Comment';","","/**"," * An exported enum describing the different kinds of tokens that the"," * lexer emits."," */","var TokenKind = exports.TokenKind = {","  SOF: SOF,","  EOF: EOF,","  BANG: BANG,","  DOLLAR: DOLLAR,","  PAREN_L: PAREN_L,","  PAREN_R: PAREN_R,","  SPREAD: SPREAD,","  COLON: COLON,","  EQUALS: EQUALS,","  AT: AT,","  BRACKET_L: BRACKET_L,","  BRACKET_R: BRACKET_R,","  BRACE_L: BRACE_L,","  PIPE: PIPE,","  BRACE_R: BRACE_R,","  NAME: NAME,","  INT: INT,","  FLOAT: FLOAT,","  STRING: STRING,","  COMMENT: COMMENT","};","","/**"," * A helper function to describe a token as a string for debugging"," */","function getTokenDesc(token) {","  var value = token.value;","  return value ? token.kind + ' \"' + value + '\"' : token.kind;","}","","var charCodeAt = String.prototype.charCodeAt;","var slice = String.prototype.slice;","","/**"," * Helper function for constructing the Token object."," */","function Tok(kind, start, end, line, column, prev, value) {","  this.kind = kind;","  this.start = start;","  this.end = end;","  this.line = line;","  this.column = column;","  this.value = value;","  this.prev = prev;","  this.next = null;","}","","// Print a simplified form when appearing in JSON/util.inspect.","Tok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {","  return {","    kind: this.kind,","    value: this.value,","    line: this.line,","    column: this.column","  };","};","","function printCharCode(code) {","  return (","    // NaN/undefined represents access beyond the end of the file.","    isNaN(code) ? EOF :","    // Trust JSON for ASCII.","    code < 0x007F ? JSON.stringify(String.fromCharCode(code)) :","    // Otherwise print the escaped form.","    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'","  );","}","","/**"," * Gets the next token from the source starting at the given position."," *"," * This skips over whitespace and comments until it finds the next lexable"," * token, then lexes punctuators immediately or calls the appropriate helper"," * function for more complicated tokens."," */","function readToken(lexer, prev) {","  var source = lexer.source;","  var body = source.body;","  var bodyLength = body.length;","","  var position = positionAfterWhitespace(body, prev.end, lexer);","  var line = lexer.line;","  var col = 1 + position - lexer.lineStart;","","  if (position >= bodyLength) {","    return new Tok(EOF, bodyLength, bodyLength, line, col, prev);","  }","","  var code = charCodeAt.call(body, position);","","  // SourceCharacter","  if (code < 0x0020 && code !== 0x0009 && code !== 0x000A && code !== 0x000D) {","    throw (0, _error.syntaxError)(source, position, 'Cannot contain the invalid character ' + printCharCode(code) + '.');","  }","","  switch (code) {","    // !","    case 33:","      return new Tok(BANG, position, position + 1, line, col, prev);","    // #","    case 35:","      return readComment(source, position, line, col, prev);","    // $","    case 36:","      return new Tok(DOLLAR, position, position + 1, line, col, prev);","    // (","    case 40:","      return new Tok(PAREN_L, position, position + 1, line, col, prev);","    // )","    case 41:","      return new Tok(PAREN_R, position, position + 1, line, col, prev);","    // .","    case 46:","      if (charCodeAt.call(body, position + 1) === 46 && charCodeAt.call(body, position + 2) === 46) {","        return new Tok(SPREAD, position, position + 3, line, col, prev);","      }","      break;","    // :","    case 58:","      return new Tok(COLON, position, position + 1, line, col, prev);","    // =","    case 61:","      return new Tok(EQUALS, position, position + 1, line, col, prev);","    // @","    case 64:","      return new Tok(AT, position, position + 1, line, col, prev);","    // [","    case 91:","      return new Tok(BRACKET_L, position, position + 1, line, col, prev);","    // ]","    case 93:","      return new Tok(BRACKET_R, position, position + 1, line, col, prev);","    // {","    case 123:","      return new Tok(BRACE_L, position, position + 1, line, col, prev);","    // |","    case 124:","      return new Tok(PIPE, position, position + 1, line, col, prev);","    // }","    case 125:","      return new Tok(BRACE_R, position, position + 1, line, col, prev);","    // A-Z _ a-z","    case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:","    case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:","    case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:","    case 89:case 90:","    case 95:","    case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:","    case 105:case 106:case 107:case 108:case 109:case 110:case 111:","    case 112:case 113:case 114:case 115:case 116:case 117:case 118:","    case 119:case 120:case 121:case 122:","      return readName(source, position, line, col, prev);","    // - 0-9","    case 45:","    case 48:case 49:case 50:case 51:case 52:","    case 53:case 54:case 55:case 56:case 57:","      return readNumber(source, position, code, line, col, prev);","    // \"","    case 34:","      return readString(source, position, line, col, prev);","  }","","  throw (0, _error.syntaxError)(source, position, unexpectedCharacterMessage(code));","}","","/**"," * Report a message that an unexpected character was encountered."," */","function unexpectedCharacterMessage(code) {","  if (code === 39) {","    // '","    return 'Unexpected single quote character (\\'), did you mean to use ' + 'a double quote (\")?';","  }","","  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';","}","","/**"," * Reads from body starting at startPosition until it finds a non-whitespace"," * or commented character, then returns the position of that character for"," * lexing."," */","function positionAfterWhitespace(body, startPosition, lexer) {","  var bodyLength = body.length;","  var position = startPosition;","  while (position < bodyLength) {","    var code = charCodeAt.call(body, position);","    // tab | space | comma | BOM","    if (code === 9 || code === 32 || code === 44 || code === 0xFEFF) {","      ++position;","    } else if (code === 10) {","      // new line","      ++position;","      ++lexer.line;","      lexer.lineStart = position;","    } else if (code === 13) {","      // carriage return","      if (charCodeAt.call(body, position + 1) === 10) {","        position += 2;","      } else {","        ++position;","      }","      ++lexer.line;","      lexer.lineStart = position;","    } else {","      break;","    }","  }","  return position;","}","","/**"," * Reads a comment token from the source file."," *"," * #[\\u0009\\u0020-\\uFFFF]*"," */","function readComment(source, start, line, col, prev) {","  var body = source.body;","  var code = void 0;","  var position = start;","","  do {","    code = charCodeAt.call(body, ++position);","  } while (code !== null && (","  // SourceCharacter but not LineTerminator","  code > 0x001F || code === 0x0009));","","  return new Tok(COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));","}","","/**"," * Reads a number token from the source file, either a float"," * or an int depending on whether a decimal point appears."," *"," * Int:   -?(0|[1-9][0-9]*)"," * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?"," */","function readNumber(source, start, firstCode, line, col, prev) {","  var body = source.body;","  var code = firstCode;","  var position = start;","  var isFloat = false;","","  if (code === 45) {","    // -","    code = charCodeAt.call(body, ++position);","  }","","  if (code === 48) {","    // 0","    code = charCodeAt.call(body, ++position);","    if (code >= 48 && code <= 57) {","      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');","    }","  } else {","    position = readDigits(source, position, code);","    code = charCodeAt.call(body, position);","  }","","  if (code === 46) {","    // .","    isFloat = true;","","    code = charCodeAt.call(body, ++position);","    position = readDigits(source, position, code);","    code = charCodeAt.call(body, position);","  }","","  if (code === 69 || code === 101) {","    // E e","    isFloat = true;","","    code = charCodeAt.call(body, ++position);","    if (code === 43 || code === 45) {","      // + -","      code = charCodeAt.call(body, ++position);","    }","    position = readDigits(source, position, code);","  }","","  return new Tok(isFloat ? FLOAT : INT, start, position, line, col, prev, slice.call(body, start, position));","}","","/**"," * Returns the new position in the source after reading digits."," */","function readDigits(source, start, firstCode) {","  var body = source.body;","  var position = start;","  var code = firstCode;","  if (code >= 48 && code <= 57) {","    // 0 - 9","    do {","      code = charCodeAt.call(body, ++position);","    } while (code >= 48 && code <= 57); // 0 - 9","    return position;","  }","  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');","}","","/**"," * Reads a string token from the source file."," *"," * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\""," */","function readString(source, start, line, col, prev) {","  var body = source.body;","  var position = start + 1;","  var chunkStart = position;","  var code = 0;","  var value = '';","","  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&","  // not LineTerminator","  code !== 0x000A && code !== 0x000D &&","  // not Quote (\")","  code !== 34) {","    // SourceCharacter","    if (code < 0x0020 && code !== 0x0009) {","      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');","    }","","    ++position;","    if (code === 92) {","      // \\","      value += slice.call(body, chunkStart, position - 1);","      code = charCodeAt.call(body, position);","      switch (code) {","        case 34:","          value += '\"';break;","        case 47:","          value += '/';break;","        case 92:","          value += '\\\\';break;","        case 98:","          value += '\\b';break;","        case 102:","          value += '\\f';break;","        case 110:","          value += '\\n';break;","        case 114:","          value += '\\r';break;","        case 116:","          value += '\\t';break;","        case 117:","          // u","          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));","          if (charCode < 0) {","            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));","          }","          value += String.fromCharCode(charCode);","          position += 4;","          break;","        default:","          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');","      }","      ++position;","      chunkStart = position;","    }","  }","","  if (code !== 34) {","    // quote (\")","    throw (0, _error.syntaxError)(source, position, 'Unterminated string.');","  }","","  value += slice.call(body, chunkStart, position);","  return new Tok(STRING, start, position + 1, line, col, prev, value);","}","","/**"," * Converts four hexidecimal chars to the integer that the"," * string represents. For example, uniCharCode('0','0','0','f')"," * will return 15, and uniCharCode('0','0','f','f') returns 255."," *"," * Returns a negative number on error, if a char was invalid."," *"," * This is implemented by noting that char2hex() returns -1 on error,"," * which means the result of ORing the char2hex() will also be negative."," */","function uniCharCode(a, b, c, d) {","  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);","}","","/**"," * Converts a hex character to its integer value."," * '0' becomes 0, '9' becomes 9"," * 'A' becomes 10, 'F' becomes 15"," * 'a' becomes 10, 'f' becomes 15"," *"," * Returns -1 on error."," */","function char2hex(a) {","  return a >= 48 && a <= 57 ? a - 48 : // 0-9","  a >= 65 && a <= 70 ? a - 55 : // A-F","  a >= 97 && a <= 102 ? a - 87 : // a-f","  -1;","}","","/**"," * Reads an alphanumeric + underscore name from the source."," *"," * [_A-Za-z][_0-9A-Za-z]*"," */","function readName(source, position, line, col, prev) {","  var body = source.body;","  var bodyLength = body.length;","  var end = position + 1;","  var code = 0;","  while (end !== bodyLength && (code = charCodeAt.call(body, end)) !== null && (code === 95 || // _","  code >= 48 && code <= 57 || // 0-9","  code >= 65 && code <= 90 || // A-Z","  code >= 97 && code <= 122 // a-z","  )) {","    ++end;","  }","  return new Tok(NAME, position, end, line, col, prev, slice.call(body, position, end));","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"20":1,"21":0,"22":0,"31":0,"42":1,"43":0,"44":0,"45":0,"46":0,"48":0,"50":0,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"84":1,"110":1,"111":0,"112":0,"115":1,"116":1,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"133":1,"134":0,"142":1,"143":0,"160":1,"161":0,"162":0,"163":0,"165":0,"166":0,"167":0,"169":0,"170":0,"173":0,"176":0,"177":0,"180":0,"183":0,"186":0,"189":0,"192":0,"195":0,"198":0,"199":0,"201":0,"204":0,"207":0,"210":0,"213":0,"216":0,"219":0,"222":0,"225":0,"236":0,"241":0,"244":0,"247":0,"253":1,"254":0,"256":0,"259":0,"267":1,"268":0,"269":0,"270":0,"271":0,"273":0,"274":0,"275":0,"277":0,"278":0,"279":0,"280":0,"282":0,"283":0,"285":0,"287":0,"288":0,"290":0,"293":0,"301":1,"302":0,"303":0,"304":0,"306":0,"307":0,"312":0,"322":1,"323":0,"324":0,"325":0,"326":0,"328":0,"330":0,"333":0,"335":0,"336":0,"337":0,"340":0,"341":0,"344":0,"346":0,"348":0,"349":0,"350":0,"353":0,"355":0,"357":0,"358":0,"360":0,"362":0,"365":0,"371":1,"372":0,"373":0,"374":0,"375":0,"377":0,"378":0,"380":0,"382":0,"390":1,"391":0,"392":0,"393":0,"394":0,"395":0,"397":0,"403":0,"404":0,"407":0,"408":0,"410":0,"411":0,"412":0,"414":0,"416":0,"418":0,"420":0,"422":0,"424":0,"426":0,"428":0,"431":0,"432":0,"433":0,"435":0,"436":0,"437":0,"439":0,"441":0,"442":0,"446":0,"448":0,"451":0,"452":0,"465":1,"466":0,"477":1,"478":0,"489":1,"490":0,"491":0,"492":0,"493":0,"494":0,"499":0,"501":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/kinds.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/kinds.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}},"3":{"start":{"line":22,"column":0},"end":{"line":22,"column":45}},"4":{"start":{"line":23,"column":0},"end":{"line":23,"column":80}},"5":{"start":{"line":24,"column":0},"end":{"line":24,"column":77}},"6":{"start":{"line":25,"column":0},"end":{"line":25,"column":45}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":59}},"8":{"start":{"line":27,"column":0},"end":{"line":27,"column":36}},"9":{"start":{"line":28,"column":0},"end":{"line":28,"column":45}},"10":{"start":{"line":32,"column":0},"end":{"line":32,"column":65}},"11":{"start":{"line":33,"column":0},"end":{"line":33,"column":65}},"12":{"start":{"line":34,"column":0},"end":{"line":34,"column":77}},"13":{"start":{"line":38,"column":0},"end":{"line":38,"column":35}},"14":{"start":{"line":39,"column":0},"end":{"line":39,"column":41}},"15":{"start":{"line":40,"column":0},"end":{"line":40,"column":44}},"16":{"start":{"line":41,"column":0},"end":{"line":41,"column":47}},"17":{"start":{"line":42,"column":0},"end":{"line":42,"column":38}},"18":{"start":{"line":43,"column":0},"end":{"line":43,"column":38}},"19":{"start":{"line":44,"column":0},"end":{"line":44,"column":38}},"20":{"start":{"line":45,"column":0},"end":{"line":45,"column":44}},"21":{"start":{"line":46,"column":0},"end":{"line":46,"column":56}},"22":{"start":{"line":50,"column":0},"end":{"line":50,"column":48}},"23":{"start":{"line":54,"column":0},"end":{"line":54,"column":50}},"24":{"start":{"line":55,"column":0},"end":{"line":55,"column":47}},"25":{"start":{"line":56,"column":0},"end":{"line":56,"column":58}},"26":{"start":{"line":60,"column":0},"end":{"line":60,"column":71}},"27":{"start":{"line":61,"column":0},"end":{"line":61,"column":94}},"28":{"start":{"line":65,"column":0},"end":{"line":65,"column":85}},"29":{"start":{"line":66,"column":0},"end":{"line":66,"column":85}},"30":{"start":{"line":67,"column":0},"end":{"line":67,"column":68}},"31":{"start":{"line":68,"column":0},"end":{"line":68,"column":85}},"32":{"start":{"line":69,"column":0},"end":{"line":69,"column":94}},"33":{"start":{"line":70,"column":0},"end":{"line":70,"column":82}},"34":{"start":{"line":71,"column":0},"end":{"line":71,"column":79}},"35":{"start":{"line":72,"column":0},"end":{"line":72,"column":82}},"36":{"start":{"line":73,"column":0},"end":{"line":73,"column":102}},"37":{"start":{"line":77,"column":0},"end":{"line":77,"column":94}},"38":{"start":{"line":81,"column":0},"end":{"line":81,"column":80}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","// Name","","var NAME = exports.NAME = 'Name';","","// Document","","var DOCUMENT = exports.DOCUMENT = 'Document';","var OPERATION_DEFINITION = exports.OPERATION_DEFINITION = 'OperationDefinition';","var VARIABLE_DEFINITION = exports.VARIABLE_DEFINITION = 'VariableDefinition';","var VARIABLE = exports.VARIABLE = 'Variable';","var SELECTION_SET = exports.SELECTION_SET = 'SelectionSet';","var FIELD = exports.FIELD = 'Field';","var ARGUMENT = exports.ARGUMENT = 'Argument';","","// Fragments","","var FRAGMENT_SPREAD = exports.FRAGMENT_SPREAD = 'FragmentSpread';","var INLINE_FRAGMENT = exports.INLINE_FRAGMENT = 'InlineFragment';","var FRAGMENT_DEFINITION = exports.FRAGMENT_DEFINITION = 'FragmentDefinition';","","// Values","","var INT = exports.INT = 'IntValue';","var FLOAT = exports.FLOAT = 'FloatValue';","var STRING = exports.STRING = 'StringValue';","var BOOLEAN = exports.BOOLEAN = 'BooleanValue';","var NULL = exports.NULL = 'NullValue';","var ENUM = exports.ENUM = 'EnumValue';","var LIST = exports.LIST = 'ListValue';","var OBJECT = exports.OBJECT = 'ObjectValue';","var OBJECT_FIELD = exports.OBJECT_FIELD = 'ObjectField';","","// Directives","","var DIRECTIVE = exports.DIRECTIVE = 'Directive';","","// Types","","var NAMED_TYPE = exports.NAMED_TYPE = 'NamedType';","var LIST_TYPE = exports.LIST_TYPE = 'ListType';","var NON_NULL_TYPE = exports.NON_NULL_TYPE = 'NonNullType';","","// Type System Definitions","","var SCHEMA_DEFINITION = exports.SCHEMA_DEFINITION = 'SchemaDefinition';","var OPERATION_TYPE_DEFINITION = exports.OPERATION_TYPE_DEFINITION = 'OperationTypeDefinition';","","// Type Definitions","","var SCALAR_TYPE_DEFINITION = exports.SCALAR_TYPE_DEFINITION = 'ScalarTypeDefinition';","var OBJECT_TYPE_DEFINITION = exports.OBJECT_TYPE_DEFINITION = 'ObjectTypeDefinition';","var FIELD_DEFINITION = exports.FIELD_DEFINITION = 'FieldDefinition';","var INPUT_VALUE_DEFINITION = exports.INPUT_VALUE_DEFINITION = 'InputValueDefinition';","var INTERFACE_TYPE_DEFINITION = exports.INTERFACE_TYPE_DEFINITION = 'InterfaceTypeDefinition';","var UNION_TYPE_DEFINITION = exports.UNION_TYPE_DEFINITION = 'UnionTypeDefinition';","var ENUM_TYPE_DEFINITION = exports.ENUM_TYPE_DEFINITION = 'EnumTypeDefinition';","var ENUM_VALUE_DEFINITION = exports.ENUM_VALUE_DEFINITION = 'EnumValueDefinition';","var INPUT_OBJECT_TYPE_DEFINITION = exports.INPUT_OBJECT_TYPE_DEFINITION = 'InputObjectTypeDefinition';","","// Type Extensions","","var TYPE_EXTENSION_DEFINITION = exports.TYPE_EXTENSION_DEFINITION = 'TypeExtensionDefinition';","","// Directive Definitions","","var DIRECTIVE_DEFINITION = exports.DIRECTIVE_DEFINITION = 'DirectiveDefinition';"],"l":{"3":1,"18":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"32":1,"33":1,"34":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"50":1,"54":1,"55":1,"56":1,"60":1,"61":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"77":1,"81":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/validate.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/validate.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1,"26":1,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":1,"123":0,"124":1,"125":0,"126":1,"127":0,"128":1,"129":0,"130":1,"131":0,"132":1,"133":0,"134":1},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[1,0],"6":[1,1],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"f":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"fnMap":{"1":{"name":"_interopRequireWildcard","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":38}}},"2":{"name":"_interopRequireDefault","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":37}}},"3":{"name":"_classCallCheck","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":48}}},"4":{"name":"validate","line":55,"loc":{"start":{"line":55,"column":0},"end":{"line":55,"column":38}}},"5":{"name":"visitUsingRules","line":69,"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":63}}},"6":{"name":"(anonymous_6)","line":71,"loc":{"start":{"line":71,"column":27},"end":{"line":71,"column":43}}},"7":{"name":"(anonymous_7)","line":84,"loc":{"start":{"line":84,"column":52},"end":{"line":84,"column":64}}},"8":{"name":"ValidationContext","line":85,"loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":52}}},"9":{"name":"reportError","line":98,"loc":{"start":{"line":98,"column":44},"end":{"line":98,"column":72}}},"10":{"name":"getErrors","line":102,"loc":{"start":{"line":102,"column":42},"end":{"line":102,"column":63}}},"11":{"name":"getSchema","line":106,"loc":{"start":{"line":106,"column":42},"end":{"line":106,"column":63}}},"12":{"name":"getDocument","line":110,"loc":{"start":{"line":110,"column":44},"end":{"line":110,"column":67}}},"13":{"name":"getFragment","line":114,"loc":{"start":{"line":114,"column":44},"end":{"line":114,"column":71}}},"14":{"name":"(anonymous_14)","line":117,"loc":{"start":{"line":117,"column":74},"end":{"line":117,"column":102}}},"15":{"name":"getFragmentSpreads","line":127,"loc":{"start":{"line":127,"column":51},"end":{"line":127,"column":85}}},"16":{"name":"getRecursivelyReferencedFragments","line":148,"loc":{"start":{"line":148,"column":66},"end":{"line":148,"column":120}}},"17":{"name":"getVariableUsages","line":174,"loc":{"start":{"line":174,"column":50},"end":{"line":174,"column":83}}},"18":{"name":"VariableDefinition","line":180,"loc":{"start":{"line":180,"column":28},"end":{"line":180,"column":58}}},"19":{"name":"Variable","line":183,"loc":{"start":{"line":183,"column":18},"end":{"line":183,"column":46}}},"20":{"name":"getRecursiveVariableUsages","line":193,"loc":{"start":{"line":193,"column":59},"end":{"line":193,"column":106}}},"21":{"name":"getType","line":206,"loc":{"start":{"line":206,"column":40},"end":{"line":206,"column":59}}},"22":{"name":"getParentType","line":210,"loc":{"start":{"line":210,"column":46},"end":{"line":210,"column":71}}},"23":{"name":"getInputType","line":214,"loc":{"start":{"line":214,"column":45},"end":{"line":214,"column":69}}},"24":{"name":"getFieldDef","line":218,"loc":{"start":{"line":218,"column":44},"end":{"line":218,"column":67}}},"25":{"name":"getDirective","line":222,"loc":{"start":{"line":222,"column":45},"end":{"line":222,"column":69}}},"26":{"name":"getArgument","line":226,"loc":{"start":{"line":226,"column":44},"end":{"line":226,"column":67}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":38}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":28}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":33}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":46}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":42}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":43}},"11":{"start":{"line":22,"column":0},"end":{"line":22,"column":40}},"12":{"start":{"line":24,"column":0},"end":{"line":24,"column":49}},"13":{"start":{"line":26,"column":0},"end":{"line":26,"column":50}},"14":{"start":{"line":28,"column":0},"end":{"line":28,"column":269}},"15":{"start":{"line":28,"column":40},"end":{"line":28,"column":267}},"16":{"start":{"line":28,"column":69},"end":{"line":28,"column":80}},"17":{"start":{"line":28,"column":90},"end":{"line":28,"column":106}},"18":{"start":{"line":28,"column":107},"end":{"line":28,"column":228}},"19":{"start":{"line":28,"column":126},"end":{"line":28,"column":226}},"20":{"start":{"line":28,"column":149},"end":{"line":28,"column":224}},"21":{"start":{"line":28,"column":201},"end":{"line":28,"column":224}},"22":{"start":{"line":28,"column":229},"end":{"line":28,"column":250}},"23":{"start":{"line":28,"column":251},"end":{"line":28,"column":265}},"24":{"start":{"line":30,"column":0},"end":{"line":30,"column":97}},"25":{"start":{"line":30,"column":39},"end":{"line":30,"column":95}},"26":{"start":{"line":32,"column":0},"end":{"line":32,"column":153}},"27":{"start":{"line":32,"column":50},"end":{"line":32,"column":151}},"28":{"start":{"line":32,"column":92},"end":{"line":32,"column":149}},"29":{"start":{"line":55,"column":0},"end":{"line":61,"column":1}},"30":{"start":{"line":56,"column":2},"end":{"line":56,"column":58}},"31":{"start":{"line":57,"column":2},"end":{"line":57,"column":57}},"32":{"start":{"line":58,"column":2},"end":{"line":58,"column":223}},"33":{"start":{"line":59,"column":2},"end":{"line":59,"column":48}},"34":{"start":{"line":60,"column":2},"end":{"line":60,"column":89}},"35":{"start":{"line":69,"column":0},"end":{"line":77,"column":1}},"36":{"start":{"line":70,"column":2},"end":{"line":70,"column":69}},"37":{"start":{"line":71,"column":2},"end":{"line":73,"column":5}},"38":{"start":{"line":72,"column":4},"end":{"line":72,"column":25}},"39":{"start":{"line":75,"column":2},"end":{"line":75,"column":119}},"40":{"start":{"line":76,"column":2},"end":{"line":76,"column":29}},"41":{"start":{"line":84,"column":0},"end":{"line":231,"column":4}},"42":{"start":{"line":85,"column":2},"end":{"line":96,"column":3}},"43":{"start":{"line":86,"column":4},"end":{"line":86,"column":45}},"44":{"start":{"line":88,"column":4},"end":{"line":88,"column":26}},"45":{"start":{"line":89,"column":4},"end":{"line":89,"column":20}},"46":{"start":{"line":90,"column":4},"end":{"line":90,"column":30}},"47":{"start":{"line":91,"column":4},"end":{"line":91,"column":22}},"48":{"start":{"line":92,"column":4},"end":{"line":92,"column":38}},"49":{"start":{"line":93,"column":4},"end":{"line":93,"column":53}},"50":{"start":{"line":94,"column":4},"end":{"line":94,"column":37}},"51":{"start":{"line":95,"column":4},"end":{"line":95,"column":46}},"52":{"start":{"line":98,"column":2},"end":{"line":100,"column":4}},"53":{"start":{"line":99,"column":4},"end":{"line":99,"column":29}},"54":{"start":{"line":102,"column":2},"end":{"line":104,"column":4}},"55":{"start":{"line":103,"column":4},"end":{"line":103,"column":24}},"56":{"start":{"line":106,"column":2},"end":{"line":108,"column":4}},"57":{"start":{"line":107,"column":4},"end":{"line":107,"column":24}},"58":{"start":{"line":110,"column":2},"end":{"line":112,"column":4}},"59":{"start":{"line":111,"column":4},"end":{"line":111,"column":21}},"60":{"start":{"line":114,"column":2},"end":{"line":125,"column":4}},"61":{"start":{"line":115,"column":4},"end":{"line":115,"column":36}},"62":{"start":{"line":116,"column":4},"end":{"line":123,"column":5}},"63":{"start":{"line":117,"column":6},"end":{"line":122,"column":13}},"64":{"start":{"line":118,"column":8},"end":{"line":120,"column":9}},"65":{"start":{"line":119,"column":10},"end":{"line":119,"column":50}},"66":{"start":{"line":121,"column":8},"end":{"line":121,"column":21}},"67":{"start":{"line":124,"column":4},"end":{"line":124,"column":27}},"68":{"start":{"line":127,"column":2},"end":{"line":146,"column":4}},"69":{"start":{"line":128,"column":4},"end":{"line":128,"column":50}},"70":{"start":{"line":129,"column":4},"end":{"line":144,"column":5}},"71":{"start":{"line":130,"column":6},"end":{"line":130,"column":19}},"72":{"start":{"line":131,"column":6},"end":{"line":131,"column":31}},"73":{"start":{"line":132,"column":6},"end":{"line":142,"column":7}},"74":{"start":{"line":133,"column":8},"end":{"line":133,"column":36}},"75":{"start":{"line":134,"column":8},"end":{"line":141,"column":9}},"76":{"start":{"line":135,"column":10},"end":{"line":135,"column":44}},"77":{"start":{"line":136,"column":10},"end":{"line":140,"column":11}},"78":{"start":{"line":137,"column":12},"end":{"line":137,"column":36}},"79":{"start":{"line":138,"column":17},"end":{"line":140,"column":11}},"80":{"start":{"line":139,"column":12},"end":{"line":139,"column":53}},"81":{"start":{"line":143,"column":6},"end":{"line":143,"column":47}},"82":{"start":{"line":145,"column":4},"end":{"line":145,"column":19}},"83":{"start":{"line":148,"column":2},"end":{"line":172,"column":4}},"84":{"start":{"line":149,"column":4},"end":{"line":149,"column":72}},"85":{"start":{"line":150,"column":4},"end":{"line":170,"column":5}},"86":{"start":{"line":151,"column":6},"end":{"line":151,"column":21}},"87":{"start":{"line":152,"column":6},"end":{"line":152,"column":47}},"88":{"start":{"line":153,"column":6},"end":{"line":153,"column":50}},"89":{"start":{"line":154,"column":6},"end":{"line":168,"column":7}},"90":{"start":{"line":155,"column":8},"end":{"line":155,"column":39}},"91":{"start":{"line":156,"column":8},"end":{"line":156,"column":53}},"92":{"start":{"line":157,"column":8},"end":{"line":167,"column":9}},"93":{"start":{"line":158,"column":10},"end":{"line":158,"column":47}},"94":{"start":{"line":159,"column":10},"end":{"line":166,"column":11}},"95":{"start":{"line":160,"column":12},"end":{"line":160,"column":44}},"96":{"start":{"line":161,"column":12},"end":{"line":161,"column":54}},"97":{"start":{"line":162,"column":12},"end":{"line":165,"column":13}},"98":{"start":{"line":163,"column":14},"end":{"line":163,"column":39}},"99":{"start":{"line":164,"column":14},"end":{"line":164,"column":55}},"100":{"start":{"line":169,"column":6},"end":{"line":169,"column":69}},"101":{"start":{"line":171,"column":4},"end":{"line":171,"column":21}},"102":{"start":{"line":174,"column":2},"end":{"line":191,"column":4}},"103":{"start":{"line":175,"column":4},"end":{"line":175,"column":48}},"104":{"start":{"line":176,"column":4},"end":{"line":189,"column":5}},"105":{"start":{"line":177,"column":6},"end":{"line":177,"column":25}},"106":{"start":{"line":178,"column":6},"end":{"line":178,"column":58}},"107":{"start":{"line":179,"column":6},"end":{"line":186,"column":10}},"108":{"start":{"line":181,"column":10},"end":{"line":181,"column":23}},"109":{"start":{"line":184,"column":10},"end":{"line":184,"column":76}},"110":{"start":{"line":187,"column":6},"end":{"line":187,"column":25}},"111":{"start":{"line":188,"column":6},"end":{"line":188,"column":45}},"112":{"start":{"line":190,"column":4},"end":{"line":190,"column":18}},"113":{"start":{"line":193,"column":2},"end":{"line":204,"column":4}},"114":{"start":{"line":194,"column":4},"end":{"line":194,"column":62}},"115":{"start":{"line":195,"column":4},"end":{"line":202,"column":5}},"116":{"start":{"line":196,"column":6},"end":{"line":196,"column":49}},"117":{"start":{"line":197,"column":6},"end":{"line":197,"column":72}},"118":{"start":{"line":198,"column":6},"end":{"line":200,"column":7}},"119":{"start":{"line":199,"column":8},"end":{"line":199,"column":81}},"120":{"start":{"line":201,"column":6},"end":{"line":201,"column":59}},"121":{"start":{"line":203,"column":4},"end":{"line":203,"column":18}},"122":{"start":{"line":206,"column":2},"end":{"line":208,"column":4}},"123":{"start":{"line":207,"column":4},"end":{"line":207,"column":36}},"124":{"start":{"line":210,"column":2},"end":{"line":212,"column":4}},"125":{"start":{"line":211,"column":4},"end":{"line":211,"column":42}},"126":{"start":{"line":214,"column":2},"end":{"line":216,"column":4}},"127":{"start":{"line":215,"column":4},"end":{"line":215,"column":41}},"128":{"start":{"line":218,"column":2},"end":{"line":220,"column":4}},"129":{"start":{"line":219,"column":4},"end":{"line":219,"column":40}},"130":{"start":{"line":222,"column":2},"end":{"line":224,"column":4}},"131":{"start":{"line":223,"column":4},"end":{"line":223,"column":41}},"132":{"start":{"line":226,"column":2},"end":{"line":228,"column":4}},"133":{"start":{"line":227,"column":4},"end":{"line":227,"column":40}},"134":{"start":{"line":230,"column":2},"end":{"line":230,"column":27}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":40},"end":{"line":28,"column":40}},{"start":{"line":28,"column":40},"end":{"line":28,"column":40}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":44},"end":{"line":28,"column":47}},{"start":{"line":28,"column":51},"end":{"line":28,"column":65}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":107},"end":{"line":28,"column":107}},{"start":{"line":28,"column":107},"end":{"line":28,"column":107}}]},"4":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":149},"end":{"line":28,"column":149}},{"start":{"line":28,"column":149},"end":{"line":28,"column":149}}]},"5":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":70},"end":{"line":30,"column":73}},{"start":{"line":30,"column":76},"end":{"line":30,"column":94}}]},"6":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":46},"end":{"line":30,"column":49}},{"start":{"line":30,"column":53},"end":{"line":30,"column":67}}]},"7":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":50},"end":{"line":32,"column":50}},{"start":{"line":32,"column":50},"end":{"line":32,"column":50}}]},"8":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":48},"end":{"line":60,"column":53}},{"start":{"line":60,"column":57},"end":{"line":60,"column":87}}]},"9":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"10":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":8},"end":{"line":118,"column":8}},{"start":{"line":118,"column":8},"end":{"line":118,"column":8}}]},"11":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":4},"end":{"line":129,"column":4}},{"start":{"line":129,"column":4},"end":{"line":129,"column":4}}]},"12":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":10},"end":{"line":136,"column":10}},{"start":{"line":136,"column":10},"end":{"line":136,"column":10}}]},"13":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":17},"end":{"line":138,"column":17}},{"start":{"line":138,"column":17},"end":{"line":138,"column":17}}]},"14":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":4},"end":{"line":150,"column":4}},{"start":{"line":150,"column":4},"end":{"line":150,"column":4}}]},"15":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":10},"end":{"line":159,"column":10}},{"start":{"line":159,"column":10},"end":{"line":159,"column":10}}]},"16":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":12},"end":{"line":162,"column":12}},{"start":{"line":162,"column":12},"end":{"line":162,"column":12}}]},"17":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":176,"column":4}},{"start":{"line":176,"column":4},"end":{"line":176,"column":4}}]},"18":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":195,"column":4}},{"start":{"line":195,"column":4},"end":{"line":195,"column":4}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.ValidationContext = undefined;","exports.validate = validate;","exports.visitUsingRules = visitUsingRules;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _error = require('../error');","","var _visitor = require('../language/visitor');","","var _kinds = require('../language/kinds');","","var Kind = _interopRequireWildcard(_kinds);","","var _schema = require('../type/schema');","","var _TypeInfo = require('../utilities/TypeInfo');","","var _specifiedRules = require('./specifiedRules');","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Implements the \"Validation\" section of the spec."," *"," * Validation runs synchronously, returning an array of encountered errors, or"," * an empty array if no errors were encountered and the document is valid."," *"," * A list of specific validation rules may be provided. If not provided, the"," * default list of rules defined by the GraphQL specification will be used."," *"," * Each validation rules is a function which returns a visitor"," * (see the language/visitor API). Visitor methods are expected to return"," * GraphQLErrors, or Arrays of GraphQLErrors when invalid."," */","function validate(schema, ast, rules) {","  (0, _invariant2.default)(schema, 'Must provide schema');","  (0, _invariant2.default)(ast, 'Must provide document');","  (0, _invariant2.default)(schema instanceof _schema.GraphQLSchema, 'Schema must be an instance of GraphQLSchema. Also ensure that there are ' + 'not multiple versions of GraphQL installed in your node_modules directory.');","  var typeInfo = new _TypeInfo.TypeInfo(schema);","  return visitUsingRules(schema, typeInfo, ast, rules || _specifiedRules.specifiedRules);","}","","/**"," * This uses a specialized visitor which runs multiple visitors in parallel,"," * while maintaining the visitor skip and break API."," *"," * @internal"," */","function visitUsingRules(schema, typeInfo, documentAST, rules) {","  var context = new ValidationContext(schema, documentAST, typeInfo);","  var visitors = rules.map(function (rule) {","    return rule(context);","  });","  // Visit the whole document with each instance of all provided rules.","  (0, _visitor.visit)(documentAST, (0, _visitor.visitWithTypeInfo)(typeInfo, (0, _visitor.visitInParallel)(visitors)));","  return context.getErrors();","}","","/**"," * An instance of this class is passed as the \"this\" context to all validators,"," * allowing access to commonly useful contextual information from within a"," * validation rule."," */","var ValidationContext = exports.ValidationContext = function () {","  function ValidationContext(schema, ast, typeInfo) {","    _classCallCheck(this, ValidationContext);","","    this._schema = schema;","    this._ast = ast;","    this._typeInfo = typeInfo;","    this._errors = [];","    this._fragmentSpreads = new Map();","    this._recursivelyReferencedFragments = new Map();","    this._variableUsages = new Map();","    this._recursiveVariableUsages = new Map();","  }","","  ValidationContext.prototype.reportError = function reportError(error) {","    this._errors.push(error);","  };","","  ValidationContext.prototype.getErrors = function getErrors() {","    return this._errors;","  };","","  ValidationContext.prototype.getSchema = function getSchema() {","    return this._schema;","  };","","  ValidationContext.prototype.getDocument = function getDocument() {","    return this._ast;","  };","","  ValidationContext.prototype.getFragment = function getFragment(name) {","    var fragments = this._fragments;","    if (!fragments) {","      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {","        if (statement.kind === Kind.FRAGMENT_DEFINITION) {","          frags[statement.name.value] = statement;","        }","        return frags;","      }, {});","    }","    return fragments[name];","  };","","  ValidationContext.prototype.getFragmentSpreads = function getFragmentSpreads(node) {","    var spreads = this._fragmentSpreads.get(node);","    if (!spreads) {","      spreads = [];","      var setsToVisit = [node];","      while (setsToVisit.length !== 0) {","        var set = setsToVisit.pop();","        for (var i = 0; i < set.selections.length; i++) {","          var selection = set.selections[i];","          if (selection.kind === Kind.FRAGMENT_SPREAD) {","            spreads.push(selection);","          } else if (selection.selectionSet) {","            setsToVisit.push(selection.selectionSet);","          }","        }","      }","      this._fragmentSpreads.set(node, spreads);","    }","    return spreads;","  };","","  ValidationContext.prototype.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {","    var fragments = this._recursivelyReferencedFragments.get(operation);","    if (!fragments) {","      fragments = [];","      var collectedNames = Object.create(null);","      var nodesToVisit = [operation.selectionSet];","      while (nodesToVisit.length !== 0) {","        var _node = nodesToVisit.pop();","        var spreads = this.getFragmentSpreads(_node);","        for (var i = 0; i < spreads.length; i++) {","          var fragName = spreads[i].name.value;","          if (collectedNames[fragName] !== true) {","            collectedNames[fragName] = true;","            var fragment = this.getFragment(fragName);","            if (fragment) {","              fragments.push(fragment);","              nodesToVisit.push(fragment.selectionSet);","            }","          }","        }","      }","      this._recursivelyReferencedFragments.set(operation, fragments);","    }","    return fragments;","  };","","  ValidationContext.prototype.getVariableUsages = function getVariableUsages(node) {","    var usages = this._variableUsages.get(node);","    if (!usages) {","      var newUsages = [];","      var typeInfo = new _TypeInfo.TypeInfo(this._schema);","      (0, _visitor.visit)(node, (0, _visitor.visitWithTypeInfo)(typeInfo, {","        VariableDefinition: function VariableDefinition() {","          return false;","        },","        Variable: function Variable(variable) {","          newUsages.push({ node: variable, type: typeInfo.getInputType() });","        }","      }));","      usages = newUsages;","      this._variableUsages.set(node, usages);","    }","    return usages;","  };","","  ValidationContext.prototype.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {","    var usages = this._recursiveVariableUsages.get(operation);","    if (!usages) {","      usages = this.getVariableUsages(operation);","      var fragments = this.getRecursivelyReferencedFragments(operation);","      for (var i = 0; i < fragments.length; i++) {","        Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));","      }","      this._recursiveVariableUsages.set(operation, usages);","    }","    return usages;","  };","","  ValidationContext.prototype.getType = function getType() {","    return this._typeInfo.getType();","  };","","  ValidationContext.prototype.getParentType = function getParentType() {","    return this._typeInfo.getParentType();","  };","","  ValidationContext.prototype.getInputType = function getInputType() {","    return this._typeInfo.getInputType();","  };","","  ValidationContext.prototype.getFieldDef = function getFieldDef() {","    return this._typeInfo.getFieldDef();","  };","","  ValidationContext.prototype.getDirective = function getDirective() {","    return this._typeInfo.getDirective();","  };","","  ValidationContext.prototype.getArgument = function getArgument() {","    return this._typeInfo.getArgument();","  };","","  return ValidationContext;","}();"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":1,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"69":1,"70":0,"71":0,"72":0,"75":0,"76":0,"84":1,"85":1,"86":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"98":1,"99":0,"102":1,"103":0,"106":1,"107":0,"110":1,"111":0,"114":1,"115":0,"116":0,"117":0,"118":0,"119":0,"121":0,"124":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"143":0,"145":0,"148":1,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"169":0,"171":0,"174":1,"175":0,"176":0,"177":0,"178":0,"179":0,"181":0,"184":0,"187":0,"188":0,"190":0,"193":1,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"201":0,"203":0,"206":1,"207":0,"210":1,"211":0,"214":1,"215":0,"218":1,"219":0,"222":1,"223":0,"226":1,"227":0,"230":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/visitor.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/visitor.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":1,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":1,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"visit","line":155,"loc":{"start":{"line":155,"column":0},"end":{"line":155,"column":38}}},"2":{"name":"isNode","line":277,"loc":{"start":{"line":277,"column":0},"end":{"line":277,"column":27}}},"3":{"name":"visitInParallel","line":287,"loc":{"start":{"line":287,"column":0},"end":{"line":287,"column":35}}},"4":{"name":"enter","line":291,"loc":{"start":{"line":291,"column":11},"end":{"line":291,"column":32}}},"5":{"name":"leave","line":308,"loc":{"start":{"line":308,"column":11},"end":{"line":308,"column":32}}},"6":{"name":"visitWithTypeInfo","line":332,"loc":{"start":{"line":332,"column":0},"end":{"line":332,"column":46}}},"7":{"name":"enter","line":334,"loc":{"start":{"line":334,"column":11},"end":{"line":334,"column":32}}},"8":{"name":"leave","line":348,"loc":{"start":{"line":348,"column":11},"end":{"line":348,"column":32}}},"9":{"name":"getVisitFn","line":364,"loc":{"start":{"line":364,"column":0},"end":{"line":364,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":22}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"5":{"start":{"line":18,"column":0},"end":{"line":65,"column":2}},"6":{"start":{"line":67,"column":0},"end":{"line":67,"column":31}},"7":{"start":{"line":155,"column":0},"end":{"line":275,"column":1}},"8":{"start":{"line":156,"column":2},"end":{"line":156,"column":48}},"9":{"start":{"line":158,"column":2},"end":{"line":158,"column":21}},"10":{"start":{"line":159,"column":2},"end":{"line":159,"column":36}},"11":{"start":{"line":160,"column":2},"end":{"line":160,"column":20}},"12":{"start":{"line":161,"column":2},"end":{"line":161,"column":17}},"13":{"start":{"line":162,"column":2},"end":{"line":162,"column":17}},"14":{"start":{"line":163,"column":2},"end":{"line":163,"column":22}},"15":{"start":{"line":164,"column":2},"end":{"line":164,"column":16}},"16":{"start":{"line":165,"column":2},"end":{"line":165,"column":21}},"17":{"start":{"line":166,"column":2},"end":{"line":166,"column":21}},"18":{"start":{"line":168,"column":2},"end":{"line":268,"column":32}},"19":{"start":{"line":169,"column":4},"end":{"line":169,"column":12}},"20":{"start":{"line":170,"column":4},"end":{"line":170,"column":42}},"21":{"start":{"line":171,"column":4},"end":{"line":171,"column":21}},"22":{"start":{"line":172,"column":4},"end":{"line":172,"column":22}},"23":{"start":{"line":173,"column":4},"end":{"line":173,"column":51}},"24":{"start":{"line":174,"column":4},"end":{"line":219,"column":5}},"25":{"start":{"line":175,"column":6},"end":{"line":175,"column":60}},"26":{"start":{"line":176,"column":6},"end":{"line":176,"column":20}},"27":{"start":{"line":177,"column":6},"end":{"line":177,"column":31}},"28":{"start":{"line":178,"column":6},"end":{"line":204,"column":7}},"29":{"start":{"line":179,"column":8},"end":{"line":189,"column":9}},"30":{"start":{"line":180,"column":10},"end":{"line":180,"column":30}},"31":{"start":{"line":182,"column":10},"end":{"line":182,"column":25}},"32":{"start":{"line":183,"column":10},"end":{"line":187,"column":11}},"33":{"start":{"line":184,"column":12},"end":{"line":186,"column":13}},"34":{"start":{"line":185,"column":14},"end":{"line":185,"column":33}},"35":{"start":{"line":188,"column":10},"end":{"line":188,"column":23}},"36":{"start":{"line":190,"column":8},"end":{"line":190,"column":27}},"37":{"start":{"line":191,"column":8},"end":{"line":203,"column":9}},"38":{"start":{"line":192,"column":10},"end":{"line":192,"column":37}},"39":{"start":{"line":193,"column":10},"end":{"line":193,"column":39}},"40":{"start":{"line":194,"column":10},"end":{"line":196,"column":11}},"41":{"start":{"line":195,"column":12},"end":{"line":195,"column":34}},"42":{"start":{"line":197,"column":10},"end":{"line":202,"column":11}},"43":{"start":{"line":198,"column":12},"end":{"line":198,"column":36}},"44":{"start":{"line":199,"column":12},"end":{"line":199,"column":25}},"45":{"start":{"line":201,"column":12},"end":{"line":201,"column":38}},"46":{"start":{"line":205,"column":6},"end":{"line":205,"column":26}},"47":{"start":{"line":206,"column":6},"end":{"line":206,"column":24}},"48":{"start":{"line":207,"column":6},"end":{"line":207,"column":26}},"49":{"start":{"line":208,"column":6},"end":{"line":208,"column":30}},"50":{"start":{"line":209,"column":6},"end":{"line":209,"column":25}},"51":{"start":{"line":211,"column":6},"end":{"line":211,"column":63}},"52":{"start":{"line":212,"column":6},"end":{"line":212,"column":44}},"53":{"start":{"line":213,"column":6},"end":{"line":215,"column":7}},"54":{"start":{"line":214,"column":8},"end":{"line":214,"column":17}},"55":{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},"56":{"start":{"line":217,"column":8},"end":{"line":217,"column":23}},"57":{"start":{"line":221,"column":4},"end":{"line":221,"column":24}},"58":{"start":{"line":222,"column":4},"end":{"line":251,"column":5}},"59":{"start":{"line":223,"column":6},"end":{"line":225,"column":7}},"60":{"start":{"line":224,"column":8},"end":{"line":224,"column":69}},"61":{"start":{"line":226,"column":6},"end":{"line":226,"column":62}},"62":{"start":{"line":227,"column":6},"end":{"line":250,"column":7}},"63":{"start":{"line":228,"column":8},"end":{"line":228,"column":75}},"64":{"start":{"line":230,"column":8},"end":{"line":232,"column":9}},"65":{"start":{"line":231,"column":10},"end":{"line":231,"column":16}},"66":{"start":{"line":234,"column":8},"end":{"line":249,"column":9}},"67":{"start":{"line":235,"column":10},"end":{"line":238,"column":11}},"68":{"start":{"line":236,"column":12},"end":{"line":236,"column":23}},"69":{"start":{"line":237,"column":12},"end":{"line":237,"column":21}},"70":{"start":{"line":239,"column":15},"end":{"line":249,"column":9}},"71":{"start":{"line":240,"column":10},"end":{"line":240,"column":36}},"72":{"start":{"line":241,"column":10},"end":{"line":248,"column":11}},"73":{"start":{"line":242,"column":12},"end":{"line":247,"column":13}},"74":{"start":{"line":243,"column":14},"end":{"line":243,"column":28}},"75":{"start":{"line":245,"column":14},"end":{"line":245,"column":25}},"76":{"start":{"line":246,"column":14},"end":{"line":246,"column":23}},"77":{"start":{"line":253,"column":4},"end":{"line":255,"column":5}},"78":{"start":{"line":254,"column":6},"end":{"line":254,"column":30}},"79":{"start":{"line":257,"column":4},"end":{"line":267,"column":5}},"80":{"start":{"line":258,"column":6},"end":{"line":258,"column":88}},"81":{"start":{"line":259,"column":6},"end":{"line":259,"column":36}},"82":{"start":{"line":260,"column":6},"end":{"line":260,"column":59}},"83":{"start":{"line":261,"column":6},"end":{"line":261,"column":17}},"84":{"start":{"line":262,"column":6},"end":{"line":262,"column":17}},"85":{"start":{"line":263,"column":6},"end":{"line":265,"column":7}},"86":{"start":{"line":264,"column":8},"end":{"line":264,"column":31}},"87":{"start":{"line":266,"column":6},"end":{"line":266,"column":20}},"88":{"start":{"line":270,"column":2},"end":{"line":272,"column":3}},"89":{"start":{"line":271,"column":4},"end":{"line":271,"column":41}},"90":{"start":{"line":274,"column":2},"end":{"line":274,"column":17}},"91":{"start":{"line":277,"column":0},"end":{"line":279,"column":1}},"92":{"start":{"line":278,"column":2},"end":{"line":278,"column":57}},"93":{"start":{"line":287,"column":0},"end":{"line":326,"column":1}},"94":{"start":{"line":288,"column":2},"end":{"line":288,"column":44}},"95":{"start":{"line":290,"column":2},"end":{"line":325,"column":4}},"96":{"start":{"line":292,"column":6},"end":{"line":306,"column":7}},"97":{"start":{"line":293,"column":8},"end":{"line":305,"column":9}},"98":{"start":{"line":294,"column":10},"end":{"line":294,"column":76}},"99":{"start":{"line":295,"column":10},"end":{"line":304,"column":11}},"100":{"start":{"line":296,"column":12},"end":{"line":296,"column":58}},"101":{"start":{"line":297,"column":12},"end":{"line":303,"column":13}},"102":{"start":{"line":298,"column":14},"end":{"line":298,"column":33}},"103":{"start":{"line":299,"column":19},"end":{"line":303,"column":13}},"104":{"start":{"line":300,"column":14},"end":{"line":300,"column":34}},"105":{"start":{"line":301,"column":19},"end":{"line":303,"column":13}},"106":{"start":{"line":302,"column":14},"end":{"line":302,"column":28}},"107":{"start":{"line":309,"column":6},"end":{"line":323,"column":7}},"108":{"start":{"line":310,"column":8},"end":{"line":322,"column":9}},"109":{"start":{"line":311,"column":10},"end":{"line":311,"column":75}},"110":{"start":{"line":312,"column":10},"end":{"line":319,"column":11}},"111":{"start":{"line":313,"column":12},"end":{"line":313,"column":58}},"112":{"start":{"line":314,"column":12},"end":{"line":318,"column":13}},"113":{"start":{"line":315,"column":14},"end":{"line":315,"column":34}},"114":{"start":{"line":316,"column":19},"end":{"line":318,"column":13}},"115":{"start":{"line":317,"column":14},"end":{"line":317,"column":28}},"116":{"start":{"line":320,"column":15},"end":{"line":322,"column":9}},"117":{"start":{"line":321,"column":10},"end":{"line":321,"column":29}},"118":{"start":{"line":332,"column":0},"end":{"line":358,"column":1}},"119":{"start":{"line":333,"column":2},"end":{"line":357,"column":4}},"120":{"start":{"line":335,"column":6},"end":{"line":335,"column":27}},"121":{"start":{"line":336,"column":6},"end":{"line":336,"column":68}},"122":{"start":{"line":337,"column":6},"end":{"line":346,"column":7}},"123":{"start":{"line":338,"column":8},"end":{"line":338,"column":50}},"124":{"start":{"line":339,"column":8},"end":{"line":344,"column":9}},"125":{"start":{"line":340,"column":10},"end":{"line":340,"column":31}},"126":{"start":{"line":341,"column":10},"end":{"line":343,"column":11}},"127":{"start":{"line":342,"column":12},"end":{"line":342,"column":35}},"128":{"start":{"line":345,"column":8},"end":{"line":345,"column":22}},"129":{"start":{"line":349,"column":6},"end":{"line":349,"column":67}},"130":{"start":{"line":350,"column":6},"end":{"line":350,"column":26}},"131":{"start":{"line":351,"column":6},"end":{"line":353,"column":7}},"132":{"start":{"line":352,"column":8},"end":{"line":352,"column":46}},"133":{"start":{"line":354,"column":6},"end":{"line":354,"column":27}},"134":{"start":{"line":355,"column":6},"end":{"line":355,"column":20}},"135":{"start":{"line":364,"column":0},"end":{"line":390,"column":1}},"136":{"start":{"line":365,"column":2},"end":{"line":365,"column":34}},"137":{"start":{"line":366,"column":2},"end":{"line":389,"column":3}},"138":{"start":{"line":367,"column":4},"end":{"line":370,"column":5}},"139":{"start":{"line":369,"column":6},"end":{"line":369,"column":25}},"140":{"start":{"line":371,"column":4},"end":{"line":371,"column":80}},"141":{"start":{"line":372,"column":4},"end":{"line":375,"column":5}},"142":{"start":{"line":374,"column":6},"end":{"line":374,"column":33}},"143":{"start":{"line":377,"column":4},"end":{"line":377,"column":68}},"144":{"start":{"line":378,"column":4},"end":{"line":388,"column":5}},"145":{"start":{"line":379,"column":6},"end":{"line":382,"column":7}},"146":{"start":{"line":381,"column":8},"end":{"line":381,"column":31}},"147":{"start":{"line":383,"column":6},"end":{"line":383,"column":54}},"148":{"start":{"line":384,"column":6},"end":{"line":387,"column":7}},"149":{"start":{"line":386,"column":8},"end":{"line":386,"column":35}}},"branchMap":{"1":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":20},"end":{"line":156,"column":26}},{"start":{"line":156,"column":30},"end":{"line":156,"column":47}}]},"2":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":19},"end":{"line":173,"column":28}},{"start":{"line":173,"column":32},"end":{"line":173,"column":50}}]},"3":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":174,"column":4}},{"start":{"line":174,"column":4},"end":{"line":174,"column":4}}]},"4":{"line":175,"type":"cond-expr","locations":[{"start":{"line":175,"column":37},"end":{"line":175,"column":46}},{"start":{"line":175,"column":49},"end":{"line":175,"column":59}}]},"5":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":6},"end":{"line":178,"column":6}},{"start":{"line":178,"column":6},"end":{"line":178,"column":6}}]},"6":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":179,"column":8}},{"start":{"line":179,"column":8},"end":{"line":179,"column":8}}]},"7":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":12},"end":{"line":184,"column":12}},{"start":{"line":184,"column":12},"end":{"line":184,"column":12}}]},"8":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":10},"end":{"line":194,"column":10}},{"start":{"line":194,"column":10},"end":{"line":194,"column":10}}]},"9":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":10},"end":{"line":197,"column":10}},{"start":{"line":197,"column":10},"end":{"line":197,"column":10}}]},"10":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":14},"end":{"line":197,"column":21}},{"start":{"line":197,"column":25},"end":{"line":197,"column":43}}]},"11":{"line":211,"type":"cond-expr","locations":[{"start":{"line":211,"column":21},"end":{"line":211,"column":50}},{"start":{"line":211,"column":53},"end":{"line":211,"column":62}}]},"12":{"line":211,"type":"cond-expr","locations":[{"start":{"line":211,"column":31},"end":{"line":211,"column":36}},{"start":{"line":211,"column":39},"end":{"line":211,"column":50}}]},"13":{"line":212,"type":"cond-expr","locations":[{"start":{"line":212,"column":22},"end":{"line":212,"column":33}},{"start":{"line":212,"column":36},"end":{"line":212,"column":43}}]},"14":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":6},"end":{"line":213,"column":6}},{"start":{"line":213,"column":6},"end":{"line":213,"column":6}}]},"15":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":10},"end":{"line":213,"column":23}},{"start":{"line":213,"column":27},"end":{"line":213,"column":45}}]},"16":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":6},"end":{"line":216,"column":6}},{"start":{"line":216,"column":6},"end":{"line":216,"column":6}}]},"17":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":222,"column":4}},{"start":{"line":222,"column":4},"end":{"line":222,"column":4}}]},"18":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":6},"end":{"line":223,"column":6}},{"start":{"line":223,"column":6},"end":{"line":223,"column":6}}]},"19":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":6},"end":{"line":227,"column":6}},{"start":{"line":227,"column":6},"end":{"line":227,"column":6}}]},"20":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":8},"end":{"line":230,"column":8}},{"start":{"line":230,"column":8},"end":{"line":230,"column":8}}]},"21":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":8},"end":{"line":234,"column":8}},{"start":{"line":234,"column":8},"end":{"line":234,"column":8}}]},"22":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":10},"end":{"line":235,"column":10}},{"start":{"line":235,"column":10},"end":{"line":235,"column":10}}]},"23":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":15},"end":{"line":239,"column":15}},{"start":{"line":239,"column":15},"end":{"line":239,"column":15}}]},"24":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":10},"end":{"line":241,"column":10}},{"start":{"line":241,"column":10},"end":{"line":241,"column":10}}]},"25":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":12},"end":{"line":242,"column":12}},{"start":{"line":242,"column":12},"end":{"line":242,"column":12}}]},"26":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":4},"end":{"line":253,"column":4}},{"start":{"line":253,"column":4},"end":{"line":253,"column":4}}]},"27":{"line":253,"type":"binary-expr","locations":[{"start":{"line":253,"column":8},"end":{"line":253,"column":28}},{"start":{"line":253,"column":32},"end":{"line":253,"column":40}}]},"28":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":4},"end":{"line":257,"column":4}},{"start":{"line":257,"column":4},"end":{"line":257,"column":4}}]},"29":{"line":260,"type":"cond-expr","locations":[{"start":{"line":260,"column":23},"end":{"line":260,"column":27}},{"start":{"line":260,"column":30},"end":{"line":260,"column":58}}]},"30":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":30},"end":{"line":260,"column":52}},{"start":{"line":260,"column":56},"end":{"line":260,"column":58}}]},"31":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":6},"end":{"line":263,"column":6}},{"start":{"line":263,"column":6},"end":{"line":263,"column":6}}]},"32":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":2},"end":{"line":270,"column":2}},{"start":{"line":270,"column":2},"end":{"line":270,"column":2}}]},"33":{"line":278,"type":"binary-expr","locations":[{"start":{"line":278,"column":9},"end":{"line":278,"column":18}},{"start":{"line":278,"column":22},"end":{"line":278,"column":56}}]},"34":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":8},"end":{"line":293,"column":8}},{"start":{"line":293,"column":8},"end":{"line":293,"column":8}}]},"35":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":10},"end":{"line":295,"column":10}},{"start":{"line":295,"column":10},"end":{"line":295,"column":10}}]},"36":{"line":297,"type":"if","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":12}},{"start":{"line":297,"column":12},"end":{"line":297,"column":12}}]},"37":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":19},"end":{"line":299,"column":19}},{"start":{"line":299,"column":19},"end":{"line":299,"column":19}}]},"38":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":19},"end":{"line":301,"column":19}},{"start":{"line":301,"column":19},"end":{"line":301,"column":19}}]},"39":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8}},{"start":{"line":310,"column":8},"end":{"line":310,"column":8}}]},"40":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":10},"end":{"line":312,"column":10}},{"start":{"line":312,"column":10},"end":{"line":312,"column":10}}]},"41":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":12},"end":{"line":314,"column":12}},{"start":{"line":314,"column":12},"end":{"line":314,"column":12}}]},"42":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":19},"end":{"line":316,"column":19}},{"start":{"line":316,"column":19},"end":{"line":316,"column":19}}]},"43":{"line":316,"type":"binary-expr","locations":[{"start":{"line":316,"column":23},"end":{"line":316,"column":43}},{"start":{"line":316,"column":47},"end":{"line":316,"column":63}}]},"44":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":15},"end":{"line":320,"column":15}},{"start":{"line":320,"column":15},"end":{"line":320,"column":15}}]},"45":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":6},"end":{"line":337,"column":6}},{"start":{"line":337,"column":6},"end":{"line":337,"column":6}}]},"46":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":8},"end":{"line":339,"column":8}},{"start":{"line":339,"column":8},"end":{"line":339,"column":8}}]},"47":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":10},"end":{"line":341,"column":10}},{"start":{"line":341,"column":10},"end":{"line":341,"column":10}}]},"48":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":6},"end":{"line":351,"column":6}},{"start":{"line":351,"column":6},"end":{"line":351,"column":6}}]},"49":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":2},"end":{"line":366,"column":2}},{"start":{"line":366,"column":2},"end":{"line":366,"column":2}}]},"50":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":4},"end":{"line":367,"column":4}},{"start":{"line":367,"column":4},"end":{"line":367,"column":4}}]},"51":{"line":367,"type":"binary-expr","locations":[{"start":{"line":367,"column":8},"end":{"line":367,"column":18}},{"start":{"line":367,"column":22},"end":{"line":367,"column":55}}]},"52":{"line":371,"type":"cond-expr","locations":[{"start":{"line":371,"column":42},"end":{"line":371,"column":59}},{"start":{"line":371,"column":62},"end":{"line":371,"column":79}}]},"53":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":4},"end":{"line":372,"column":4}},{"start":{"line":372,"column":4},"end":{"line":372,"column":4}}]},"54":{"line":377,"type":"cond-expr","locations":[{"start":{"line":377,"column":38},"end":{"line":377,"column":51}},{"start":{"line":377,"column":54},"end":{"line":377,"column":67}}]},"55":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":4},"end":{"line":378,"column":4}},{"start":{"line":378,"column":4},"end":{"line":378,"column":4}}]},"56":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":6},"end":{"line":379,"column":6}},{"start":{"line":379,"column":6},"end":{"line":379,"column":6}}]},"57":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":6},"end":{"line":384,"column":6}},{"start":{"line":384,"column":6},"end":{"line":384,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.visit = visit;","exports.visitInParallel = visitInParallel;","exports.visitWithTypeInfo = visitWithTypeInfo;","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var QueryDocumentKeys = exports.QueryDocumentKeys = {","  Name: [],","","  Document: ['definitions'],","  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],","  VariableDefinition: ['variable', 'type', 'defaultValue'],","  Variable: ['name'],","  SelectionSet: ['selections'],","  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],","  Argument: ['name', 'value'],","","  FragmentSpread: ['name', 'directives'],","  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],","  FragmentDefinition: ['name', 'typeCondition', 'directives', 'selectionSet'],","","  IntValue: [],","  FloatValue: [],","  StringValue: [],","  BooleanValue: [],","  NullValue: [],","  EnumValue: [],","  ListValue: ['values'],","  ObjectValue: ['fields'],","  ObjectField: ['name', 'value'],","","  Directive: ['name', 'arguments'],","","  NamedType: ['name'],","  ListType: ['type'],","  NonNullType: ['type'],","","  SchemaDefinition: ['directives', 'operationTypes'],","  OperationTypeDefinition: ['type'],","","  ScalarTypeDefinition: ['name', 'directives'],","  ObjectTypeDefinition: ['name', 'interfaces', 'directives', 'fields'],","  FieldDefinition: ['name', 'arguments', 'type', 'directives'],","  InputValueDefinition: ['name', 'type', 'defaultValue', 'directives'],","  InterfaceTypeDefinition: ['name', 'directives', 'fields'],","  UnionTypeDefinition: ['name', 'directives', 'types'],","  EnumTypeDefinition: ['name', 'directives', 'values'],","  EnumValueDefinition: ['name', 'directives'],","  InputObjectTypeDefinition: ['name', 'directives', 'fields'],","","  TypeExtensionDefinition: ['definition'],","","  DirectiveDefinition: ['name', 'arguments', 'locations']","};","","var BREAK = exports.BREAK = {};","","/**"," * visit() will walk through an AST using a depth first traversal, calling"," * the visitor's enter function at each node in the traversal, and calling the"," * leave function after visiting that node and all of its child nodes."," *"," * By returning different values from the enter and leave functions, the"," * behavior of the visitor can be altered, including skipping over a sub-tree of"," * the AST (by returning false), editing the AST by returning a value or null"," * to remove the value, or to stop the whole traversal by returning BREAK."," *"," * When using visit() to edit an AST, the original AST will not be modified, and"," * a new version of the AST with the changes applied will be returned from the"," * visit function."," *"," *     const editedAST = visit(ast, {"," *       enter(node, key, parent, path, ancestors) {"," *         // @return"," *         //   undefined: no action"," *         //   false: skip visiting this node"," *         //   visitor.BREAK: stop visiting altogether"," *         //   null: delete this node"," *         //   any value: replace this node with the returned value"," *       },"," *       leave(node, key, parent, path, ancestors) {"," *         // @return"," *         //   undefined: no action"," *         //   false: no action"," *         //   visitor.BREAK: stop visiting altogether"," *         //   null: delete this node"," *         //   any value: replace this node with the returned value"," *       }"," *     });"," *"," * Alternatively to providing enter() and leave() functions, a visitor can"," * instead provide functions named the same as the kinds of AST nodes, or"," * enter/leave visitors at a named key, leading to four permutations of"," * visitor API:"," *"," * 1) Named visitors triggered when entering a node a specific kind."," *"," *     visit(ast, {"," *       Kind(node) {"," *         // enter the \"Kind\" node"," *       }"," *     })"," *"," * 2) Named visitors that trigger upon entering and leaving a node of"," *    a specific kind."," *"," *     visit(ast, {"," *       Kind: {"," *         enter(node) {"," *           // enter the \"Kind\" node"," *         }"," *         leave(node) {"," *           // leave the \"Kind\" node"," *         }"," *       }"," *     })"," *"," * 3) Generic visitors that trigger upon entering and leaving any node."," *"," *     visit(ast, {"," *       enter(node) {"," *         // enter any node"," *       },"," *       leave(node) {"," *         // leave any node"," *       }"," *     })"," *"," * 4) Parallel visitors for entering and leaving nodes of a specific kind."," *"," *     visit(ast, {"," *       enter: {"," *         Kind(node) {"," *           // enter the \"Kind\" node"," *         }"," *       },"," *       leave: {"," *         Kind(node) {"," *           // leave the \"Kind\" node"," *         }"," *       }"," *     })"," */","function visit(root, visitor, keyMap) {","  var visitorKeys = keyMap || QueryDocumentKeys;","","  var stack = void 0;","  var inArray = Array.isArray(root);","  var keys = [root];","  var index = -1;","  var edits = [];","  var parent = void 0;","  var path = [];","  var ancestors = [];","  var newRoot = root;","","  do {","    index++;","    var isLeaving = index === keys.length;","    var key = void 0;","    var node = void 0;","    var isEdited = isLeaving && edits.length !== 0;","    if (isLeaving) {","      key = ancestors.length === 0 ? undefined : path.pop();","      node = parent;","      parent = ancestors.pop();","      if (isEdited) {","        if (inArray) {","          node = node.slice();","        } else {","          var clone = {};","          for (var k in node) {","            if (node.hasOwnProperty(k)) {","              clone[k] = node[k];","            }","          }","          node = clone;","        }","        var editOffset = 0;","        for (var ii = 0; ii < edits.length; ii++) {","          var editKey = edits[ii][0];","          var editValue = edits[ii][1];","          if (inArray) {","            editKey -= editOffset;","          }","          if (inArray && editValue === null) {","            node.splice(editKey, 1);","            editOffset++;","          } else {","            node[editKey] = editValue;","          }","        }","      }","      index = stack.index;","      keys = stack.keys;","      edits = stack.edits;","      inArray = stack.inArray;","      stack = stack.prev;","    } else {","      key = parent ? inArray ? index : keys[index] : undefined;","      node = parent ? parent[key] : newRoot;","      if (node === null || node === undefined) {","        continue;","      }","      if (parent) {","        path.push(key);","      }","    }","","    var result = void 0;","    if (!Array.isArray(node)) {","      if (!isNode(node)) {","        throw new Error('Invalid AST Node: ' + JSON.stringify(node));","      }","      var visitFn = getVisitFn(visitor, node.kind, isLeaving);","      if (visitFn) {","        result = visitFn.call(visitor, node, key, parent, path, ancestors);","","        if (result === BREAK) {","          break;","        }","","        if (result === false) {","          if (!isLeaving) {","            path.pop();","            continue;","          }","        } else if (result !== undefined) {","          edits.push([key, result]);","          if (!isLeaving) {","            if (isNode(result)) {","              node = result;","            } else {","              path.pop();","              continue;","            }","          }","        }","      }","    }","","    if (result === undefined && isEdited) {","      edits.push([key, node]);","    }","","    if (!isLeaving) {","      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };","      inArray = Array.isArray(node);","      keys = inArray ? node : visitorKeys[node.kind] || [];","      index = -1;","      edits = [];","      if (parent) {","        ancestors.push(parent);","      }","      parent = node;","    }","  } while (stack !== undefined);","","  if (edits.length !== 0) {","    newRoot = edits[edits.length - 1][1];","  }","","  return newRoot;","}","","function isNode(maybeNode) {","  return maybeNode && typeof maybeNode.kind === 'string';","}","","/**"," * Creates a new visitor instance which delegates to many visitors to run in"," * parallel. Each visitor will be visited for each node before moving on."," *"," * If a prior visitor edits a node, no following visitors will see that node."," */","function visitInParallel(visitors) {","  var skipping = new Array(visitors.length);","","  return {","    enter: function enter(node) {","      for (var i = 0; i < visitors.length; i++) {","        if (!skipping[i]) {","          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);","          if (fn) {","            var result = fn.apply(visitors[i], arguments);","            if (result === false) {","              skipping[i] = node;","            } else if (result === BREAK) {","              skipping[i] = BREAK;","            } else if (result !== undefined) {","              return result;","            }","          }","        }","      }","    },","    leave: function leave(node) {","      for (var i = 0; i < visitors.length; i++) {","        if (!skipping[i]) {","          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);","          if (fn) {","            var result = fn.apply(visitors[i], arguments);","            if (result === BREAK) {","              skipping[i] = BREAK;","            } else if (result !== undefined && result !== false) {","              return result;","            }","          }","        } else if (skipping[i] === node) {","          skipping[i] = null;","        }","      }","    }","  };","}","","/**"," * Creates a new visitor instance which maintains a provided TypeInfo instance"," * along with visiting visitor."," */","function visitWithTypeInfo(typeInfo, visitor) {","  return {","    enter: function enter(node) {","      typeInfo.enter(node);","      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);","      if (fn) {","        var result = fn.apply(visitor, arguments);","        if (result !== undefined) {","          typeInfo.leave(node);","          if (isNode(result)) {","            typeInfo.enter(result);","          }","        }","        return result;","      }","    },","    leave: function leave(node) {","      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);","      var result = void 0;","      if (fn) {","        result = fn.apply(visitor, arguments);","      }","      typeInfo.leave(node);","      return result;","    }","  };","}","","/**"," * Given a visitor instance, if it is leaving or not, and a node kind, return"," * the function the visitor runtime should call."," */","function getVisitFn(visitor, kind, isLeaving) {","  var kindVisitor = visitor[kind];","  if (kindVisitor) {","    if (!isLeaving && typeof kindVisitor === 'function') {","      // { Kind() {} }","      return kindVisitor;","    }","    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;","    if (typeof kindSpecificVisitor === 'function') {","      // { Kind: { enter() {}, leave() {} } }","      return kindSpecificVisitor;","    }","  } else {","    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;","    if (specificVisitor) {","      if (typeof specificVisitor === 'function') {","        // { enter() {}, leave() {} }","        return specificVisitor;","      }","      var specificKindVisitor = specificVisitor[kind];","      if (typeof specificKindVisitor === 'function') {","        // { enter: { Kind() {} }, leave: { Kind() {} } }","        return specificKindVisitor;","      }","    }","  }","}"],"l":{"3":1,"6":1,"7":1,"8":1,"18":1,"67":1,"155":1,"156":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"182":0,"183":0,"184":0,"185":0,"188":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"197":0,"198":0,"199":0,"201":0,"205":0,"206":0,"207":0,"208":0,"209":0,"211":0,"212":0,"213":0,"214":0,"216":0,"217":0,"221":0,"222":0,"223":0,"224":0,"226":0,"227":0,"228":0,"230":0,"231":0,"234":0,"235":0,"236":0,"237":0,"239":0,"240":0,"241":0,"242":0,"243":0,"245":0,"246":0,"253":0,"254":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"266":0,"270":0,"271":0,"274":0,"277":1,"278":0,"287":1,"288":0,"290":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"320":0,"321":0,"332":1,"333":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"345":0,"349":0,"350":0,"351":0,"352":0,"354":0,"355":0,"364":1,"365":0,"366":0,"367":0,"369":0,"371":0,"372":0,"374":0,"377":0,"378":0,"379":0,"381":0,"383":0,"384":0,"386":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/schema.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/schema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":2,"13":1,"14":0,"15":0,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":1,"78":0,"79":0,"80":1,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0},"b":{"1":[2,0],"2":[2,2],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":2,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":37}}},"2":{"name":"_classCallCheck","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":48}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":44},"end":{"line":62,"column":56}}},"4":{"name":"GraphQLSchema","line":63,"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":33}}},"5":{"name":"(anonymous_5)","line":81,"loc":{"start":{"line":81,"column":111},"end":{"line":81,"column":132}}},"6":{"name":"(anonymous_6)","line":99,"loc":{"start":{"line":99,"column":39},"end":{"line":99,"column":59}}},"7":{"name":"(anonymous_7)","line":102,"loc":{"start":{"line":102,"column":37},"end":{"line":102,"column":54}}},"8":{"name":"(anonymous_8)","line":114,"loc":{"start":{"line":114,"column":39},"end":{"line":114,"column":59}}},"9":{"name":"(anonymous_9)","line":117,"loc":{"start":{"line":117,"column":37},"end":{"line":117,"column":54}}},"10":{"name":"getQueryType","line":124,"loc":{"start":{"line":124,"column":41},"end":{"line":124,"column":65}}},"11":{"name":"getMutationType","line":128,"loc":{"start":{"line":128,"column":44},"end":{"line":128,"column":71}}},"12":{"name":"getSubscriptionType","line":132,"loc":{"start":{"line":132,"column":48},"end":{"line":132,"column":79}}},"13":{"name":"getTypeMap","line":136,"loc":{"start":{"line":136,"column":39},"end":{"line":136,"column":61}}},"14":{"name":"getType","line":140,"loc":{"start":{"line":140,"column":36},"end":{"line":140,"column":59}}},"15":{"name":"getPossibleTypes","line":144,"loc":{"start":{"line":144,"column":45},"end":{"line":144,"column":85}}},"16":{"name":"isPossibleType","line":152,"loc":{"start":{"line":152,"column":43},"end":{"line":152,"column":95}}},"17":{"name":"(anonymous_17)","line":161,"loc":{"start":{"line":161,"column":64},"end":{"line":161,"column":85}}},"18":{"name":"getDirectives","line":169,"loc":{"start":{"line":169,"column":42},"end":{"line":169,"column":67}}},"19":{"name":"getDirective","line":173,"loc":{"start":{"line":173,"column":41},"end":{"line":173,"column":69}}},"20":{"name":"(anonymous_20)","line":174,"loc":{"start":{"line":174,"column":53},"end":{"line":174,"column":74}}},"21":{"name":"typeMapReducer","line":182,"loc":{"start":{"line":182,"column":0},"end":{"line":182,"column":35}}},"22":{"name":"(anonymous_22)","line":207,"loc":{"start":{"line":207,"column":34},"end":{"line":207,"column":55}}},"23":{"name":"(anonymous_23)","line":211,"loc":{"start":{"line":211,"column":43},"end":{"line":211,"column":58}}},"24":{"name":"(anonymous_24)","line":222,"loc":{"start":{"line":222,"column":35},"end":{"line":222,"column":56}}},"25":{"name":"assertObjectImplementsInterface","line":231,"loc":{"start":{"line":231,"column":0},"end":{"line":231,"column":64}}},"26":{"name":"(anonymous_26)","line":236,"loc":{"start":{"line":236,"column":37},"end":{"line":236,"column":58}}},"27":{"name":"(anonymous_27)","line":248,"loc":{"start":{"line":248,"column":28},"end":{"line":248,"column":48}}},"28":{"name":"(anonymous_28)","line":250,"loc":{"start":{"line":250,"column":60},"end":{"line":250,"column":75}}},"29":{"name":"(anonymous_29)","line":263,"loc":{"start":{"line":263,"column":29},"end":{"line":263,"column":50}}},"30":{"name":"(anonymous_30)","line":265,"loc":{"start":{"line":265,"column":58},"end":{"line":265,"column":73}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":42}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":39}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":43}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":49}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":63}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":97}},"12":{"start":{"line":24,"column":39},"end":{"line":24,"column":95}},"13":{"start":{"line":26,"column":0},"end":{"line":26,"column":153}},"14":{"start":{"line":26,"column":50},"end":{"line":26,"column":151}},"15":{"start":{"line":26,"column":92},"end":{"line":26,"column":149}},"16":{"start":{"line":62,"column":0},"end":{"line":180,"column":4}},"17":{"start":{"line":63,"column":2},"end":{"line":122,"column":3}},"18":{"start":{"line":64,"column":4},"end":{"line":64,"column":21}},"19":{"start":{"line":66,"column":4},"end":{"line":66,"column":41}},"20":{"start":{"line":68,"column":4},"end":{"line":68,"column":95}},"21":{"start":{"line":70,"column":4},"end":{"line":70,"column":159}},"22":{"start":{"line":71,"column":4},"end":{"line":71,"column":35}},"23":{"start":{"line":73,"column":4},"end":{"line":73,"column":200}},"24":{"start":{"line":74,"column":4},"end":{"line":74,"column":41}},"25":{"start":{"line":76,"column":4},"end":{"line":76,"column":216}},"26":{"start":{"line":77,"column":4},"end":{"line":77,"column":49}},"27":{"start":{"line":79,"column":4},"end":{"line":79,"column":156}},"28":{"start":{"line":81,"column":4},"end":{"line":83,"column":117}},"29":{"start":{"line":82,"column":6},"end":{"line":82,"column":63}},"30":{"start":{"line":85,"column":4},"end":{"line":85,"column":76}},"31":{"start":{"line":88,"column":4},"end":{"line":88,"column":122}},"32":{"start":{"line":90,"column":4},"end":{"line":90,"column":29}},"33":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"34":{"start":{"line":92,"column":6},"end":{"line":92,"column":48}},"35":{"start":{"line":95,"column":4},"end":{"line":95,"column":77}},"36":{"start":{"line":98,"column":4},"end":{"line":98,"column":48}},"37":{"start":{"line":99,"column":4},"end":{"line":111,"column":7}},"38":{"start":{"line":100,"column":6},"end":{"line":100,"column":42}},"39":{"start":{"line":101,"column":6},"end":{"line":110,"column":7}},"40":{"start":{"line":102,"column":8},"end":{"line":109,"column":11}},"41":{"start":{"line":103,"column":10},"end":{"line":103,"column":57}},"42":{"start":{"line":104,"column":10},"end":{"line":108,"column":11}},"43":{"start":{"line":105,"column":12},"end":{"line":105,"column":29}},"44":{"start":{"line":107,"column":12},"end":{"line":107,"column":56}},"45":{"start":{"line":114,"column":4},"end":{"line":121,"column":7}},"46":{"start":{"line":115,"column":6},"end":{"line":115,"column":42}},"47":{"start":{"line":116,"column":6},"end":{"line":120,"column":7}},"48":{"start":{"line":117,"column":8},"end":{"line":119,"column":11}},"49":{"start":{"line":118,"column":10},"end":{"line":118,"column":69}},"50":{"start":{"line":124,"column":2},"end":{"line":126,"column":4}},"51":{"start":{"line":125,"column":4},"end":{"line":125,"column":27}},"52":{"start":{"line":128,"column":2},"end":{"line":130,"column":4}},"53":{"start":{"line":129,"column":4},"end":{"line":129,"column":30}},"54":{"start":{"line":132,"column":2},"end":{"line":134,"column":4}},"55":{"start":{"line":133,"column":4},"end":{"line":133,"column":34}},"56":{"start":{"line":136,"column":2},"end":{"line":138,"column":4}},"57":{"start":{"line":137,"column":4},"end":{"line":137,"column":25}},"58":{"start":{"line":140,"column":2},"end":{"line":142,"column":4}},"59":{"start":{"line":141,"column":4},"end":{"line":141,"column":35}},"60":{"start":{"line":144,"column":2},"end":{"line":150,"column":4}},"61":{"start":{"line":145,"column":4},"end":{"line":147,"column":5}},"62":{"start":{"line":146,"column":6},"end":{"line":146,"column":37}},"63":{"start":{"line":148,"column":4},"end":{"line":148,"column":87}},"64":{"start":{"line":149,"column":4},"end":{"line":149,"column":52}},"65":{"start":{"line":152,"column":2},"end":{"line":167,"column":4}},"66":{"start":{"line":153,"column":4},"end":{"line":153,"column":48}},"67":{"start":{"line":154,"column":4},"end":{"line":156,"column":5}},"68":{"start":{"line":155,"column":6},"end":{"line":155,"column":68}},"69":{"start":{"line":158,"column":4},"end":{"line":164,"column":5}},"70":{"start":{"line":159,"column":6},"end":{"line":159,"column":62}},"71":{"start":{"line":160,"column":6},"end":{"line":160,"column":246}},"72":{"start":{"line":161,"column":6},"end":{"line":163,"column":30}},"73":{"start":{"line":162,"column":8},"end":{"line":162,"column":42}},"74":{"start":{"line":166,"column":4},"end":{"line":166,"column":74}},"75":{"start":{"line":169,"column":2},"end":{"line":171,"column":4}},"76":{"start":{"line":170,"column":4},"end":{"line":170,"column":28}},"77":{"start":{"line":173,"column":2},"end":{"line":177,"column":4}},"78":{"start":{"line":174,"column":4},"end":{"line":176,"column":7}},"79":{"start":{"line":175,"column":6},"end":{"line":175,"column":37}},"80":{"start":{"line":179,"column":2},"end":{"line":179,"column":23}},"81":{"start":{"line":182,"column":0},"end":{"line":229,"column":1}},"82":{"start":{"line":183,"column":2},"end":{"line":185,"column":3}},"83":{"start":{"line":184,"column":4},"end":{"line":184,"column":15}},"84":{"start":{"line":186,"column":2},"end":{"line":188,"column":3}},"85":{"start":{"line":187,"column":4},"end":{"line":187,"column":44}},"86":{"start":{"line":189,"column":2},"end":{"line":192,"column":3}},"87":{"start":{"line":190,"column":4},"end":{"line":190,"column":158}},"88":{"start":{"line":191,"column":4},"end":{"line":191,"column":15}},"89":{"start":{"line":193,"column":2},"end":{"line":193,"column":24}},"90":{"start":{"line":195,"column":2},"end":{"line":195,"column":23}},"91":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"92":{"start":{"line":198,"column":4},"end":{"line":198,"column":68}},"93":{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},"94":{"start":{"line":202,"column":4},"end":{"line":202,"column":73}},"95":{"start":{"line":205,"column":2},"end":{"line":218,"column":3}},"96":{"start":{"line":206,"column":4},"end":{"line":206,"column":36}},"97":{"start":{"line":207,"column":4},"end":{"line":217,"column":7}},"98":{"start":{"line":208,"column":6},"end":{"line":208,"column":38}},"99":{"start":{"line":210,"column":6},"end":{"line":215,"column":7}},"100":{"start":{"line":211,"column":8},"end":{"line":213,"column":11}},"101":{"start":{"line":212,"column":10},"end":{"line":212,"column":26}},"102":{"start":{"line":214,"column":8},"end":{"line":214,"column":70}},"103":{"start":{"line":216,"column":6},"end":{"line":216,"column":58}},"104":{"start":{"line":220,"column":2},"end":{"line":226,"column":3}},"105":{"start":{"line":221,"column":4},"end":{"line":221,"column":37}},"106":{"start":{"line":222,"column":4},"end":{"line":225,"column":7}},"107":{"start":{"line":223,"column":6},"end":{"line":223,"column":39}},"108":{"start":{"line":224,"column":6},"end":{"line":224,"column":58}},"109":{"start":{"line":228,"column":2},"end":{"line":228,"column":20}},"110":{"start":{"line":231,"column":0},"end":{"line":273,"column":1}},"111":{"start":{"line":232,"column":2},"end":{"line":232,"column":42}},"112":{"start":{"line":233,"column":2},"end":{"line":233,"column":40}},"113":{"start":{"line":236,"column":2},"end":{"line":272,"column":5}},"114":{"start":{"line":237,"column":4},"end":{"line":237,"column":48}},"115":{"start":{"line":238,"column":4},"end":{"line":238,"column":46}},"116":{"start":{"line":241,"column":4},"end":{"line":241,"column":152}},"117":{"start":{"line":245,"column":4},"end":{"line":245,"column":292}},"118":{"start":{"line":248,"column":4},"end":{"line":260,"column":7}},"119":{"start":{"line":249,"column":6},"end":{"line":249,"column":34}},"120":{"start":{"line":250,"column":6},"end":{"line":252,"column":9}},"121":{"start":{"line":251,"column":8},"end":{"line":251,"column":36}},"122":{"start":{"line":255,"column":6},"end":{"line":255,"column":177}},"123":{"start":{"line":259,"column":6},"end":{"line":259,"column":319}},"124":{"start":{"line":263,"column":4},"end":{"line":271,"column":7}},"125":{"start":{"line":264,"column":6},"end":{"line":264,"column":35}},"126":{"start":{"line":265,"column":6},"end":{"line":267,"column":9}},"127":{"start":{"line":266,"column":8},"end":{"line":266,"column":36}},"128":{"start":{"line":268,"column":6},"end":{"line":270,"column":7}},"129":{"start":{"line":269,"column":8},"end":{"line":269,"column":291}}},"branchMap":{"1":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":70},"end":{"line":24,"column":73}},{"start":{"line":24,"column":76},"end":{"line":24,"column":94}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":46},"end":{"line":24,"column":49}},{"start":{"line":24,"column":53},"end":{"line":24,"column":67}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":50},"end":{"line":26,"column":50}},{"start":{"line":26,"column":50},"end":{"line":26,"column":50}}]},"4":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":29},"end":{"line":73,"column":45}},{"start":{"line":73,"column":49},"end":{"line":73,"column":105}}]},"5":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":29},"end":{"line":76,"column":49}},{"start":{"line":76,"column":53},"end":{"line":76,"column":113}}]},"6":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":29},"end":{"line":79,"column":42}},{"start":{"line":79,"column":46},"end":{"line":79,"column":73}}]},"7":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":29},"end":{"line":81,"column":47}},{"start":{"line":81,"column":51},"end":{"line":81,"column":83}},{"start":{"line":81,"column":87},"end":{"line":83,"column":6}}]},"8":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":23},"end":{"line":85,"column":40}},{"start":{"line":85,"column":44},"end":{"line":85,"column":75}}]},"9":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"10":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":6}},{"start":{"line":101,"column":6},"end":{"line":101,"column":6}}]},"11":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":10},"end":{"line":104,"column":10}},{"start":{"line":104,"column":10},"end":{"line":104,"column":10}}]},"12":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":6}},{"start":{"line":116,"column":6},"end":{"line":116,"column":6}}]},"13":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"14":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"15":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":4},"end":{"line":158,"column":4}},{"start":{"line":158,"column":4},"end":{"line":158,"column":4}}]},"16":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":2},"end":{"line":183,"column":2}},{"start":{"line":183,"column":2},"end":{"line":183,"column":2}}]},"17":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":2},"end":{"line":186,"column":2}},{"start":{"line":186,"column":2},"end":{"line":186,"column":2}}]},"18":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":6},"end":{"line":186,"column":45}},{"start":{"line":186,"column":49},"end":{"line":186,"column":91}}]},"19":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":2},"end":{"line":189,"column":2}},{"start":{"line":189,"column":2},"end":{"line":189,"column":2}}]},"20":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":2},"end":{"line":197,"column":2}},{"start":{"line":197,"column":2},"end":{"line":197,"column":2}}]},"21":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":2},"end":{"line":201,"column":2}},{"start":{"line":201,"column":2},"end":{"line":201,"column":2}}]},"22":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":2},"end":{"line":205,"column":2}},{"start":{"line":205,"column":2},"end":{"line":205,"column":2}}]},"23":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":6},"end":{"line":205,"column":51}},{"start":{"line":205,"column":55},"end":{"line":205,"column":103}}]},"24":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":6},"end":{"line":210,"column":6}},{"start":{"line":210,"column":6},"end":{"line":210,"column":6}}]},"25":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":2},"end":{"line":220,"column":2}},{"start":{"line":220,"column":2},"end":{"line":220,"column":2}}]},"26":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":6},"end":{"line":268,"column":6}},{"start":{"line":268,"column":6},"end":{"line":268,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.GraphQLSchema = undefined;","","var _definition = require('./definition');","","var _directives = require('./directives');","","var _introspection = require('./introspection');","","var _find = require('../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _typeComparators = require('../utilities/typeComparators');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Schema Definition"," *"," * A Schema is created by supplying the root types of each type of operation,"," * query and mutation (optional). A schema definition is then supplied to the"," * validator and executor."," *"," * Example:"," *"," *     const MyAppSchema = new GraphQLSchema({"," *       query: MyAppQueryRootType,"," *       mutation: MyAppMutationRootType,"," *     })"," *"," * Note: If an array of `directives` are provided to GraphQLSchema, that will be"," * the exact list of directives represented and allowed. If `directives` is not"," * provided then a default set of the specified directives (e.g. @include and"," * @skip) will be used. If you wish to provide *additional* directives to these"," * specified directives, you must explicitly declare them. Example:"," *"," *     const MyAppSchema = new GraphQLSchema({"," *       ..."," *       directives: specifiedDirectives.concat([ myCustomDirective ]),"," *     })"," *"," */","var GraphQLSchema = exports.GraphQLSchema = function () {","  function GraphQLSchema(config) {","    var _this = this;","","    _classCallCheck(this, GraphQLSchema);","","    (0, _invariant2.default)(typeof config === 'object', 'Must provide configuration object.');","","    (0, _invariant2.default)(config.query instanceof _definition.GraphQLObjectType, 'Schema query must be Object Type but got: ' + String(config.query) + '.');","    this._queryType = config.query;","","    (0, _invariant2.default)(!config.mutation || config.mutation instanceof _definition.GraphQLObjectType, 'Schema mutation must be Object Type if provided but got: ' + String(config.mutation) + '.');","    this._mutationType = config.mutation;","","    (0, _invariant2.default)(!config.subscription || config.subscription instanceof _definition.GraphQLObjectType, 'Schema subscription must be Object Type if provided but got: ' + String(config.subscription) + '.');","    this._subscriptionType = config.subscription;","","    (0, _invariant2.default)(!config.types || Array.isArray(config.types), 'Schema types must be Array if provided but got: ' + String(config.types) + '.');","","    (0, _invariant2.default)(!config.directives || Array.isArray(config.directives) && config.directives.every(function (directive) {","      return directive instanceof _directives.GraphQLDirective;","    }), 'Schema directives must be Array<GraphQLDirective> if provided but got: ' + String(config.directives) + '.');","    // Provide specified directives (e.g. @include and @skip) by default.","    this._directives = config.directives || _directives.specifiedDirectives;","","    // Build type map now to detect any errors within this schema.","    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), _introspection.__Schema];","","    var types = config.types;","    if (types) {","      initialTypes = initialTypes.concat(types);","    }","","    this._typeMap = initialTypes.reduce(typeMapReducer, Object.create(null));","","    // Keep track of all implementations by interface name.","    this._implementations = Object.create(null);","    Object.keys(this._typeMap).forEach(function (typeName) {","      var type = _this._typeMap[typeName];","      if (type instanceof _definition.GraphQLObjectType) {","        type.getInterfaces().forEach(function (iface) {","          var impls = _this._implementations[iface.name];","          if (impls) {","            impls.push(type);","          } else {","            _this._implementations[iface.name] = [type];","          }","        });","      }","    });","","    // Enforce correct interface implementations.","    Object.keys(this._typeMap).forEach(function (typeName) {","      var type = _this._typeMap[typeName];","      if (type instanceof _definition.GraphQLObjectType) {","        type.getInterfaces().forEach(function (iface) {","          return assertObjectImplementsInterface(_this, type, iface);","        });","      }","    });","  }","","  GraphQLSchema.prototype.getQueryType = function getQueryType() {","    return this._queryType;","  };","","  GraphQLSchema.prototype.getMutationType = function getMutationType() {","    return this._mutationType;","  };","","  GraphQLSchema.prototype.getSubscriptionType = function getSubscriptionType() {","    return this._subscriptionType;","  };","","  GraphQLSchema.prototype.getTypeMap = function getTypeMap() {","    return this._typeMap;","  };","","  GraphQLSchema.prototype.getType = function getType(name) {","    return this.getTypeMap()[name];","  };","","  GraphQLSchema.prototype.getPossibleTypes = function getPossibleTypes(abstractType) {","    if (abstractType instanceof _definition.GraphQLUnionType) {","      return abstractType.getTypes();","    }","    (0, _invariant2.default)(abstractType instanceof _definition.GraphQLInterfaceType);","    return this._implementations[abstractType.name];","  };","","  GraphQLSchema.prototype.isPossibleType = function isPossibleType(abstractType, possibleType) {","    var possibleTypeMap = this._possibleTypeMap;","    if (!possibleTypeMap) {","      this._possibleTypeMap = possibleTypeMap = Object.create(null);","    }","","    if (!possibleTypeMap[abstractType.name]) {","      var possibleTypes = this.getPossibleTypes(abstractType);","      (0, _invariant2.default)(Array.isArray(possibleTypes), 'Could not find possible implementing types for ' + abstractType.name + ' ' + 'in schema. Check that schema.types is defined and is an array of ' + 'all possible types in the schema.');","      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {","        return map[type.name] = true, map;","      }, Object.create(null));","    }","","    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);","  };","","  GraphQLSchema.prototype.getDirectives = function getDirectives() {","    return this._directives;","  };","","  GraphQLSchema.prototype.getDirective = function getDirective(name) {","    return (0, _find2.default)(this.getDirectives(), function (directive) {","      return directive.name === name;","    });","  };","","  return GraphQLSchema;","}();","","function typeMapReducer(map, type) {","  if (!type) {","    return map;","  }","  if (type instanceof _definition.GraphQLList || type instanceof _definition.GraphQLNonNull) {","    return typeMapReducer(map, type.ofType);","  }","  if (map[type.name]) {","    (0, _invariant2.default)(map[type.name] === type, 'Schema must contain unique named types but contains multiple ' + ('types named \"' + type.name + '\".'));","    return map;","  }","  map[type.name] = type;","","  var reducedMap = map;","","  if (type instanceof _definition.GraphQLUnionType) {","    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);","  }","","  if (type instanceof _definition.GraphQLObjectType) {","    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);","  }","","  if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {","    var fieldMap = type.getFields();","    Object.keys(fieldMap).forEach(function (fieldName) {","      var field = fieldMap[fieldName];","","      if (field.args) {","        var fieldArgTypes = field.args.map(function (arg) {","          return arg.type;","        });","        reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);","      }","      reducedMap = typeMapReducer(reducedMap, field.type);","    });","  }","","  if (type instanceof _definition.GraphQLInputObjectType) {","    var _fieldMap = type.getFields();","    Object.keys(_fieldMap).forEach(function (fieldName) {","      var field = _fieldMap[fieldName];","      reducedMap = typeMapReducer(reducedMap, field.type);","    });","  }","","  return reducedMap;","}","","function assertObjectImplementsInterface(schema, object, iface) {","  var objectFieldMap = object.getFields();","  var ifaceFieldMap = iface.getFields();","","  // Assert each interface field is implemented.","  Object.keys(ifaceFieldMap).forEach(function (fieldName) {","    var objectField = objectFieldMap[fieldName];","    var ifaceField = ifaceFieldMap[fieldName];","","    // Assert interface field exists on object.","    (0, _invariant2.default)(objectField, '\"' + iface.name + '\" expects field \"' + fieldName + '\" but \"' + object.name + '\" ' + 'does not provide it.');","","    // Assert interface field type is satisfied by object field type, by being","    // a valid subtype. (covariant)","    (0, _invariant2.default)((0, _typeComparators.isTypeSubTypeOf)(schema, objectField.type, ifaceField.type), iface.name + '.' + fieldName + ' expects type \"' + String(ifaceField.type) + '\" ' + 'but ' + (object.name + '.' + fieldName + ' provides type \"' + String(objectField.type) + '\".'));","","    // Assert each interface field arg is implemented.","    ifaceField.args.forEach(function (ifaceArg) {","      var argName = ifaceArg.name;","      var objectArg = (0, _find2.default)(objectField.args, function (arg) {","        return arg.name === argName;","      });","","      // Assert interface field arg exists on object field.","      (0, _invariant2.default)(objectArg, iface.name + '.' + fieldName + ' expects argument \"' + argName + '\" but ' + (object.name + '.' + fieldName + ' does not provide it.'));","","      // Assert interface field arg type matches object field arg type.","      // (invariant)","      (0, _invariant2.default)((0, _typeComparators.isEqualType)(ifaceArg.type, objectArg.type), iface.name + '.' + fieldName + '(' + argName + ':) expects type ' + ('\"' + String(ifaceArg.type) + '\" but ') + (object.name + '.' + fieldName + '(' + argName + ':) provides type ') + ('\"' + String(objectArg.type) + '\".'));","    });","","    // Assert additional arguments must not be required.","    objectField.args.forEach(function (objectArg) {","      var argName = objectArg.name;","      var ifaceArg = (0, _find2.default)(ifaceField.args, function (arg) {","        return arg.name === argName;","      });","      if (!ifaceArg) {","        (0, _invariant2.default)(!(objectArg.type instanceof _definition.GraphQLNonNull), object.name + '.' + fieldName + '(' + argName + ':) is of required type ' + ('\"' + String(objectArg.type) + '\" but is not also provided by the ') + ('interface ' + iface.name + '.' + fieldName + '.'));","      }","    });","  });","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":2,"26":1,"62":1,"63":1,"64":0,"66":0,"68":0,"70":0,"71":0,"73":0,"74":0,"76":0,"77":0,"79":0,"81":0,"82":0,"85":0,"88":0,"90":0,"91":0,"92":0,"95":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"107":0,"114":0,"115":0,"116":0,"117":0,"118":0,"124":1,"125":0,"128":1,"129":0,"132":1,"133":0,"136":1,"137":0,"140":1,"141":0,"144":1,"145":0,"146":0,"148":0,"149":0,"152":1,"153":0,"154":0,"155":0,"158":0,"159":0,"160":0,"161":0,"162":0,"166":0,"169":1,"170":0,"173":1,"174":0,"175":0,"179":1,"182":1,"183":0,"184":0,"186":0,"187":0,"189":0,"190":0,"191":0,"193":0,"195":0,"197":0,"198":0,"201":0,"202":0,"205":0,"206":0,"207":0,"208":0,"210":0,"211":0,"212":0,"214":0,"216":0,"220":0,"221":0,"222":0,"223":0,"224":0,"228":0,"231":1,"232":0,"233":0,"236":0,"237":0,"238":0,"241":0,"245":0,"248":0,"249":0,"250":0,"251":0,"255":0,"259":0,"263":0,"264":0,"265":0,"266":0,"268":0,"269":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/definition.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/definition.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":2,"34":1,"35":18,"36":0,"37":1,"38":5,"39":1,"40":0,"41":0,"42":1,"43":3,"44":3,"45":1,"46":0,"47":0,"48":1,"49":0,"50":0,"51":1,"52":0,"53":0,"54":1,"55":0,"56":1,"57":0,"58":0,"59":1,"60":0,"61":1,"62":0,"63":0,"64":1,"65":0,"66":1,"67":0,"68":0,"69":1,"70":0,"71":1,"72":0,"73":1,"74":0,"75":0,"76":1,"77":3,"78":3,"79":2,"80":3,"81":1,"82":0,"83":1,"84":1,"85":5,"86":5,"87":5,"88":5,"89":5,"90":5,"91":5,"92":5,"93":1,"94":0,"95":0,"96":1,"97":0,"98":0,"99":1,"100":0,"101":0,"102":1,"103":7,"104":1,"105":1,"106":1,"107":1,"108":6,"109":6,"110":6,"111":6,"112":6,"113":0,"114":6,"115":6,"116":1,"117":0,"118":1,"119":0,"120":1,"121":1,"122":1,"123":1,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":1,"160":28,"161":1,"162":0,"163":1,"164":1,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":1,"174":0,"175":1,"176":0,"177":1,"178":1,"179":1,"180":1,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":1,"190":0,"191":1,"192":0,"193":1,"194":1,"195":1,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":1,"204":1,"205":2,"206":2,"207":2,"208":2,"209":2,"210":2,"211":1,"212":0,"213":1,"214":0,"215":1,"216":0,"217":0,"218":1,"219":0,"220":0,"221":0,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":1,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":1,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":1,"243":0,"244":1,"245":1,"246":1,"247":2,"248":2,"249":2,"250":2,"251":26,"252":26,"253":26,"254":26,"255":26,"256":1,"257":1,"258":0,"259":0,"260":0,"261":0,"262":0,"263":1,"264":0,"265":1,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":1,"280":0,"281":1,"282":1,"283":1,"284":1,"285":0,"286":0,"287":0,"288":1,"289":0,"290":1,"291":1,"292":1,"293":1,"294":5,"295":5,"296":5,"297":1,"298":2,"299":1,"300":1},"b":{"1":[1,0],"2":[0,0],"3":[2,0],"4":[2,2],"5":[0,18],"6":[5,1,0,0,0,0,0,0],"7":[3,0,0],"8":[0,0,0,0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0,0],"14":[5,5],"15":[0,0],"16":[5,0],"17":[5,0],"18":[5,5],"19":[0,0],"20":[0,0],"21":[0,6],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[28,28,28],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,26],"44":[0,0],"45":[5,5]},"f":{"1":0,"2":2,"3":18,"4":5,"5":0,"6":3,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":3,"20":0,"21":1,"22":5,"23":0,"24":0,"25":0,"26":7,"27":1,"28":6,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":28,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":2,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":2,"62":26,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":1,"73":5,"74":2},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":32},"end":{"line":8,"column":50}}},"2":{"name":"_interopRequireDefault","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":37}}},"3":{"name":"_classCallCheck","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":48}}},"4":{"name":"isType","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":22}}},"5":{"name":"assertType","line":60,"loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":26}}},"6":{"name":"isInputType","line":68,"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":27}}},"7":{"name":"assertInputType","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":31}}},"8":{"name":"isOutputType","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":28}}},"9":{"name":"assertOutputType","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":32}}},"10":{"name":"isLeafType","line":94,"loc":{"start":{"line":94,"column":0},"end":{"line":94,"column":26}}},"11":{"name":"assertLeafType","line":98,"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":30}}},"12":{"name":"isCompositeType","line":106,"loc":{"start":{"line":106,"column":0},"end":{"line":106,"column":31}}},"13":{"name":"assertCompositeType","line":110,"loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":35}}},"14":{"name":"isAbstractType","line":118,"loc":{"start":{"line":118,"column":0},"end":{"line":118,"column":30}}},"15":{"name":"assertAbstractType","line":122,"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":34}}},"16":{"name":"getNullableType","line":130,"loc":{"start":{"line":130,"column":0},"end":{"line":130,"column":31}}},"17":{"name":"isNamedType","line":137,"loc":{"start":{"line":137,"column":0},"end":{"line":137,"column":27}}},"18":{"name":"assertNamedType","line":141,"loc":{"start":{"line":141,"column":0},"end":{"line":141,"column":31}}},"19":{"name":"getNamedType","line":146,"loc":{"start":{"line":146,"column":0},"end":{"line":146,"column":28}}},"20":{"name":"resolveThunk","line":160,"loc":{"start":{"line":160,"column":0},"end":{"line":160,"column":29}}},"21":{"name":"(anonymous_21)","line":182,"loc":{"start":{"line":182,"column":52},"end":{"line":182,"column":64}}},"22":{"name":"GraphQLScalarType","line":183,"loc":{"start":{"line":183,"column":2},"end":{"line":183,"column":37}}},"23":{"name":"serialize","line":199,"loc":{"start":{"line":199,"column":42},"end":{"line":199,"column":68}}},"24":{"name":"parseValue","line":207,"loc":{"start":{"line":207,"column":43},"end":{"line":207,"column":70}}},"25":{"name":"parseLiteral","line":215,"loc":{"start":{"line":215,"column":45},"end":{"line":215,"column":78}}},"26":{"name":"toString","line":220,"loc":{"start":{"line":220,"column":41},"end":{"line":220,"column":61}}},"27":{"name":"(anonymous_27)","line":269,"loc":{"start":{"line":269,"column":52},"end":{"line":269,"column":64}}},"28":{"name":"GraphQLObjectType","line":270,"loc":{"start":{"line":270,"column":2},"end":{"line":270,"column":37}}},"29":{"name":"getFields","line":283,"loc":{"start":{"line":283,"column":42},"end":{"line":283,"column":63}}},"30":{"name":"getInterfaces","line":287,"loc":{"start":{"line":287,"column":46},"end":{"line":287,"column":71}}},"31":{"name":"toString","line":291,"loc":{"start":{"line":291,"column":41},"end":{"line":291,"column":61}}},"32":{"name":"defineInterfaces","line":303,"loc":{"start":{"line":303,"column":0},"end":{"line":303,"column":49}}},"33":{"name":"(anonymous_33)","line":309,"loc":{"start":{"line":309,"column":21},"end":{"line":309,"column":38}}},"34":{"name":"defineFieldMap","line":318,"loc":{"start":{"line":318,"column":0},"end":{"line":318,"column":43}}},"35":{"name":"(anonymous_35)","line":326,"loc":{"start":{"line":326,"column":21},"end":{"line":326,"column":42}}},"36":{"name":"(anonymous_36)","line":342,"loc":{"start":{"line":342,"column":47},"end":{"line":342,"column":66}}},"37":{"name":"isPlainObj","line":359,"loc":{"start":{"line":359,"column":0},"end":{"line":359,"column":25}}},"38":{"name":"isValidResolver","line":364,"loc":{"start":{"line":364,"column":0},"end":{"line":364,"column":35}}},"39":{"name":"(anonymous_39)","line":386,"loc":{"start":{"line":386,"column":58},"end":{"line":386,"column":70}}},"40":{"name":"GraphQLInterfaceType","line":387,"loc":{"start":{"line":387,"column":2},"end":{"line":387,"column":40}}},"41":{"name":"getFields","line":400,"loc":{"start":{"line":400,"column":45},"end":{"line":400,"column":66}}},"42":{"name":"toString","line":404,"loc":{"start":{"line":404,"column":44},"end":{"line":404,"column":64}}},"43":{"name":"(anonymous_43)","line":439,"loc":{"start":{"line":439,"column":50},"end":{"line":439,"column":62}}},"44":{"name":"GraphQLUnionType","line":440,"loc":{"start":{"line":440,"column":2},"end":{"line":440,"column":36}}},"45":{"name":"getTypes","line":453,"loc":{"start":{"line":453,"column":40},"end":{"line":453,"column":60}}},"46":{"name":"toString","line":457,"loc":{"start":{"line":457,"column":40},"end":{"line":457,"column":60}}},"47":{"name":"defineTypes","line":469,"loc":{"start":{"line":469,"column":0},"end":{"line":469,"column":44}}},"48":{"name":"(anonymous_48)","line":473,"loc":{"start":{"line":473,"column":16},"end":{"line":473,"column":35}}},"49":{"name":"(anonymous_49)","line":504,"loc":{"start":{"line":504,"column":58},"end":{"line":504,"column":70}}},"50":{"name":"GraphQLEnumType","line":505,"loc":{"start":{"line":505,"column":2},"end":{"line":505,"column":45}}},"51":{"name":"getValues","line":515,"loc":{"start":{"line":515,"column":40},"end":{"line":515,"column":61}}},"52":{"name":"getValue","line":519,"loc":{"start":{"line":519,"column":39},"end":{"line":519,"column":63}}},"53":{"name":"serialize","line":523,"loc":{"start":{"line":523,"column":40},"end":{"line":523,"column":74}}},"54":{"name":"parseValue","line":528,"loc":{"start":{"line":528,"column":41},"end":{"line":528,"column":75}}},"55":{"name":"parseLiteral","line":537,"loc":{"start":{"line":537,"column":43},"end":{"line":537,"column":83}}},"56":{"name":"_getValueLookup","line":546,"loc":{"start":{"line":546,"column":46},"end":{"line":546,"column":73}}},"57":{"name":"(anonymous_57)","line":549,"loc":{"start":{"line":549,"column":31},"end":{"line":549,"column":48}}},"58":{"name":"_getNameLookup","line":557,"loc":{"start":{"line":557,"column":45},"end":{"line":557,"column":71}}},"59":{"name":"(anonymous_59)","line":560,"loc":{"start":{"line":560,"column":31},"end":{"line":560,"column":48}}},"60":{"name":"toString","line":568,"loc":{"start":{"line":568,"column":39},"end":{"line":568,"column":59}}},"61":{"name":"defineEnumValues","line":580,"loc":{"start":{"line":580,"column":0},"end":{"line":581,"column":2}}},"62":{"name":"(anonymous_62)","line":585,"loc":{"start":{"line":585,"column":24},"end":{"line":585,"column":45}}},"63":{"name":"(anonymous_63)","line":621,"loc":{"start":{"line":621,"column":62},"end":{"line":621,"column":74}}},"64":{"name":"GraphQLInputObjectType","line":622,"loc":{"start":{"line":622,"column":2},"end":{"line":622,"column":42}}},"65":{"name":"getFields","line":631,"loc":{"start":{"line":631,"column":47},"end":{"line":631,"column":68}}},"66":{"name":"_defineFieldMap","line":635,"loc":{"start":{"line":635,"column":53},"end":{"line":635,"column":80}}},"67":{"name":"(anonymous_67)","line":643,"loc":{"start":{"line":643,"column":23},"end":{"line":643,"column":44}}},"68":{"name":"toString","line":655,"loc":{"start":{"line":655,"column":46},"end":{"line":655,"column":66}}},"69":{"name":"(anonymous_69)","line":685,"loc":{"start":{"line":685,"column":40},"end":{"line":685,"column":52}}},"70":{"name":"GraphQLList","line":686,"loc":{"start":{"line":686,"column":2},"end":{"line":686,"column":29}}},"71":{"name":"toString","line":693,"loc":{"start":{"line":693,"column":35},"end":{"line":693,"column":55}}},"72":{"name":"(anonymous_72)","line":726,"loc":{"start":{"line":726,"column":46},"end":{"line":726,"column":58}}},"73":{"name":"GraphQLNonNull","line":727,"loc":{"start":{"line":727,"column":2},"end":{"line":727,"column":32}}},"74":{"name":"toString","line":734,"loc":{"start":{"line":734,"column":38},"end":{"line":734,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":230}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":257}},"4":{"start":{"line":8,"column":52},"end":{"line":8,"column":239}},"5":{"start":{"line":8,"column":97},"end":{"line":8,"column":123}},"6":{"start":{"line":8,"column":124},"end":{"line":8,"column":237}},"7":{"start":{"line":8,"column":150},"end":{"line":8,"column":235}},"8":{"start":{"line":8,"column":207},"end":{"line":8,"column":233}},"9":{"start":{"line":8,"column":240},"end":{"line":8,"column":254}},"10":{"start":{"line":10,"column":0},"end":{"line":10,"column":24}},"11":{"start":{"line":11,"column":0},"end":{"line":11,"column":32}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":34}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":42}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":36}},"15":{"start":{"line":15,"column":0},"end":{"line":15,"column":44}},"16":{"start":{"line":16,"column":0},"end":{"line":16,"column":32}},"17":{"start":{"line":17,"column":0},"end":{"line":17,"column":40}},"18":{"start":{"line":18,"column":0},"end":{"line":18,"column":42}},"19":{"start":{"line":19,"column":0},"end":{"line":19,"column":50}},"20":{"start":{"line":20,"column":0},"end":{"line":20,"column":40}},"21":{"start":{"line":21,"column":0},"end":{"line":21,"column":48}},"22":{"start":{"line":22,"column":0},"end":{"line":22,"column":42}},"23":{"start":{"line":23,"column":0},"end":{"line":23,"column":34}},"24":{"start":{"line":24,"column":0},"end":{"line":24,"column":42}},"25":{"start":{"line":25,"column":0},"end":{"line":25,"column":36}},"26":{"start":{"line":27,"column":0},"end":{"line":27,"column":49}},"27":{"start":{"line":29,"column":0},"end":{"line":29,"column":53}},"28":{"start":{"line":31,"column":0},"end":{"line":31,"column":49}},"29":{"start":{"line":33,"column":0},"end":{"line":33,"column":53}},"30":{"start":{"line":35,"column":0},"end":{"line":35,"column":42}},"31":{"start":{"line":37,"column":0},"end":{"line":37,"column":63}},"32":{"start":{"line":39,"column":0},"end":{"line":39,"column":97}},"33":{"start":{"line":39,"column":39},"end":{"line":39,"column":95}},"34":{"start":{"line":41,"column":0},"end":{"line":41,"column":153}},"35":{"start":{"line":41,"column":50},"end":{"line":41,"column":151}},"36":{"start":{"line":41,"column":92},"end":{"line":41,"column":149}},"37":{"start":{"line":56,"column":0},"end":{"line":58,"column":1}},"38":{"start":{"line":57,"column":2},"end":{"line":57,"column":298}},"39":{"start":{"line":60,"column":0},"end":{"line":63,"column":1}},"40":{"start":{"line":61,"column":2},"end":{"line":61,"column":96}},"41":{"start":{"line":62,"column":2},"end":{"line":62,"column":14}},"42":{"start":{"line":68,"column":0},"end":{"line":71,"column":1}},"43":{"start":{"line":69,"column":2},"end":{"line":69,"column":37}},"44":{"start":{"line":70,"column":2},"end":{"line":70,"column":135}},"45":{"start":{"line":73,"column":0},"end":{"line":76,"column":1}},"46":{"start":{"line":74,"column":2},"end":{"line":74,"column":107}},"47":{"start":{"line":75,"column":2},"end":{"line":75,"column":14}},"48":{"start":{"line":81,"column":0},"end":{"line":84,"column":1}},"49":{"start":{"line":82,"column":2},"end":{"line":82,"column":37}},"50":{"start":{"line":83,"column":2},"end":{"line":83,"column":216}},"51":{"start":{"line":86,"column":0},"end":{"line":89,"column":1}},"52":{"start":{"line":87,"column":2},"end":{"line":87,"column":109}},"53":{"start":{"line":88,"column":2},"end":{"line":88,"column":14}},"54":{"start":{"line":94,"column":0},"end":{"line":96,"column":1}},"55":{"start":{"line":95,"column":2},"end":{"line":95,"column":78}},"56":{"start":{"line":98,"column":0},"end":{"line":101,"column":1}},"57":{"start":{"line":99,"column":2},"end":{"line":99,"column":105}},"58":{"start":{"line":100,"column":2},"end":{"line":100,"column":14}},"59":{"start":{"line":106,"column":0},"end":{"line":108,"column":1}},"60":{"start":{"line":107,"column":2},"end":{"line":107,"column":119}},"61":{"start":{"line":110,"column":0},"end":{"line":113,"column":1}},"62":{"start":{"line":111,"column":2},"end":{"line":111,"column":115}},"63":{"start":{"line":112,"column":2},"end":{"line":112,"column":14}},"64":{"start":{"line":118,"column":0},"end":{"line":120,"column":1}},"65":{"start":{"line":119,"column":2},"end":{"line":119,"column":82}},"66":{"start":{"line":122,"column":0},"end":{"line":125,"column":1}},"67":{"start":{"line":123,"column":2},"end":{"line":123,"column":113}},"68":{"start":{"line":124,"column":2},"end":{"line":124,"column":14}},"69":{"start":{"line":130,"column":0},"end":{"line":132,"column":1}},"70":{"start":{"line":131,"column":2},"end":{"line":131,"column":61}},"71":{"start":{"line":137,"column":0},"end":{"line":139,"column":1}},"72":{"start":{"line":138,"column":2},"end":{"line":138,"column":233}},"73":{"start":{"line":141,"column":0},"end":{"line":144,"column":1}},"74":{"start":{"line":142,"column":2},"end":{"line":142,"column":107}},"75":{"start":{"line":143,"column":2},"end":{"line":143,"column":14}},"76":{"start":{"line":146,"column":0},"end":{"line":152,"column":1}},"77":{"start":{"line":147,"column":2},"end":{"line":147,"column":28}},"78":{"start":{"line":148,"column":2},"end":{"line":150,"column":3}},"79":{"start":{"line":149,"column":4},"end":{"line":149,"column":43}},"80":{"start":{"line":151,"column":2},"end":{"line":151,"column":24}},"81":{"start":{"line":160,"column":0},"end":{"line":162,"column":1}},"82":{"start":{"line":161,"column":2},"end":{"line":161,"column":55}},"83":{"start":{"line":182,"column":0},"end":{"line":225,"column":4}},"84":{"start":{"line":183,"column":2},"end":{"line":194,"column":3}},"85":{"start":{"line":184,"column":4},"end":{"line":184,"column":45}},"86":{"start":{"line":186,"column":4},"end":{"line":186,"column":55}},"87":{"start":{"line":187,"column":4},"end":{"line":187,"column":28}},"88":{"start":{"line":188,"column":4},"end":{"line":188,"column":42}},"89":{"start":{"line":189,"column":4},"end":{"line":189,"column":251}},"90":{"start":{"line":190,"column":4},"end":{"line":192,"column":5}},"91":{"start":{"line":191,"column":6},"end":{"line":191,"column":199}},"92":{"start":{"line":193,"column":4},"end":{"line":193,"column":32}},"93":{"start":{"line":199,"column":2},"end":{"line":202,"column":4}},"94":{"start":{"line":200,"column":4},"end":{"line":200,"column":50}},"95":{"start":{"line":201,"column":4},"end":{"line":201,"column":29}},"96":{"start":{"line":207,"column":2},"end":{"line":210,"column":4}},"97":{"start":{"line":208,"column":4},"end":{"line":208,"column":47}},"98":{"start":{"line":209,"column":4},"end":{"line":209,"column":41}},"99":{"start":{"line":215,"column":2},"end":{"line":218,"column":4}},"100":{"start":{"line":216,"column":4},"end":{"line":216,"column":49}},"101":{"start":{"line":217,"column":4},"end":{"line":217,"column":45}},"102":{"start":{"line":220,"column":2},"end":{"line":222,"column":4}},"103":{"start":{"line":221,"column":4},"end":{"line":221,"column":21}},"104":{"start":{"line":224,"column":2},"end":{"line":224,"column":27}},"105":{"start":{"line":230,"column":0},"end":{"line":230,"column":112}},"106":{"start":{"line":269,"column":0},"end":{"line":296,"column":4}},"107":{"start":{"line":270,"column":2},"end":{"line":281,"column":3}},"108":{"start":{"line":271,"column":4},"end":{"line":271,"column":45}},"109":{"start":{"line":273,"column":4},"end":{"line":273,"column":79}},"110":{"start":{"line":274,"column":4},"end":{"line":274,"column":28}},"111":{"start":{"line":275,"column":4},"end":{"line":275,"column":42}},"112":{"start":{"line":276,"column":4},"end":{"line":278,"column":5}},"113":{"start":{"line":277,"column":6},"end":{"line":277,"column":125}},"114":{"start":{"line":279,"column":4},"end":{"line":279,"column":36}},"115":{"start":{"line":280,"column":4},"end":{"line":280,"column":30}},"116":{"start":{"line":283,"column":2},"end":{"line":285,"column":4}},"117":{"start":{"line":284,"column":4},"end":{"line":284,"column":90}},"118":{"start":{"line":287,"column":2},"end":{"line":289,"column":4}},"119":{"start":{"line":288,"column":4},"end":{"line":288,"column":104}},"120":{"start":{"line":291,"column":2},"end":{"line":293,"column":4}},"121":{"start":{"line":292,"column":4},"end":{"line":292,"column":21}},"122":{"start":{"line":295,"column":2},"end":{"line":295,"column":27}},"123":{"start":{"line":301,"column":0},"end":{"line":301,"column":112}},"124":{"start":{"line":303,"column":0},"end":{"line":316,"column":1}},"125":{"start":{"line":304,"column":2},"end":{"line":304,"column":49}},"126":{"start":{"line":305,"column":2},"end":{"line":307,"column":3}},"127":{"start":{"line":306,"column":4},"end":{"line":306,"column":14}},"128":{"start":{"line":308,"column":2},"end":{"line":308,"column":141}},"129":{"start":{"line":309,"column":2},"end":{"line":314,"column":5}},"130":{"start":{"line":310,"column":4},"end":{"line":310,"column":171}},"131":{"start":{"line":311,"column":4},"end":{"line":313,"column":5}},"132":{"start":{"line":312,"column":6},"end":{"line":312,"column":312}},"133":{"start":{"line":315,"column":2},"end":{"line":315,"column":20}},"134":{"start":{"line":318,"column":0},"end":{"line":357,"column":1}},"135":{"start":{"line":319,"column":2},"end":{"line":319,"column":43}},"136":{"start":{"line":320,"column":2},"end":{"line":320,"column":164}},"137":{"start":{"line":322,"column":2},"end":{"line":322,"column":41}},"138":{"start":{"line":323,"column":2},"end":{"line":323,"column":165}},"139":{"start":{"line":325,"column":2},"end":{"line":325,"column":26}},"140":{"start":{"line":326,"column":2},"end":{"line":355,"column":5}},"141":{"start":{"line":327,"column":4},"end":{"line":327,"column":53}},"142":{"start":{"line":328,"column":4},"end":{"line":328,"column":42}},"143":{"start":{"line":329,"column":4},"end":{"line":329,"column":119}},"144":{"start":{"line":330,"column":4},"end":{"line":330,"column":175}},"145":{"start":{"line":331,"column":4},"end":{"line":334,"column":7}},"146":{"start":{"line":335,"column":4},"end":{"line":335,"column":164}},"147":{"start":{"line":336,"column":4},"end":{"line":336,"column":189}},"148":{"start":{"line":337,"column":4},"end":{"line":337,"column":38}},"149":{"start":{"line":338,"column":4},"end":{"line":353,"column":5}},"150":{"start":{"line":339,"column":6},"end":{"line":339,"column":22}},"151":{"start":{"line":341,"column":6},"end":{"line":341,"column":146}},"152":{"start":{"line":342,"column":6},"end":{"line":352,"column":9}},"153":{"start":{"line":343,"column":8},"end":{"line":343,"column":55}},"154":{"start":{"line":344,"column":8},"end":{"line":344,"column":38}},"155":{"start":{"line":345,"column":8},"end":{"line":345,"column":183}},"156":{"start":{"line":346,"column":8},"end":{"line":351,"column":10}},"157":{"start":{"line":354,"column":4},"end":{"line":354,"column":38}},"158":{"start":{"line":356,"column":2},"end":{"line":356,"column":24}},"159":{"start":{"line":359,"column":0},"end":{"line":361,"column":1}},"160":{"start":{"line":360,"column":2},"end":{"line":360,"column":63}},"161":{"start":{"line":364,"column":0},"end":{"line":366,"column":1}},"162":{"start":{"line":365,"column":2},"end":{"line":365,"column":60}},"163":{"start":{"line":386,"column":0},"end":{"line":409,"column":4}},"164":{"start":{"line":387,"column":2},"end":{"line":398,"column":3}},"165":{"start":{"line":388,"column":4},"end":{"line":388,"column":48}},"166":{"start":{"line":390,"column":4},"end":{"line":390,"column":55}},"167":{"start":{"line":391,"column":4},"end":{"line":391,"column":28}},"168":{"start":{"line":392,"column":4},"end":{"line":392,"column":42}},"169":{"start":{"line":393,"column":4},"end":{"line":395,"column":5}},"170":{"start":{"line":394,"column":6},"end":{"line":394,"column":131}},"171":{"start":{"line":396,"column":4},"end":{"line":396,"column":42}},"172":{"start":{"line":397,"column":4},"end":{"line":397,"column":30}},"173":{"start":{"line":400,"column":2},"end":{"line":402,"column":4}},"174":{"start":{"line":401,"column":4},"end":{"line":401,"column":90}},"175":{"start":{"line":404,"column":2},"end":{"line":406,"column":4}},"176":{"start":{"line":405,"column":4},"end":{"line":405,"column":21}},"177":{"start":{"line":408,"column":2},"end":{"line":408,"column":30}},"178":{"start":{"line":414,"column":0},"end":{"line":414,"column":121}},"179":{"start":{"line":439,"column":0},"end":{"line":462,"column":4}},"180":{"start":{"line":440,"column":2},"end":{"line":451,"column":3}},"181":{"start":{"line":441,"column":4},"end":{"line":441,"column":44}},"182":{"start":{"line":443,"column":4},"end":{"line":443,"column":55}},"183":{"start":{"line":444,"column":4},"end":{"line":444,"column":28}},"184":{"start":{"line":445,"column":4},"end":{"line":445,"column":42}},"185":{"start":{"line":446,"column":4},"end":{"line":448,"column":5}},"186":{"start":{"line":447,"column":6},"end":{"line":447,"column":131}},"187":{"start":{"line":449,"column":4},"end":{"line":449,"column":42}},"188":{"start":{"line":450,"column":4},"end":{"line":450,"column":30}},"189":{"start":{"line":453,"column":2},"end":{"line":455,"column":4}},"190":{"start":{"line":454,"column":4},"end":{"line":454,"column":84}},"191":{"start":{"line":457,"column":2},"end":{"line":459,"column":4}},"192":{"start":{"line":458,"column":4},"end":{"line":458,"column":21}},"193":{"start":{"line":461,"column":2},"end":{"line":461,"column":26}},"194":{"start":{"line":467,"column":0},"end":{"line":467,"column":109}},"195":{"start":{"line":469,"column":0},"end":{"line":481,"column":1}},"196":{"start":{"line":470,"column":2},"end":{"line":470,"column":39}},"197":{"start":{"line":472,"column":2},"end":{"line":472,"column":183}},"198":{"start":{"line":473,"column":2},"end":{"line":478,"column":5}},"199":{"start":{"line":474,"column":4},"end":{"line":474,"column":165}},"200":{"start":{"line":475,"column":4},"end":{"line":477,"column":5}},"201":{"start":{"line":476,"column":6},"end":{"line":476,"column":315}},"202":{"start":{"line":480,"column":2},"end":{"line":480,"column":15}},"203":{"start":{"line":504,"column":0},"end":{"line":573,"column":4}},"204":{"start":{"line":505,"column":2},"end":{"line":513,"column":3}},"205":{"start":{"line":506,"column":4},"end":{"line":506,"column":43}},"206":{"start":{"line":508,"column":4},"end":{"line":508,"column":28}},"207":{"start":{"line":509,"column":4},"end":{"line":509,"column":79}},"208":{"start":{"line":510,"column":4},"end":{"line":510,"column":42}},"209":{"start":{"line":511,"column":4},"end":{"line":511,"column":57}},"210":{"start":{"line":512,"column":4},"end":{"line":512,"column":30}},"211":{"start":{"line":515,"column":2},"end":{"line":517,"column":4}},"212":{"start":{"line":516,"column":4},"end":{"line":516,"column":24}},"213":{"start":{"line":519,"column":2},"end":{"line":521,"column":4}},"214":{"start":{"line":520,"column":4},"end":{"line":520,"column":39}},"215":{"start":{"line":523,"column":2},"end":{"line":526,"column":4}},"216":{"start":{"line":524,"column":4},"end":{"line":524,"column":54}},"217":{"start":{"line":525,"column":4},"end":{"line":525,"column":45}},"218":{"start":{"line":528,"column":2},"end":{"line":535,"column":4}},"219":{"start":{"line":529,"column":4},"end":{"line":534,"column":5}},"220":{"start":{"line":530,"column":6},"end":{"line":530,"column":51}},"221":{"start":{"line":531,"column":6},"end":{"line":533,"column":7}},"222":{"start":{"line":532,"column":8},"end":{"line":532,"column":31}},"223":{"start":{"line":537,"column":2},"end":{"line":544,"column":4}},"224":{"start":{"line":538,"column":4},"end":{"line":543,"column":5}},"225":{"start":{"line":539,"column":6},"end":{"line":539,"column":61}},"226":{"start":{"line":540,"column":6},"end":{"line":542,"column":7}},"227":{"start":{"line":541,"column":8},"end":{"line":541,"column":31}},"228":{"start":{"line":546,"column":2},"end":{"line":555,"column":4}},"229":{"start":{"line":547,"column":4},"end":{"line":553,"column":5}},"230":{"start":{"line":548,"column":6},"end":{"line":548,"column":29}},"231":{"start":{"line":549,"column":6},"end":{"line":551,"column":9}},"232":{"start":{"line":550,"column":8},"end":{"line":550,"column":39}},"233":{"start":{"line":552,"column":6},"end":{"line":552,"column":33}},"234":{"start":{"line":554,"column":4},"end":{"line":554,"column":29}},"235":{"start":{"line":557,"column":2},"end":{"line":566,"column":4}},"236":{"start":{"line":558,"column":4},"end":{"line":564,"column":5}},"237":{"start":{"line":559,"column":6},"end":{"line":559,"column":39}},"238":{"start":{"line":560,"column":6},"end":{"line":562,"column":9}},"239":{"start":{"line":561,"column":8},"end":{"line":561,"column":35}},"240":{"start":{"line":563,"column":6},"end":{"line":563,"column":32}},"241":{"start":{"line":565,"column":4},"end":{"line":565,"column":28}},"242":{"start":{"line":568,"column":2},"end":{"line":570,"column":4}},"243":{"start":{"line":569,"column":4},"end":{"line":569,"column":21}},"244":{"start":{"line":572,"column":2},"end":{"line":572,"column":25}},"245":{"start":{"line":578,"column":0},"end":{"line":578,"column":106}},"246":{"start":{"line":580,"column":0},"end":{"line":598,"column":1}},"247":{"start":{"line":582,"column":2},"end":{"line":582,"column":116}},"248":{"start":{"line":583,"column":2},"end":{"line":583,"column":41}},"249":{"start":{"line":584,"column":2},"end":{"line":584,"column":117}},"250":{"start":{"line":585,"column":2},"end":{"line":597,"column":5}},"251":{"start":{"line":586,"column":4},"end":{"line":586,"column":53}},"252":{"start":{"line":587,"column":4},"end":{"line":587,"column":36}},"253":{"start":{"line":588,"column":4},"end":{"line":588,"column":195}},"254":{"start":{"line":589,"column":4},"end":{"line":589,"column":169}},"255":{"start":{"line":590,"column":4},"end":{"line":596,"column":6}},"256":{"start":{"line":621,"column":0},"end":{"line":660,"column":4}},"257":{"start":{"line":622,"column":2},"end":{"line":629,"column":3}},"258":{"start":{"line":623,"column":4},"end":{"line":623,"column":50}},"259":{"start":{"line":625,"column":4},"end":{"line":625,"column":55}},"260":{"start":{"line":626,"column":4},"end":{"line":626,"column":28}},"261":{"start":{"line":627,"column":4},"end":{"line":627,"column":42}},"262":{"start":{"line":628,"column":4},"end":{"line":628,"column":30}},"263":{"start":{"line":631,"column":2},"end":{"line":633,"column":4}},"264":{"start":{"line":632,"column":4},"end":{"line":632,"column":67}},"265":{"start":{"line":635,"column":2},"end":{"line":653,"column":4}},"266":{"start":{"line":636,"column":4},"end":{"line":636,"column":21}},"267":{"start":{"line":638,"column":4},"end":{"line":638,"column":57}},"268":{"start":{"line":639,"column":4},"end":{"line":639,"column":166}},"269":{"start":{"line":640,"column":4},"end":{"line":640,"column":43}},"270":{"start":{"line":641,"column":4},"end":{"line":641,"column":167}},"271":{"start":{"line":642,"column":4},"end":{"line":642,"column":28}},"272":{"start":{"line":643,"column":4},"end":{"line":651,"column":7}},"273":{"start":{"line":644,"column":6},"end":{"line":644,"column":55}},"274":{"start":{"line":645,"column":6},"end":{"line":647,"column":9}},"275":{"start":{"line":648,"column":6},"end":{"line":648,"column":165}},"276":{"start":{"line":649,"column":6},"end":{"line":649,"column":170}},"277":{"start":{"line":650,"column":6},"end":{"line":650,"column":40}},"278":{"start":{"line":652,"column":4},"end":{"line":652,"column":26}},"279":{"start":{"line":655,"column":2},"end":{"line":657,"column":4}},"280":{"start":{"line":656,"column":4},"end":{"line":656,"column":21}},"281":{"start":{"line":659,"column":2},"end":{"line":659,"column":32}},"282":{"start":{"line":665,"column":0},"end":{"line":665,"column":127}},"283":{"start":{"line":685,"column":0},"end":{"line":698,"column":4}},"284":{"start":{"line":686,"column":2},"end":{"line":691,"column":3}},"285":{"start":{"line":687,"column":4},"end":{"line":687,"column":39}},"286":{"start":{"line":689,"column":4},"end":{"line":689,"column":115}},"287":{"start":{"line":690,"column":4},"end":{"line":690,"column":23}},"288":{"start":{"line":693,"column":2},"end":{"line":695,"column":4}},"289":{"start":{"line":694,"column":4},"end":{"line":694,"column":43}},"290":{"start":{"line":697,"column":2},"end":{"line":697,"column":21}},"291":{"start":{"line":703,"column":0},"end":{"line":703,"column":94}},"292":{"start":{"line":726,"column":0},"end":{"line":739,"column":4}},"293":{"start":{"line":727,"column":2},"end":{"line":732,"column":3}},"294":{"start":{"line":728,"column":4},"end":{"line":728,"column":42}},"295":{"start":{"line":730,"column":4},"end":{"line":730,"column":166}},"296":{"start":{"line":731,"column":4},"end":{"line":731,"column":23}},"297":{"start":{"line":734,"column":2},"end":{"line":736,"column":4}},"298":{"start":{"line":735,"column":4},"end":{"line":735,"column":40}},"299":{"start":{"line":738,"column":2},"end":{"line":738,"column":24}},"300":{"start":{"line":744,"column":0},"end":{"line":744,"column":103}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":15},"end":{"line":8,"column":28}},{"start":{"line":8,"column":32},"end":{"line":8,"column":256}}]},"2":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":150},"end":{"line":8,"column":150}},{"start":{"line":8,"column":150},"end":{"line":8,"column":150}}]},"3":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":70},"end":{"line":39,"column":73}},{"start":{"line":39,"column":76},"end":{"line":39,"column":94}}]},"4":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":46},"end":{"line":39,"column":49}},{"start":{"line":39,"column":53},"end":{"line":39,"column":67}}]},"5":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":50},"end":{"line":41,"column":50}},{"start":{"line":41,"column":50},"end":{"line":41,"column":50}}]},"6":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":9},"end":{"line":57,"column":42}},{"start":{"line":57,"column":46},"end":{"line":57,"column":79}},{"start":{"line":57,"column":83},"end":{"line":57,"column":119}},{"start":{"line":57,"column":123},"end":{"line":57,"column":155}},{"start":{"line":57,"column":159},"end":{"line":57,"column":190}},{"start":{"line":57,"column":194},"end":{"line":57,"column":232}},{"start":{"line":57,"column":236},"end":{"line":57,"column":263}},{"start":{"line":57,"column":267},"end":{"line":57,"column":297}}]},"7":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":9},"end":{"line":70,"column":47}},{"start":{"line":70,"column":51},"end":{"line":70,"column":87}},{"start":{"line":70,"column":91},"end":{"line":70,"column":134}}]},"8":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":9},"end":{"line":83,"column":47}},{"start":{"line":83,"column":51},"end":{"line":83,"column":89}},{"start":{"line":83,"column":93},"end":{"line":83,"column":134}},{"start":{"line":83,"column":138},"end":{"line":83,"column":175}},{"start":{"line":83,"column":179},"end":{"line":83,"column":215}}]},"9":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":9},"end":{"line":95,"column":42}},{"start":{"line":95,"column":46},"end":{"line":95,"column":77}}]},"10":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":9},"end":{"line":107,"column":42}},{"start":{"line":107,"column":46},"end":{"line":107,"column":82}},{"start":{"line":107,"column":86},"end":{"line":107,"column":118}}]},"11":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":9},"end":{"line":119,"column":45}},{"start":{"line":119,"column":49},"end":{"line":119,"column":81}}]},"12":{"line":131,"type":"cond-expr","locations":[{"start":{"line":131,"column":42},"end":{"line":131,"column":53}},{"start":{"line":131,"column":56},"end":{"line":131,"column":60}}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":9},"end":{"line":138,"column":42}},{"start":{"line":138,"column":46},"end":{"line":138,"column":79}},{"start":{"line":138,"column":83},"end":{"line":138,"column":119}},{"start":{"line":138,"column":123},"end":{"line":138,"column":155}},{"start":{"line":138,"column":159},"end":{"line":138,"column":190}},{"start":{"line":138,"column":194},"end":{"line":138,"column":232}}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":9},"end":{"line":148,"column":46}},{"start":{"line":148,"column":50},"end":{"line":148,"column":90}}]},"15":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":39},"end":{"line":161,"column":46}},{"start":{"line":161,"column":49},"end":{"line":161,"column":54}}]},"16":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":4}},{"start":{"line":190,"column":4},"end":{"line":190,"column":4}}]},"17":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":8},"end":{"line":190,"column":25}},{"start":{"line":190,"column":29},"end":{"line":190,"column":48}}]},"18":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":31},"end":{"line":191,"column":70}},{"start":{"line":191,"column":74},"end":{"line":191,"column":115}}]},"19":{"line":209,"type":"cond-expr","locations":[{"start":{"line":209,"column":20},"end":{"line":209,"column":33}},{"start":{"line":209,"column":36},"end":{"line":209,"column":40}}]},"20":{"line":217,"type":"cond-expr","locations":[{"start":{"line":217,"column":20},"end":{"line":217,"column":37}},{"start":{"line":217,"column":40},"end":{"line":217,"column":44}}]},"21":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"22":{"line":284,"type":"binary-expr","locations":[{"start":{"line":284,"column":11},"end":{"line":284,"column":23}},{"start":{"line":284,"column":28},"end":{"line":284,"column":88}}]},"23":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":11},"end":{"line":288,"column":27}},{"start":{"line":288,"column":32},"end":{"line":288,"column":102}}]},"24":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":2},"end":{"line":305,"column":2}},{"start":{"line":305,"column":2},"end":{"line":305,"column":2}}]},"25":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":4},"end":{"line":311,"column":4}},{"start":{"line":311,"column":4},"end":{"line":311,"column":4}}]},"26":{"line":338,"type":"if","locations":[{"start":{"line":338,"column":4},"end":{"line":338,"column":4}},{"start":{"line":338,"column":4},"end":{"line":338,"column":4}}]},"27":{"line":348,"type":"cond-expr","locations":[{"start":{"line":348,"column":55},"end":{"line":348,"column":59}},{"start":{"line":348,"column":62},"end":{"line":348,"column":77}}]},"28":{"line":360,"type":"binary-expr","locations":[{"start":{"line":360,"column":9},"end":{"line":360,"column":12}},{"start":{"line":360,"column":16},"end":{"line":360,"column":39}},{"start":{"line":360,"column":43},"end":{"line":360,"column":62}}]},"29":{"line":365,"type":"binary-expr","locations":[{"start":{"line":365,"column":9},"end":{"line":365,"column":25}},{"start":{"line":365,"column":29},"end":{"line":365,"column":59}}]},"30":{"line":393,"type":"if","locations":[{"start":{"line":393,"column":4},"end":{"line":393,"column":4}},{"start":{"line":393,"column":4},"end":{"line":393,"column":4}}]},"31":{"line":401,"type":"binary-expr","locations":[{"start":{"line":401,"column":11},"end":{"line":401,"column":23}},{"start":{"line":401,"column":28},"end":{"line":401,"column":88}}]},"32":{"line":446,"type":"if","locations":[{"start":{"line":446,"column":4},"end":{"line":446,"column":4}},{"start":{"line":446,"column":4},"end":{"line":446,"column":4}}]},"33":{"line":454,"type":"binary-expr","locations":[{"start":{"line":454,"column":11},"end":{"line":454,"column":22}},{"start":{"line":454,"column":27},"end":{"line":454,"column":82}}]},"34":{"line":472,"type":"binary-expr","locations":[{"start":{"line":472,"column":27},"end":{"line":472,"column":47}},{"start":{"line":472,"column":51},"end":{"line":472,"column":67}}]},"35":{"line":475,"type":"if","locations":[{"start":{"line":475,"column":4},"end":{"line":475,"column":4}},{"start":{"line":475,"column":4},"end":{"line":475,"column":4}}]},"36":{"line":525,"type":"cond-expr","locations":[{"start":{"line":525,"column":23},"end":{"line":525,"column":37}},{"start":{"line":525,"column":40},"end":{"line":525,"column":44}}]},"37":{"line":529,"type":"if","locations":[{"start":{"line":529,"column":4},"end":{"line":529,"column":4}},{"start":{"line":529,"column":4},"end":{"line":529,"column":4}}]},"38":{"line":531,"type":"if","locations":[{"start":{"line":531,"column":6},"end":{"line":531,"column":6}},{"start":{"line":531,"column":6},"end":{"line":531,"column":6}}]},"39":{"line":538,"type":"if","locations":[{"start":{"line":538,"column":4},"end":{"line":538,"column":4}},{"start":{"line":538,"column":4},"end":{"line":538,"column":4}}]},"40":{"line":540,"type":"if","locations":[{"start":{"line":540,"column":6},"end":{"line":540,"column":6}},{"start":{"line":540,"column":6},"end":{"line":540,"column":6}}]},"41":{"line":547,"type":"if","locations":[{"start":{"line":547,"column":4},"end":{"line":547,"column":4}},{"start":{"line":547,"column":4},"end":{"line":547,"column":4}}]},"42":{"line":558,"type":"if","locations":[{"start":{"line":558,"column":4},"end":{"line":558,"column":4}},{"start":{"line":558,"column":4},"end":{"line":558,"column":4}}]},"43":{"line":595,"type":"cond-expr","locations":[{"start":{"line":595,"column":53},"end":{"line":595,"column":62}},{"start":{"line":595,"column":65},"end":{"line":595,"column":76}}]},"44":{"line":632,"type":"binary-expr","locations":[{"start":{"line":632,"column":11},"end":{"line":632,"column":23}},{"start":{"line":632,"column":28},"end":{"line":632,"column":65}}]},"45":{"line":730,"type":"binary-expr","locations":[{"start":{"line":730,"column":29},"end":{"line":730,"column":41}},{"start":{"line":730,"column":45},"end":{"line":730,"column":78}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.GraphQLNonNull = exports.GraphQLList = exports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = undefined;","","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };","","exports.isType = isType;","exports.assertType = assertType;","exports.isInputType = isInputType;","exports.assertInputType = assertInputType;","exports.isOutputType = isOutputType;","exports.assertOutputType = assertOutputType;","exports.isLeafType = isLeafType;","exports.assertLeafType = assertLeafType;","exports.isCompositeType = isCompositeType;","exports.assertCompositeType = assertCompositeType;","exports.isAbstractType = isAbstractType;","exports.assertAbstractType = assertAbstractType;","exports.getNullableType = getNullableType;","exports.isNamedType = isNamedType;","exports.assertNamedType = assertNamedType;","exports.getNamedType = getNamedType;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _kinds = require('../language/kinds');","","var _assertValidName = require('../utilities/assertValidName');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","// Predicates & Assertions","","/**"," * These are all of the possible kinds of types."," */","function isType(type) {","  return type instanceof GraphQLScalarType || type instanceof GraphQLObjectType || type instanceof GraphQLInterfaceType || type instanceof GraphQLUnionType || type instanceof GraphQLEnumType || type instanceof GraphQLInputObjectType || type instanceof GraphQLList || type instanceof GraphQLNonNull;","}","","function assertType(type) {","  (0, _invariant2.default)(isType(type), 'Expected ' + String(type) + ' to be a GraphQL type.');","  return type;","}","","/**"," * These types may be used as input types for arguments and directives."," */","function isInputType(type) {","  var namedType = getNamedType(type);","  return namedType instanceof GraphQLScalarType || namedType instanceof GraphQLEnumType || namedType instanceof GraphQLInputObjectType;","}","","function assertInputType(type) {","  (0, _invariant2.default)(isInputType(type), 'Expected ' + String(type) + ' to be a GraphQL input type.');","  return type;","}","","/**"," * These types may be used as output types as the result of fields."," */","function isOutputType(type) {","  var namedType = getNamedType(type);","  return namedType instanceof GraphQLScalarType || namedType instanceof GraphQLObjectType || namedType instanceof GraphQLInterfaceType || namedType instanceof GraphQLUnionType || namedType instanceof GraphQLEnumType;","}","","function assertOutputType(type) {","  (0, _invariant2.default)(isOutputType(type), 'Expected ' + String(type) + ' to be a GraphQL output type.');","  return type;","}","","/**"," * These types may describe types which may be leaf values."," */","function isLeafType(type) {","  return type instanceof GraphQLScalarType || type instanceof GraphQLEnumType;","}","","function assertLeafType(type) {","  (0, _invariant2.default)(isLeafType(type), 'Expected ' + String(type) + ' to be a GraphQL leaf type.');","  return type;","}","","/**"," * These types may describe the parent context of a selection set."," */","function isCompositeType(type) {","  return type instanceof GraphQLObjectType || type instanceof GraphQLInterfaceType || type instanceof GraphQLUnionType;","}","","function assertCompositeType(type) {","  (0, _invariant2.default)(isCompositeType(type), 'Expected ' + String(type) + ' to be a GraphQL composite type.');","  return type;","}","","/**"," * These types may describe the parent context of a selection set."," */","function isAbstractType(type) {","  return type instanceof GraphQLInterfaceType || type instanceof GraphQLUnionType;","}","","function assertAbstractType(type) {","  (0, _invariant2.default)(isAbstractType(type), 'Expected ' + String(type) + ' to be a GraphQL abstract type.');","  return type;","}","","/**"," * These types can all accept null as a value."," */","function getNullableType(type) {","  return type instanceof GraphQLNonNull ? type.ofType : type;","}","","/**"," * These named types do not include modifiers like List or NonNull."," */","function isNamedType(type) {","  return type instanceof GraphQLScalarType || type instanceof GraphQLObjectType || type instanceof GraphQLInterfaceType || type instanceof GraphQLUnionType || type instanceof GraphQLEnumType || type instanceof GraphQLInputObjectType;","}","","function assertNamedType(type) {","  (0, _invariant2.default)(isNamedType(type), 'Expected ' + String(type) + ' to be a GraphQL named type.');","  return type;","}","","function getNamedType(type) {","  var unmodifiedType = type;","  while (unmodifiedType instanceof GraphQLList || unmodifiedType instanceof GraphQLNonNull) {","    unmodifiedType = unmodifiedType.ofType;","  }","  return unmodifiedType;","}","","/**"," * Used while defining GraphQL types to allow for circular references in"," * otherwise immutable type definitions."," */","","","function resolveThunk(thunk) {","  return typeof thunk === 'function' ? thunk() : thunk;","}","","/**"," * Scalar Type Definition"," *"," * The leaf values of any request and input values to arguments are"," * Scalars (or Enums) and are defined with a name and a series of functions"," * used to parse input from ast or variables and to ensure validity."," *"," * Example:"," *"," *     const OddType = new GraphQLScalarType({"," *       name: 'Odd',"," *       serialize(value) {"," *         return value % 2 === 1 ? value : null;"," *       }"," *     });"," *"," */","","var GraphQLScalarType = exports.GraphQLScalarType = function () {","  function GraphQLScalarType(config) {","    _classCallCheck(this, GraphQLScalarType);","","    (0, _assertValidName.assertValidName)(config.name);","    this.name = config.name;","    this.description = config.description;","    (0, _invariant2.default)(typeof config.serialize === 'function', this.name + ' must provide \"serialize\" function. If this custom Scalar ' + 'is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" ' + 'functions are also provided.');","    if (config.parseValue || config.parseLiteral) {","      (0, _invariant2.default)(typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function', this.name + ' must provide both \"parseValue\" and \"parseLiteral\" ' + 'functions.');","    }","    this._scalarConfig = config;","  }","","  // Serializes an internal value to include in a response.","","","  GraphQLScalarType.prototype.serialize = function serialize(value) {","    var serializer = this._scalarConfig.serialize;","    return serializer(value);","  };","","  // Parses an externally provided value to use as an input.","","","  GraphQLScalarType.prototype.parseValue = function parseValue(value) {","    var parser = this._scalarConfig.parseValue;","    return parser ? parser(value) : null;","  };","","  // Parses an externally provided literal value to use as an input.","","","  GraphQLScalarType.prototype.parseLiteral = function parseLiteral(valueNode) {","    var parser = this._scalarConfig.parseLiteral;","    return parser ? parser(valueNode) : null;","  };","","  GraphQLScalarType.prototype.toString = function toString() {","    return this.name;","  };","","  return GraphQLScalarType;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLScalarType.prototype.toJSON = GraphQLScalarType.prototype.inspect = GraphQLScalarType.prototype.toString;","","/**"," * Object Type Definition"," *"," * Almost all of the GraphQL types you define will be object types. Object types"," * have a name, but most importantly describe their fields."," *"," * Example:"," *"," *     const AddressType = new GraphQLObjectType({"," *       name: 'Address',"," *       fields: {"," *         street: { type: GraphQLString },"," *         number: { type: GraphQLInt },"," *         formatted: {"," *           type: GraphQLString,"," *           resolve(obj) {"," *             return obj.number + ' ' + obj.street"," *           }"," *         }"," *       }"," *     });"," *"," * When two types need to refer to each other, or a type needs to refer to"," * itself in a field, you can use a function expression (aka a closure or a"," * thunk) to supply the fields lazily."," *"," * Example:"," *"," *     const PersonType = new GraphQLObjectType({"," *       name: 'Person',"," *       fields: () => ({"," *         name: { type: GraphQLString },"," *         bestFriend: { type: PersonType },"," *       })"," *     });"," *"," */","var GraphQLObjectType = exports.GraphQLObjectType = function () {","  function GraphQLObjectType(config) {","    _classCallCheck(this, GraphQLObjectType);","","    (0, _assertValidName.assertValidName)(config.name, config.isIntrospection);","    this.name = config.name;","    this.description = config.description;","    if (config.isTypeOf) {","      (0, _invariant2.default)(typeof config.isTypeOf === 'function', this.name + ' must provide \"isTypeOf\" as a function.');","    }","    this.isTypeOf = config.isTypeOf;","    this._typeConfig = config;","  }","","  GraphQLObjectType.prototype.getFields = function getFields() {","    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));","  };","","  GraphQLObjectType.prototype.getInterfaces = function getInterfaces() {","    return this._interfaces || (this._interfaces = defineInterfaces(this, this._typeConfig.interfaces));","  };","","  GraphQLObjectType.prototype.toString = function toString() {","    return this.name;","  };","","  return GraphQLObjectType;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLObjectType.prototype.toJSON = GraphQLObjectType.prototype.inspect = GraphQLObjectType.prototype.toString;","","function defineInterfaces(type, interfacesThunk) {","  var interfaces = resolveThunk(interfacesThunk);","  if (!interfaces) {","    return [];","  }","  (0, _invariant2.default)(Array.isArray(interfaces), type.name + ' interfaces must be an Array or a function which returns ' + 'an Array.');","  interfaces.forEach(function (iface) {","    (0, _invariant2.default)(iface instanceof GraphQLInterfaceType, type.name + ' may only implement Interface types, it cannot ' + ('implement: ' + String(iface) + '.'));","    if (typeof iface.resolveType !== 'function') {","      (0, _invariant2.default)(typeof type.isTypeOf === 'function', 'Interface Type ' + iface.name + ' does not provide a \"resolveType\" ' + ('function and implementing Type ' + type.name + ' does not provide a ') + '\"isTypeOf\" function. There is no way to resolve this implementing ' + 'type during execution.');","    }","  });","  return interfaces;","}","","function defineFieldMap(type, fieldsThunk) {","  var fieldMap = resolveThunk(fieldsThunk);","  (0, _invariant2.default)(isPlainObj(fieldMap), type.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.');","","  var fieldNames = Object.keys(fieldMap);","  (0, _invariant2.default)(fieldNames.length > 0, type.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.');","","  var resultFieldMap = {};","  fieldNames.forEach(function (fieldName) {","    (0, _assertValidName.assertValidName)(fieldName);","    var fieldConfig = fieldMap[fieldName];","    (0, _invariant2.default)(isPlainObj(fieldConfig), type.name + '.' + fieldName + ' field config must be an object');","    (0, _invariant2.default)(!fieldConfig.hasOwnProperty('isDeprecated'), type.name + '.' + fieldName + ' should provide \"deprecationReason\" instead ' + 'of \"isDeprecated\".');","    var field = _extends({}, fieldConfig, {","      isDeprecated: Boolean(fieldConfig.deprecationReason),","      name: fieldName","    });","    (0, _invariant2.default)(isOutputType(field.type), type.name + '.' + fieldName + ' field type must be Output Type but ' + ('got: ' + String(field.type) + '.'));","    (0, _invariant2.default)(isValidResolver(field.resolve), type.name + '.' + fieldName + ' field resolver must be a function if ' + ('provided, but got: ' + String(field.resolve) + '.'));","    var argsConfig = fieldConfig.args;","    if (!argsConfig) {","      field.args = [];","    } else {","      (0, _invariant2.default)(isPlainObj(argsConfig), type.name + '.' + fieldName + ' args must be an object with argument ' + 'names as keys.');","      field.args = Object.keys(argsConfig).map(function (argName) {","        (0, _assertValidName.assertValidName)(argName);","        var arg = argsConfig[argName];","        (0, _invariant2.default)(isInputType(arg.type), type.name + '.' + fieldName + '(' + argName + ':) argument type must be ' + ('Input Type but got: ' + String(arg.type) + '.'));","        return {","          name: argName,","          description: arg.description === undefined ? null : arg.description,","          type: arg.type,","          defaultValue: arg.defaultValue","        };","      });","    }","    resultFieldMap[fieldName] = field;","  });","  return resultFieldMap;","}","","function isPlainObj(obj) {","  return obj && typeof obj === 'object' && !Array.isArray(obj);","}","","// If a resolver is defined, it must be a function.","function isValidResolver(resolver) {","  return resolver == null || typeof resolver === 'function';","}","","/**"," * Interface Type Definition"," *"," * When a field can return one of a heterogeneous set of types, a Interface type"," * is used to describe what types are possible, what fields are in common across"," * all types, as well as a function to determine which type is actually used"," * when the field is resolved."," *"," * Example:"," *"," *     const EntityType = new GraphQLInterfaceType({"," *       name: 'Entity',"," *       fields: {"," *         name: { type: GraphQLString }"," *       }"," *     });"," *"," */","var GraphQLInterfaceType = exports.GraphQLInterfaceType = function () {","  function GraphQLInterfaceType(config) {","    _classCallCheck(this, GraphQLInterfaceType);","","    (0, _assertValidName.assertValidName)(config.name);","    this.name = config.name;","    this.description = config.description;","    if (config.resolveType) {","      (0, _invariant2.default)(typeof config.resolveType === 'function', this.name + ' must provide \"resolveType\" as a function.');","    }","    this.resolveType = config.resolveType;","    this._typeConfig = config;","  }","","  GraphQLInterfaceType.prototype.getFields = function getFields() {","    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));","  };","","  GraphQLInterfaceType.prototype.toString = function toString() {","    return this.name;","  };","","  return GraphQLInterfaceType;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLInterfaceType.prototype.toJSON = GraphQLInterfaceType.prototype.inspect = GraphQLInterfaceType.prototype.toString;","","/**"," * Union Type Definition"," *"," * When a field can return one of a heterogeneous set of types, a Union type"," * is used to describe what types are possible as well as providing a function"," * to determine which type is actually used when the field is resolved."," *"," * Example:"," *"," *     const PetType = new GraphQLUnionType({"," *       name: 'Pet',"," *       types: [ DogType, CatType ],"," *       resolveType(value) {"," *         if (value instanceof Dog) {"," *           return DogType;"," *         }"," *         if (value instanceof Cat) {"," *           return CatType;"," *         }"," *       }"," *     });"," *"," */","var GraphQLUnionType = exports.GraphQLUnionType = function () {","  function GraphQLUnionType(config) {","    _classCallCheck(this, GraphQLUnionType);","","    (0, _assertValidName.assertValidName)(config.name);","    this.name = config.name;","    this.description = config.description;","    if (config.resolveType) {","      (0, _invariant2.default)(typeof config.resolveType === 'function', this.name + ' must provide \"resolveType\" as a function.');","    }","    this.resolveType = config.resolveType;","    this._typeConfig = config;","  }","","  GraphQLUnionType.prototype.getTypes = function getTypes() {","    return this._types || (this._types = defineTypes(this, this._typeConfig.types));","  };","","  GraphQLUnionType.prototype.toString = function toString() {","    return this.name;","  };","","  return GraphQLUnionType;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLUnionType.prototype.toJSON = GraphQLUnionType.prototype.inspect = GraphQLUnionType.prototype.toString;","","function defineTypes(unionType, typesThunk) {","  var types = resolveThunk(typesThunk);","","  (0, _invariant2.default)(Array.isArray(types) && types.length > 0, 'Must provide Array of types or a function which returns ' + ('such an array for Union ' + unionType.name + '.'));","  types.forEach(function (objType) {","    (0, _invariant2.default)(objType instanceof GraphQLObjectType, unionType.name + ' may only contain Object types, it cannot contain: ' + (String(objType) + '.'));","    if (typeof unionType.resolveType !== 'function') {","      (0, _invariant2.default)(typeof objType.isTypeOf === 'function', 'Union type \"' + unionType.name + '\" does not provide a \"resolveType\" ' + ('function and possible type \"' + objType.name + '\" does not provide an ') + '\"isTypeOf\" function. There is no way to resolve this possible type ' + 'during execution.');","    }","  });","","  return types;","}","","/**"," * Enum Type Definition"," *"," * Some leaf values of requests and input values are Enums. GraphQL serializes"," * Enum values as strings, however internally Enums can be represented by any"," * kind of type, often integers."," *"," * Example:"," *"," *     const RGBType = new GraphQLEnumType({"," *       name: 'RGB',"," *       values: {"," *         RED: { value: 0 },"," *         GREEN: { value: 1 },"," *         BLUE: { value: 2 }"," *       }"," *     });"," *"," * Note: If a value is not provided in a definition, the name of the enum value"," * will be used as its internal value."," */","var GraphQLEnumType /* <T> */ = exports.GraphQLEnumType = function () {","  function GraphQLEnumType(config /* <T> */) {","    _classCallCheck(this, GraphQLEnumType);","","    this.name = config.name;","    (0, _assertValidName.assertValidName)(config.name, config.isIntrospection);","    this.description = config.description;","    this._values = defineEnumValues(this, config.values);","    this._enumConfig = config;","  }","","  GraphQLEnumType.prototype.getValues = function getValues() {","    return this._values;","  };","","  GraphQLEnumType.prototype.getValue = function getValue(name) {","    return this._getNameLookup()[name];","  };","","  GraphQLEnumType.prototype.serialize = function serialize(value /* T */) {","    var enumValue = this._getValueLookup().get(value);","    return enumValue ? enumValue.name : null;","  };","","  GraphQLEnumType.prototype.parseValue = function parseValue(value) /* T */{","    if (typeof value === 'string') {","      var enumValue = this._getNameLookup()[value];","      if (enumValue) {","        return enumValue.value;","      }","    }","  };","","  GraphQLEnumType.prototype.parseLiteral = function parseLiteral(valueNode) /* T */{","    if (valueNode.kind === _kinds.ENUM) {","      var enumValue = this._getNameLookup()[valueNode.value];","      if (enumValue) {","        return enumValue.value;","      }","    }","  };","","  GraphQLEnumType.prototype._getValueLookup = function _getValueLookup() {","    if (!this._valueLookup) {","      var lookup = new Map();","      this.getValues().forEach(function (value) {","        lookup.set(value.value, value);","      });","      this._valueLookup = lookup;","    }","    return this._valueLookup;","  };","","  GraphQLEnumType.prototype._getNameLookup = function _getNameLookup() {","    if (!this._nameLookup) {","      var lookup = Object.create(null);","      this.getValues().forEach(function (value) {","        lookup[value.name] = value;","      });","      this._nameLookup = lookup;","    }","    return this._nameLookup;","  };","","  GraphQLEnumType.prototype.toString = function toString() {","    return this.name;","  };","","  return GraphQLEnumType;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLEnumType.prototype.toJSON = GraphQLEnumType.prototype.inspect = GraphQLEnumType.prototype.toString;","","function defineEnumValues(type, valueMap /* <T> */",") {","  (0, _invariant2.default)(isPlainObj(valueMap), type.name + ' values must be an object with value names as keys.');","  var valueNames = Object.keys(valueMap);","  (0, _invariant2.default)(valueNames.length > 0, type.name + ' values must be an object with value names as keys.');","  return valueNames.map(function (valueName) {","    (0, _assertValidName.assertValidName)(valueName);","    var value = valueMap[valueName];","    (0, _invariant2.default)(isPlainObj(value), type.name + '.' + valueName + ' must refer to an object with a \"value\" key ' + ('representing an internal value but got: ' + String(value) + '.'));","    (0, _invariant2.default)(!value.hasOwnProperty('isDeprecated'), type.name + '.' + valueName + ' should provide \"deprecationReason\" instead ' + 'of \"isDeprecated\".');","    return {","      name: valueName,","      description: value.description,","      isDeprecated: Boolean(value.deprecationReason),","      deprecationReason: value.deprecationReason,","      value: (0, _isNullish2.default)(value.value) ? valueName : value.value","    };","  });","} /* <T> */","","","/**"," * Input Object Type Definition"," *"," * An input object defines a structured collection of fields which may be"," * supplied to a field argument."," *"," * Using `NonNull` will ensure that a value must be provided by the query"," *"," * Example:"," *"," *     const GeoPoint = new GraphQLInputObjectType({"," *       name: 'GeoPoint',"," *       fields: {"," *         lat: { type: new GraphQLNonNull(GraphQLFloat) },"," *         lon: { type: new GraphQLNonNull(GraphQLFloat) },"," *         alt: { type: GraphQLFloat, defaultValue: 0 },"," *       }"," *     });"," *"," */","var GraphQLInputObjectType = exports.GraphQLInputObjectType = function () {","  function GraphQLInputObjectType(config) {","    _classCallCheck(this, GraphQLInputObjectType);","","    (0, _assertValidName.assertValidName)(config.name);","    this.name = config.name;","    this.description = config.description;","    this._typeConfig = config;","  }","","  GraphQLInputObjectType.prototype.getFields = function getFields() {","    return this._fields || (this._fields = this._defineFieldMap());","  };","","  GraphQLInputObjectType.prototype._defineFieldMap = function _defineFieldMap() {","    var _this = this;","","    var fieldMap = resolveThunk(this._typeConfig.fields);","    (0, _invariant2.default)(isPlainObj(fieldMap), this.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.');","    var fieldNames = Object.keys(fieldMap);","    (0, _invariant2.default)(fieldNames.length > 0, this.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.');","    var resultFieldMap = {};","    fieldNames.forEach(function (fieldName) {","      (0, _assertValidName.assertValidName)(fieldName);","      var field = _extends({}, fieldMap[fieldName], {","        name: fieldName","      });","      (0, _invariant2.default)(isInputType(field.type), _this.name + '.' + fieldName + ' field type must be Input Type but ' + ('got: ' + String(field.type) + '.'));","      (0, _invariant2.default)(field.resolve == null, _this.name + '.' + fieldName + ' field type has a resolve property, but ' + 'Input Types cannot define resolvers.');","      resultFieldMap[fieldName] = field;","    });","    return resultFieldMap;","  };","","  GraphQLInputObjectType.prototype.toString = function toString() {","    return this.name;","  };","","  return GraphQLInputObjectType;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLInputObjectType.prototype.toJSON = GraphQLInputObjectType.prototype.inspect = GraphQLInputObjectType.prototype.toString;","","/**"," * List Modifier"," *"," * A list is a kind of type marker, a wrapping type which points to another"," * type. Lists are often created within the context of defining the fields of"," * an object type."," *"," * Example:"," *"," *     const PersonType = new GraphQLObjectType({"," *       name: 'Person',"," *       fields: () => ({"," *         parents: { type: new GraphQLList(Person) },"," *         children: { type: new GraphQLList(Person) },"," *       })"," *     })"," *"," */","var GraphQLList = exports.GraphQLList = function () {","  function GraphQLList(type) {","    _classCallCheck(this, GraphQLList);","","    (0, _invariant2.default)(isType(type), 'Can only create List of a GraphQLType but got: ' + String(type) + '.');","    this.ofType = type;","  }","","  GraphQLList.prototype.toString = function toString() {","    return '[' + String(this.ofType) + ']';","  };","","  return GraphQLList;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLList.prototype.toJSON = GraphQLList.prototype.inspect = GraphQLList.prototype.toString;","","/**"," * Non-Null Modifier"," *"," * A non-null is a kind of type marker, a wrapping type which points to another"," * type. Non-null types enforce that their values are never null and can ensure"," * an error is raised if this ever occurs during a request. It is useful for"," * fields which you can make a strong guarantee on non-nullability, for example"," * usually the id field of a database row will never be null."," *"," * Example:"," *"," *     const RowType = new GraphQLObjectType({"," *       name: 'Row',"," *       fields: () => ({"," *         id: { type: new GraphQLNonNull(GraphQLString) },"," *       })"," *     })"," *"," * Note: the enforcement of non-nullability occurs within the executor."," */","","var GraphQLNonNull = exports.GraphQLNonNull = function () {","  function GraphQLNonNull(type) {","    _classCallCheck(this, GraphQLNonNull);","","    (0, _invariant2.default)(isType(type) && !(type instanceof GraphQLNonNull), 'Can only create NonNull of a Nullable GraphQLType but got: ' + (String(type) + '.'));","    this.ofType = type;","  }","","  GraphQLNonNull.prototype.toString = function toString() {","    return this.ofType.toString() + '!';","  };","","  return GraphQLNonNull;","}();","","// Also provide toJSON and inspect aliases for toString.","","","GraphQLNonNull.prototype.toJSON = GraphQLNonNull.prototype.inspect = GraphQLNonNull.prototype.toString;"],"l":{"3":1,"6":1,"8":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"27":1,"29":1,"31":1,"33":1,"35":1,"37":1,"39":2,"41":18,"56":1,"57":5,"60":1,"61":0,"62":0,"68":1,"69":3,"70":3,"73":1,"74":0,"75":0,"81":1,"82":0,"83":0,"86":1,"87":0,"88":0,"94":1,"95":0,"98":1,"99":0,"100":0,"106":1,"107":0,"110":1,"111":0,"112":0,"118":1,"119":0,"122":1,"123":0,"124":0,"130":1,"131":0,"137":1,"138":0,"141":1,"142":0,"143":0,"146":1,"147":3,"148":3,"149":2,"151":3,"160":1,"161":0,"182":1,"183":1,"184":5,"186":5,"187":5,"188":5,"189":5,"190":5,"191":5,"193":5,"199":1,"200":0,"201":0,"207":1,"208":0,"209":0,"215":1,"216":0,"217":0,"220":1,"221":7,"224":1,"230":1,"269":1,"270":1,"271":6,"273":6,"274":6,"275":6,"276":6,"277":0,"279":6,"280":6,"283":1,"284":0,"287":1,"288":0,"291":1,"292":1,"295":1,"301":1,"303":1,"304":0,"305":0,"306":0,"308":0,"309":0,"310":0,"311":0,"312":0,"315":0,"318":1,"319":0,"320":0,"322":0,"323":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"335":0,"336":0,"337":0,"338":0,"339":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"354":0,"356":0,"359":1,"360":28,"364":1,"365":0,"386":1,"387":1,"388":0,"390":0,"391":0,"392":0,"393":0,"394":0,"396":0,"397":0,"400":1,"401":0,"404":1,"405":0,"408":1,"414":1,"439":1,"440":1,"441":0,"443":0,"444":0,"445":0,"446":0,"447":0,"449":0,"450":0,"453":1,"454":0,"457":1,"458":0,"461":1,"467":1,"469":1,"470":0,"472":0,"473":0,"474":0,"475":0,"476":0,"480":0,"504":1,"505":1,"506":2,"508":2,"509":2,"510":2,"511":2,"512":2,"515":1,"516":0,"519":1,"520":0,"523":1,"524":0,"525":0,"528":1,"529":0,"530":0,"531":0,"532":0,"537":1,"538":0,"539":0,"540":0,"541":0,"546":1,"547":0,"548":0,"549":0,"550":0,"552":0,"554":0,"557":1,"558":0,"559":0,"560":0,"561":0,"563":0,"565":0,"568":1,"569":0,"572":1,"578":1,"580":1,"582":2,"583":2,"584":2,"585":2,"586":26,"587":26,"588":26,"589":26,"590":26,"621":1,"622":1,"623":0,"625":0,"626":0,"627":0,"628":0,"631":1,"632":0,"635":1,"636":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"648":0,"649":0,"650":0,"652":0,"655":1,"656":0,"659":1,"665":1,"685":1,"686":1,"687":0,"689":0,"690":0,"693":1,"694":0,"697":1,"703":1,"726":1,"727":1,"728":5,"730":5,"731":5,"734":1,"735":2,"738":1,"744":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/isNullish.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/isNullish.js","s":{"1":1,"2":1,"3":1,"4":26},"b":{"1":[26,26,26]},"f":{"1":26},"fnMap":{"1":{"name":"isNullish","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":26}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"3":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":66}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":9},"end":{"line":21,"column":23}},{"start":{"line":21,"column":27},"end":{"line":21,"column":46}},{"start":{"line":21,"column":50},"end":{"line":21,"column":65}}]}},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = isNullish;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Returns true if a value is null, undefined, or NaN."," */","function isNullish(value) {","  return value === null || value === undefined || value !== value;","}"],"l":{"3":1,"6":1,"20":1,"21":26}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/assertValidName.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/assertValidName.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":45,"9":0,"10":45,"11":0,"12":0,"13":0,"14":0,"15":45,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,45],"2":[45,45],"3":[0,45],"4":[45,37,0],"5":[0,0],"6":[0,0],"7":[0,45],"8":[0,0],"9":[0,0]},"f":{"1":45,"2":0},"fnMap":{"1":{"name":"assertValidName","line":27,"loc":{"start":{"line":27,"column":0},"end":{"line":27,"column":48}}},"2":{"name":"formatWarning","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":38}},"4":{"start":{"line":18,"column":0},"end":{"line":18,"column":41}},"5":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":33}},"7":{"start":{"line":27,"column":0},"end":{"line":43,"column":1}},"8":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"9":{"start":{"line":29,"column":4},"end":{"line":29,"column":69}},"10":{"start":{"line":31,"column":2},"end":{"line":39,"column":3}},"11":{"start":{"line":32,"column":4},"end":{"line":32,"column":32}},"12":{"start":{"line":34,"column":4},"end":{"line":37,"column":5}},"13":{"start":{"line":35,"column":6},"end":{"line":35,"column":193}},"14":{"start":{"line":36,"column":6},"end":{"line":36,"column":41}},"15":{"start":{"line":40,"column":2},"end":{"line":42,"column":3}},"16":{"start":{"line":41,"column":4},"end":{"line":41,"column":96}},"17":{"start":{"line":49,"column":0},"end":{"line":60,"column":1}},"18":{"start":{"line":50,"column":2},"end":{"line":50,"column":21}},"19":{"start":{"line":51,"column":2},"end":{"line":51,"column":63}},"20":{"start":{"line":52,"column":2},"end":{"line":52,"column":26}},"21":{"start":{"line":53,"column":2},"end":{"line":55,"column":3}},"22":{"start":{"line":54,"column":4},"end":{"line":54,"column":51}},"23":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"24":{"start":{"line":57,"column":4},"end":{"line":57,"column":47}},"25":{"start":{"line":59,"column":2},"end":{"line":59,"column":26}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":11}},{"start":{"line":28,"column":15},"end":{"line":28,"column":39}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"4":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":22}},{"start":{"line":31,"column":26},"end":{"line":31,"column":51}},{"start":{"line":31,"column":55},"end":{"line":31,"column":76}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"6":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":15}},{"start":{"line":34,"column":19},"end":{"line":34,"column":31}}]},"7":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"8":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":53,"column":2}},{"start":{"line":53,"column":2},"end":{"line":53,"column":2}}]},"9":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.assertValidName = assertValidName;","exports.formatWarning = formatWarning;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;","var ERROR_PREFIX_RX = /^Error: /;","","// Ensures console warnings are only issued once.","var hasWarnedAboutDunder = false;","","/**"," * Upholds the spec rules about naming."," */","function assertValidName(name, isIntrospection) {","  if (!name || typeof name !== 'string') {","    throw new Error('Must be named. Unexpected name: ' + name + '.');","  }","  if (!isIntrospection && name.slice(0, 2) === '__' && !hasWarnedAboutDunder) {","    hasWarnedAboutDunder = true;","    /* eslint-disable no-console */","    if (console && console.warn) {","      var error = new Error('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection. In a future release of graphql this will ' + 'become a hard error.');","      console.warn(formatWarning(error));","    }","    /* eslint-enable no-console */","  }","  if (!NAME_RX.test(name)) {","    throw new Error('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.');","  }","}","","/**"," * Returns a human-readable warning based an the supplied Error object,"," * including stack trace information if available."," */","function formatWarning(error) {","  var formatted = '';","  var errorString = String(error).replace(ERROR_PREFIX_RX, '');","  var stack = error.stack;","  if (stack) {","    formatted = stack.replace(ERROR_PREFIX_RX, '');","  }","  if (formatted.indexOf(errorString) === -1) {","    formatted = errorString + '\\n' + formatted;","  }","  return formatted.trim();","}"],"l":{"3":1,"6":1,"7":1,"18":1,"19":1,"22":1,"27":1,"28":45,"29":0,"31":45,"32":0,"34":0,"35":0,"36":0,"40":45,"41":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/directives.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/directives.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":3,"12":0,"13":1,"14":1,"15":3,"16":3,"17":3,"18":3,"19":3,"20":3,"21":3,"22":3,"23":3,"24":0,"25":3,"26":3,"27":3,"28":3,"29":3,"30":3,"31":1,"32":1,"33":1,"34":1,"35":1},"b":{"1":[1,0],"2":[1,1],"3":[0,3],"4":[0,3],"5":[0,3]},"f":{"1":1,"2":3,"3":3,"4":3},"fnMap":{"1":{"name":"_interopRequireDefault","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":37}}},"2":{"name":"_classCallCheck","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":48}}},"3":{"name":"GraphQLDirective","line":59,"loc":{"start":{"line":59,"column":50},"end":{"line":59,"column":84}}},"4":{"name":"(anonymous_4)","line":74,"loc":{"start":{"line":74,"column":38},"end":{"line":74,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":234}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":53}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":63}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":97}},"9":{"start":{"line":18,"column":39},"end":{"line":18,"column":95}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":153}},"11":{"start":{"line":20,"column":50},"end":{"line":20,"column":151}},"12":{"start":{"line":20,"column":92},"end":{"line":20,"column":149}},"13":{"start":{"line":30,"column":0},"end":{"line":51,"column":2}},"14":{"start":{"line":59,"column":0},"end":{"line":86,"column":2}},"15":{"start":{"line":60,"column":2},"end":{"line":60,"column":42}},"16":{"start":{"line":62,"column":2},"end":{"line":62,"column":68}},"17":{"start":{"line":63,"column":2},"end":{"line":63,"column":53}},"18":{"start":{"line":64,"column":2},"end":{"line":64,"column":101}},"19":{"start":{"line":65,"column":2},"end":{"line":65,"column":26}},"20":{"start":{"line":66,"column":2},"end":{"line":66,"column":40}},"21":{"start":{"line":67,"column":2},"end":{"line":67,"column":36}},"22":{"start":{"line":69,"column":2},"end":{"line":69,"column":25}},"23":{"start":{"line":70,"column":2},"end":{"line":85,"column":3}},"24":{"start":{"line":71,"column":4},"end":{"line":71,"column":19}},"25":{"start":{"line":73,"column":4},"end":{"line":73,"column":127}},"26":{"start":{"line":74,"column":4},"end":{"line":84,"column":7}},"27":{"start":{"line":75,"column":6},"end":{"line":75,"column":53}},"28":{"start":{"line":76,"column":6},"end":{"line":76,"column":30}},"29":{"start":{"line":77,"column":6},"end":{"line":77,"column":188}},"30":{"start":{"line":78,"column":6},"end":{"line":83,"column":8}},"31":{"start":{"line":91,"column":0},"end":{"line":101,"column":3}},"32":{"start":{"line":106,"column":0},"end":{"line":116,"column":3}},"33":{"start":{"line":121,"column":0},"end":{"line":121,"column":92}},"34":{"start":{"line":126,"column":0},"end":{"line":137,"column":3}},"35":{"start":{"line":142,"column":0},"end":{"line":142,"column":132}}},"branchMap":{"1":{"line":18,"type":"cond-expr","locations":[{"start":{"line":18,"column":70},"end":{"line":18,"column":73}},{"start":{"line":18,"column":76},"end":{"line":18,"column":94}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":46},"end":{"line":18,"column":49}},{"start":{"line":18,"column":53},"end":{"line":18,"column":67}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":50},"end":{"line":20,"column":50}},{"start":{"line":20,"column":50},"end":{"line":20,"column":50}}]},"4":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":2},"end":{"line":70,"column":2}},{"start":{"line":70,"column":2},"end":{"line":70,"column":2}}]},"5":{"line":80,"type":"cond-expr","locations":[{"start":{"line":80,"column":53},"end":{"line":80,"column":57}},{"start":{"line":80,"column":60},"end":{"line":80,"column":75}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.specifiedDirectives = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = exports.DirectiveLocation = undefined;","","var _definition = require('./definition');","","var _scalars = require('./scalars');","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _assertValidName = require('../utilities/assertValidName');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var DirectiveLocation = exports.DirectiveLocation = {","  // Operations","  QUERY: 'QUERY',","  MUTATION: 'MUTATION',","  SUBSCRIPTION: 'SUBSCRIPTION',","  FIELD: 'FIELD',","  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',","  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',","  INLINE_FRAGMENT: 'INLINE_FRAGMENT',","  // Schema Definitions","  SCHEMA: 'SCHEMA',","  SCALAR: 'SCALAR',","  OBJECT: 'OBJECT',","  FIELD_DEFINITION: 'FIELD_DEFINITION',","  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',","  INTERFACE: 'INTERFACE',","  UNION: 'UNION',","  ENUM: 'ENUM',","  ENUM_VALUE: 'ENUM_VALUE',","  INPUT_OBJECT: 'INPUT_OBJECT',","  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'","};","","// eslint-disable-line","","/**"," * Directives are used by the GraphQL runtime as a way of modifying execution"," * behavior. Type system creators will usually not create these directly."," */","var GraphQLDirective = exports.GraphQLDirective = function GraphQLDirective(config) {","  _classCallCheck(this, GraphQLDirective);","","  (0, _invariant2.default)(config.name, 'Directive must be named.');","  (0, _assertValidName.assertValidName)(config.name);","  (0, _invariant2.default)(Array.isArray(config.locations), 'Must provide locations for directive.');","  this.name = config.name;","  this.description = config.description;","  this.locations = config.locations;","","  var args = config.args;","  if (!args) {","    this.args = [];","  } else {","    (0, _invariant2.default)(!Array.isArray(args), '@' + config.name + ' args must be an object with argument names as keys.');","    this.args = Object.keys(args).map(function (argName) {","      (0, _assertValidName.assertValidName)(argName);","      var arg = args[argName];","      (0, _invariant2.default)((0, _definition.isInputType)(arg.type), '@' + config.name + '(' + argName + ':) argument type must be ' + ('Input Type but got: ' + String(arg.type) + '.'));","      return {","        name: argName,","        description: arg.description === undefined ? null : arg.description,","        type: arg.type,","        defaultValue: arg.defaultValue","      };","    });","  }","};","","/**"," * Used to conditionally include fields or fragments."," */","var GraphQLIncludeDirective = exports.GraphQLIncludeDirective = new GraphQLDirective({","  name: 'include',","  description: 'Directs the executor to include this field or fragment only when ' + 'the `if` argument is true.',","  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],","  args: {","    'if': {","      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),","      description: 'Included when true.'","    }","  }","});","","/**"," * Used to conditionally skip (exclude) fields or fragments."," */","var GraphQLSkipDirective = exports.GraphQLSkipDirective = new GraphQLDirective({","  name: 'skip',","  description: 'Directs the executor to skip this field or fragment when the `if` ' + 'argument is true.',","  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],","  args: {","    'if': {","      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),","      description: 'Skipped when true.'","    }","  }","});","","/**"," * Constant string used for default reason for a deprecation."," */","var DEFAULT_DEPRECATION_REASON = exports.DEFAULT_DEPRECATION_REASON = 'No longer supported';","","/**"," * Used to declare element of a GraphQL schema as deprecated."," */","var GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQLDirective({","  name: 'deprecated',","  description: 'Marks an element of a GraphQL schema as no longer supported.',","  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],","  args: {","    reason: {","      type: _scalars.GraphQLString,","      description: 'Explains why this element was deprecated, usually also including a ' + 'suggestion for how to access supported similar data. Formatted ' + 'in [Markdown](https://daringfireball.net/projects/markdown/).',","      defaultValue: DEFAULT_DEPRECATION_REASON","    }","  }","});","","/**"," * The full list of specified directives."," */","var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":3,"30":1,"59":1,"60":3,"62":3,"63":3,"64":3,"65":3,"66":3,"67":3,"69":3,"70":3,"71":0,"73":3,"74":3,"75":3,"76":3,"77":3,"78":3,"91":1,"106":1,"121":1,"126":1,"142":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/scalars.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/scalars.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"_interopRequireWildcard","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":38}}},"2":{"name":"coerceInt","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}}},"3":{"name":"parseLiteral","line":50,"loc":{"start":{"line":50,"column":16},"end":{"line":50,"column":43}}},"4":{"name":"coerceFloat","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":28}}},"5":{"name":"parseLiteral","line":77,"loc":{"start":{"line":77,"column":16},"end":{"line":77,"column":43}}},"6":{"name":"parseLiteral","line":87,"loc":{"start":{"line":87,"column":16},"end":{"line":87,"column":43}}},"7":{"name":"parseLiteral","line":97,"loc":{"start":{"line":97,"column":16},"end":{"line":97,"column":43}}},"8":{"name":"parseLiteral","line":107,"loc":{"start":{"line":107,"column":16},"end":{"line":107,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":123}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":42}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":43}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":269}},"7":{"start":{"line":14,"column":40},"end":{"line":14,"column":267}},"8":{"start":{"line":14,"column":69},"end":{"line":14,"column":80}},"9":{"start":{"line":14,"column":90},"end":{"line":14,"column":106}},"10":{"start":{"line":14,"column":107},"end":{"line":14,"column":228}},"11":{"start":{"line":14,"column":126},"end":{"line":14,"column":226}},"12":{"start":{"line":14,"column":149},"end":{"line":14,"column":224}},"13":{"start":{"line":14,"column":201},"end":{"line":14,"column":224}},"14":{"start":{"line":14,"column":229},"end":{"line":14,"column":250}},"15":{"start":{"line":14,"column":251},"end":{"line":14,"column":265}},"16":{"start":{"line":31,"column":0},"end":{"line":31,"column":25}},"17":{"start":{"line":32,"column":0},"end":{"line":32,"column":26}},"18":{"start":{"line":34,"column":0},"end":{"line":43,"column":1}},"19":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"20":{"start":{"line":36,"column":4},"end":{"line":36,"column":96}},"21":{"start":{"line":38,"column":2},"end":{"line":38,"column":26}},"22":{"start":{"line":39,"column":2},"end":{"line":41,"column":3}},"23":{"start":{"line":40,"column":4},"end":{"line":40,"column":51}},"24":{"start":{"line":42,"column":2},"end":{"line":42,"column":96}},"25":{"start":{"line":45,"column":0},"end":{"line":59,"column":3}},"26":{"start":{"line":51,"column":4},"end":{"line":56,"column":5}},"27":{"start":{"line":52,"column":6},"end":{"line":52,"column":40}},"28":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"29":{"start":{"line":54,"column":8},"end":{"line":54,"column":19}},"30":{"start":{"line":57,"column":4},"end":{"line":57,"column":16}},"31":{"start":{"line":61,"column":0},"end":{"line":70,"column":1}},"32":{"start":{"line":62,"column":2},"end":{"line":64,"column":3}},"33":{"start":{"line":63,"column":4},"end":{"line":63,"column":84}},"34":{"start":{"line":65,"column":2},"end":{"line":65,"column":26}},"35":{"start":{"line":66,"column":2},"end":{"line":68,"column":3}},"36":{"start":{"line":67,"column":4},"end":{"line":67,"column":15}},"37":{"start":{"line":69,"column":2},"end":{"line":69,"column":84}},"38":{"start":{"line":72,"column":0},"end":{"line":80,"column":3}},"39":{"start":{"line":78,"column":4},"end":{"line":78,"column":91}},"40":{"start":{"line":82,"column":0},"end":{"line":90,"column":3}},"41":{"start":{"line":88,"column":4},"end":{"line":88,"column":55}},"42":{"start":{"line":92,"column":0},"end":{"line":100,"column":3}},"43":{"start":{"line":98,"column":4},"end":{"line":98,"column":56}},"44":{"start":{"line":102,"column":0},"end":{"line":110,"column":3}},"45":{"start":{"line":108,"column":4},"end":{"line":108,"column":80}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":40},"end":{"line":14,"column":40}},{"start":{"line":14,"column":40},"end":{"line":14,"column":40}}]},"2":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":44},"end":{"line":14,"column":47}},{"start":{"line":14,"column":51},"end":{"line":14,"column":65}}]},"3":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":107},"end":{"line":14,"column":107}},{"start":{"line":14,"column":107},"end":{"line":14,"column":107}}]},"4":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":149},"end":{"line":14,"column":149}},{"start":{"line":14,"column":149},"end":{"line":14,"column":149}}]},"5":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"6":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"7":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":17}},{"start":{"line":39,"column":21},"end":{"line":39,"column":35}},{"start":{"line":39,"column":39},"end":{"line":39,"column":53}}]},"8":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":22},"end":{"line":40,"column":31}},{"start":{"line":40,"column":34},"end":{"line":40,"column":44}}]},"9":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"10":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"11":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":10},"end":{"line":53,"column":24}},{"start":{"line":53,"column":28},"end":{"line":53,"column":42}}]},"12":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":2},"end":{"line":62,"column":2}},{"start":{"line":62,"column":2},"end":{"line":62,"column":2}}]},"13":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"14":{"line":78,"type":"cond-expr","locations":[{"start":{"line":78,"column":62},"end":{"line":78,"column":83}},{"start":{"line":78,"column":86},"end":{"line":78,"column":90}}]},"15":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":11},"end":{"line":78,"column":34}},{"start":{"line":78,"column":38},"end":{"line":78,"column":59}}]},"16":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":38},"end":{"line":88,"column":47}},{"start":{"line":88,"column":50},"end":{"line":88,"column":54}}]},"17":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":39},"end":{"line":98,"column":48}},{"start":{"line":98,"column":51},"end":{"line":98,"column":55}}]},"18":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":63},"end":{"line":108,"column":72}},{"start":{"line":108,"column":75},"end":{"line":108,"column":79}}]},"19":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":11},"end":{"line":108,"column":35}},{"start":{"line":108,"column":39},"end":{"line":108,"column":60}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;","","var _definition = require('./definition');","","var _kinds = require('../language/kinds');","","var Kind = _interopRequireWildcard(_kinds);","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","// As per the GraphQL Spec, Integers are only treated as valid when a valid","// 32-bit signed integer, providing the broadest support across platforms.","//","// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because","// they are internally represented as IEEE 754 doubles.","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var MAX_INT = 2147483647;","var MIN_INT = -2147483648;","","function coerceInt(value) {","  if (value === '') {","    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');","  }","  var num = Number(value);","  if (num === num && num <= MAX_INT && num >= MIN_INT) {","    return (num < 0 ? Math.ceil : Math.floor)(num);","  }","  throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));","}","","var GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({","  name: 'Int',","  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',","  serialize: coerceInt,","  parseValue: coerceInt,","  parseLiteral: function parseLiteral(ast) {","    if (ast.kind === Kind.INT) {","      var num = parseInt(ast.value, 10);","      if (num <= MAX_INT && num >= MIN_INT) {","        return num;","      }","    }","    return null;","  }","});","","function coerceFloat(value) {","  if (value === '') {","    throw new TypeError('Float cannot represent non numeric value: (empty string)');","  }","  var num = Number(value);","  if (num === num) {","    return num;","  }","  throw new TypeError('Float cannot represent non numeric value: ' + String(value));","}","","var GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({","  name: 'Float',","  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',","  serialize: coerceFloat,","  parseValue: coerceFloat,","  parseLiteral: function parseLiteral(ast) {","    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : null;","  }","});","","var GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({","  name: 'String',","  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',","  serialize: String,","  parseValue: String,","  parseLiteral: function parseLiteral(ast) {","    return ast.kind === Kind.STRING ? ast.value : null;","  }","});","","var GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({","  name: 'Boolean',","  description: 'The `Boolean` scalar type represents `true` or `false`.',","  serialize: Boolean,","  parseValue: Boolean,","  parseLiteral: function parseLiteral(ast) {","    return ast.kind === Kind.BOOLEAN ? ast.value : null;","  }","});","","var GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({","  name: 'ID',","  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',","  serialize: String,","  parseValue: String,","  parseLiteral: function parseLiteral(ast) {","    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : null;","  }","});"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"31":1,"32":1,"34":1,"35":0,"36":0,"38":0,"39":0,"40":0,"42":0,"45":1,"51":0,"52":0,"53":0,"54":0,"57":0,"61":1,"62":0,"63":0,"65":0,"66":0,"67":0,"69":0,"72":1,"78":0,"82":1,"88":0,"92":1,"98":0,"102":1,"108":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/introspection.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/introspection.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":1,"77":0,"78":0,"79":1,"80":0,"81":1,"82":1,"83":1,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":1,"91":0,"92":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}}},"2":{"name":"fields","line":37,"loc":{"start":{"line":37,"column":10},"end":{"line":37,"column":28}}},"3":{"name":"resolve","line":42,"loc":{"start":{"line":42,"column":17},"end":{"line":42,"column":42}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":42},"end":{"line":44,"column":57}}},"5":{"name":"resolve","line":52,"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":42}}},"6":{"name":"resolve","line":59,"loc":{"start":{"line":59,"column":17},"end":{"line":59,"column":42}}},"7":{"name":"resolve","line":66,"loc":{"start":{"line":66,"column":17},"end":{"line":66,"column":42}}},"8":{"name":"resolve","line":73,"loc":{"start":{"line":73,"column":17},"end":{"line":73,"column":42}}},"9":{"name":"fields","line":85,"loc":{"start":{"line":85,"column":10},"end":{"line":85,"column":28}}},"10":{"name":"resolve","line":94,"loc":{"start":{"line":94,"column":17},"end":{"line":94,"column":45}}},"11":{"name":"resolve","line":103,"loc":{"start":{"line":103,"column":17},"end":{"line":103,"column":37}}},"12":{"name":"resolve","line":110,"loc":{"start":{"line":110,"column":17},"end":{"line":110,"column":37}}},"13":{"name":"resolve","line":117,"loc":{"start":{"line":117,"column":17},"end":{"line":117,"column":37}}},"14":{"name":"fields","line":209,"loc":{"start":{"line":209,"column":10},"end":{"line":209,"column":28}}},"15":{"name":"resolve","line":213,"loc":{"start":{"line":213,"column":17},"end":{"line":213,"column":40}}},"16":{"name":"resolve","line":241,"loc":{"start":{"line":241,"column":17},"end":{"line":241,"column":46}}},"17":{"name":"(anonymous_17)","line":246,"loc":{"start":{"line":246,"column":51},"end":{"line":246,"column":72}}},"18":{"name":"(anonymous_18)","line":250,"loc":{"start":{"line":250,"column":37},"end":{"line":250,"column":54}}},"19":{"name":"resolve","line":261,"loc":{"start":{"line":261,"column":17},"end":{"line":261,"column":40}}},"20":{"name":"resolve","line":269,"loc":{"start":{"line":269,"column":17},"end":{"line":269,"column":62}}},"21":{"name":"resolve","line":282,"loc":{"start":{"line":282,"column":17},"end":{"line":282,"column":47}}},"22":{"name":"(anonymous_22)","line":288,"loc":{"start":{"line":288,"column":37},"end":{"line":288,"column":54}}},"23":{"name":"resolve","line":298,"loc":{"start":{"line":298,"column":17},"end":{"line":298,"column":40}}},"24":{"name":"(anonymous_24)","line":301,"loc":{"start":{"line":301,"column":45},"end":{"line":301,"column":66}}},"25":{"name":"fields","line":316,"loc":{"start":{"line":316,"column":10},"end":{"line":316,"column":28}}},"26":{"name":"resolve","line":322,"loc":{"start":{"line":322,"column":17},"end":{"line":322,"column":41}}},"27":{"name":"fields","line":339,"loc":{"start":{"line":339,"column":10},"end":{"line":339,"column":28}}},"28":{"name":"resolve","line":347,"loc":{"start":{"line":347,"column":17},"end":{"line":347,"column":44}}},"29":{"name":"fields","line":359,"loc":{"start":{"line":359,"column":10},"end":{"line":359,"column":28}}},"30":{"name":"resolve","line":432,"loc":{"start":{"line":432,"column":11},"end":{"line":432,"column":58}}},"31":{"name":"resolve","line":443,"loc":{"start":{"line":443,"column":11},"end":{"line":443,"column":59}}},"32":{"name":"resolve","line":455,"loc":{"start":{"line":455,"column":11},"end":{"line":455,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":288}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":53}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":57}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":46}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":42}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":36}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":42}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":97}},"11":{"start":{"line":22,"column":39},"end":{"line":22,"column":95}},"12":{"start":{"line":33,"column":0},"end":{"line":79,"column":3}},"13":{"start":{"line":38,"column":4},"end":{"line":77,"column":6}},"14":{"start":{"line":43,"column":10},"end":{"line":43,"column":44}},"15":{"start":{"line":44,"column":10},"end":{"line":46,"column":13}},"16":{"start":{"line":45,"column":12},"end":{"line":45,"column":32}},"17":{"start":{"line":53,"column":10},"end":{"line":53,"column":39}},"18":{"start":{"line":60,"column":10},"end":{"line":60,"column":42}},"19":{"start":{"line":67,"column":10},"end":{"line":67,"column":46}},"20":{"start":{"line":74,"column":10},"end":{"line":74,"column":40}},"21":{"start":{"line":81,"column":0},"end":{"line":123,"column":3}},"22":{"start":{"line":86,"column":4},"end":{"line":121,"column":6}},"23":{"start":{"line":95,"column":10},"end":{"line":95,"column":38}},"24":{"start":{"line":104,"column":10},"end":{"line":104,"column":225}},"25":{"start":{"line":111,"column":10},"end":{"line":111,"column":249}},"26":{"start":{"line":118,"column":10},"end":{"line":118,"column":81}},"27":{"start":{"line":125,"column":0},"end":{"line":203,"column":3}},"28":{"start":{"line":205,"column":0},"end":{"line":310,"column":3}},"29":{"start":{"line":210,"column":4},"end":{"line":308,"column":6}},"30":{"start":{"line":214,"column":10},"end":{"line":230,"column":11}},"31":{"start":{"line":215,"column":12},"end":{"line":215,"column":35}},"32":{"start":{"line":216,"column":17},"end":{"line":230,"column":11}},"33":{"start":{"line":217,"column":12},"end":{"line":217,"column":35}},"34":{"start":{"line":218,"column":17},"end":{"line":230,"column":11}},"35":{"start":{"line":219,"column":12},"end":{"line":219,"column":38}},"36":{"start":{"line":220,"column":17},"end":{"line":230,"column":11}},"37":{"start":{"line":221,"column":12},"end":{"line":221,"column":34}},"38":{"start":{"line":222,"column":17},"end":{"line":230,"column":11}},"39":{"start":{"line":223,"column":12},"end":{"line":223,"column":33}},"40":{"start":{"line":224,"column":17},"end":{"line":230,"column":11}},"41":{"start":{"line":225,"column":12},"end":{"line":225,"column":41}},"42":{"start":{"line":226,"column":17},"end":{"line":230,"column":11}},"43":{"start":{"line":227,"column":12},"end":{"line":227,"column":33}},"44":{"start":{"line":228,"column":17},"end":{"line":230,"column":11}},"45":{"start":{"line":229,"column":12},"end":{"line":229,"column":37}},"46":{"start":{"line":231,"column":10},"end":{"line":231,"column":59}},"47":{"start":{"line":242,"column":10},"end":{"line":242,"column":57}},"48":{"start":{"line":244,"column":10},"end":{"line":255,"column":11}},"49":{"start":{"line":245,"column":12},"end":{"line":245,"column":44}},"50":{"start":{"line":246,"column":12},"end":{"line":248,"column":15}},"51":{"start":{"line":247,"column":14},"end":{"line":247,"column":41}},"52":{"start":{"line":249,"column":12},"end":{"line":253,"column":13}},"53":{"start":{"line":250,"column":14},"end":{"line":252,"column":17}},"54":{"start":{"line":251,"column":16},"end":{"line":251,"column":48}},"55":{"start":{"line":254,"column":12},"end":{"line":254,"column":26}},"56":{"start":{"line":256,"column":10},"end":{"line":256,"column":22}},"57":{"start":{"line":262,"column":10},"end":{"line":264,"column":11}},"58":{"start":{"line":263,"column":12},"end":{"line":263,"column":40}},"59":{"start":{"line":270,"column":10},"end":{"line":270,"column":36}},"60":{"start":{"line":272,"column":10},"end":{"line":274,"column":11}},"61":{"start":{"line":273,"column":12},"end":{"line":273,"column":49}},"62":{"start":{"line":283,"column":10},"end":{"line":283,"column":58}},"63":{"start":{"line":285,"column":10},"end":{"line":293,"column":11}},"64":{"start":{"line":286,"column":12},"end":{"line":286,"column":42}},"65":{"start":{"line":287,"column":12},"end":{"line":291,"column":13}},"66":{"start":{"line":288,"column":14},"end":{"line":290,"column":17}},"67":{"start":{"line":289,"column":16},"end":{"line":289,"column":48}},"68":{"start":{"line":292,"column":12},"end":{"line":292,"column":26}},"69":{"start":{"line":299,"column":10},"end":{"line":304,"column":11}},"70":{"start":{"line":300,"column":12},"end":{"line":300,"column":44}},"71":{"start":{"line":301,"column":12},"end":{"line":303,"column":15}},"72":{"start":{"line":302,"column":14},"end":{"line":302,"column":41}},"73":{"start":{"line":312,"column":0},"end":{"line":333,"column":3}},"74":{"start":{"line":317,"column":4},"end":{"line":331,"column":6}},"75":{"start":{"line":323,"column":10},"end":{"line":323,"column":34}},"76":{"start":{"line":335,"column":0},"end":{"line":353,"column":3}},"77":{"start":{"line":340,"column":4},"end":{"line":351,"column":6}},"78":{"start":{"line":348,"column":10},"end":{"line":348,"column":165}},"79":{"start":{"line":355,"column":0},"end":{"line":369,"column":3}},"80":{"start":{"line":360,"column":4},"end":{"line":367,"column":6}},"81":{"start":{"line":371,"column":0},"end":{"line":380,"column":2}},"82":{"start":{"line":382,"column":0},"end":{"line":420,"column":3}},"83":{"start":{"line":427,"column":0},"end":{"line":436,"column":2}},"84":{"start":{"line":433,"column":4},"end":{"line":433,"column":30}},"85":{"start":{"line":434,"column":4},"end":{"line":434,"column":18}},"86":{"start":{"line":438,"column":0},"end":{"line":448,"column":2}},"87":{"start":{"line":444,"column":4},"end":{"line":444,"column":26}},"88":{"start":{"line":445,"column":4},"end":{"line":445,"column":30}},"89":{"start":{"line":446,"column":4},"end":{"line":446,"column":32}},"90":{"start":{"line":450,"column":0},"end":{"line":459,"column":2}},"91":{"start":{"line":456,"column":4},"end":{"line":456,"column":38}},"92":{"start":{"line":457,"column":4},"end":{"line":457,"column":27}}},"branchMap":{"1":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":70},"end":{"line":22,"column":73}},{"start":{"line":22,"column":76},"end":{"line":22,"column":94}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":46},"end":{"line":22,"column":49}},{"start":{"line":22,"column":53},"end":{"line":22,"column":67}}]},"3":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":17},"end":{"line":95,"column":31}},{"start":{"line":95,"column":35},"end":{"line":95,"column":37}}]},"4":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":17},"end":{"line":104,"column":80}},{"start":{"line":104,"column":84},"end":{"line":104,"column":150}},{"start":{"line":104,"column":154},"end":{"line":104,"column":224}}]},"5":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":17},"end":{"line":111,"column":90}},{"start":{"line":111,"column":94},"end":{"line":111,"column":167}},{"start":{"line":111,"column":171},"end":{"line":111,"column":248}}]},"6":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":10},"end":{"line":214,"column":10}},{"start":{"line":214,"column":10},"end":{"line":214,"column":10}}]},"7":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":17},"end":{"line":216,"column":17}},{"start":{"line":216,"column":17},"end":{"line":216,"column":17}}]},"8":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":17},"end":{"line":218,"column":17}},{"start":{"line":218,"column":17},"end":{"line":218,"column":17}}]},"9":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":17},"end":{"line":220,"column":17}},{"start":{"line":220,"column":17},"end":{"line":220,"column":17}}]},"10":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":17},"end":{"line":222,"column":17}},{"start":{"line":222,"column":17},"end":{"line":222,"column":17}}]},"11":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":17},"end":{"line":224,"column":17}},{"start":{"line":224,"column":17},"end":{"line":224,"column":17}}]},"12":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":17},"end":{"line":226,"column":17}},{"start":{"line":226,"column":17},"end":{"line":226,"column":17}}]},"13":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":17},"end":{"line":228,"column":17}},{"start":{"line":228,"column":17},"end":{"line":228,"column":17}}]},"14":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":10},"end":{"line":244,"column":10}},{"start":{"line":244,"column":10},"end":{"line":244,"column":10}}]},"15":{"line":244,"type":"binary-expr","locations":[{"start":{"line":244,"column":14},"end":{"line":244,"column":59}},{"start":{"line":244,"column":63},"end":{"line":244,"column":111}}]},"16":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":12},"end":{"line":249,"column":12}},{"start":{"line":249,"column":12},"end":{"line":249,"column":12}}]},"17":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":10},"end":{"line":262,"column":10}},{"start":{"line":262,"column":10},"end":{"line":262,"column":10}}]},"18":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":10},"end":{"line":272,"column":10}},{"start":{"line":272,"column":10},"end":{"line":272,"column":10}}]},"19":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":14},"end":{"line":272,"column":62}},{"start":{"line":272,"column":66},"end":{"line":272,"column":110}}]},"20":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":10},"end":{"line":285,"column":10}},{"start":{"line":285,"column":10},"end":{"line":285,"column":10}}]},"21":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":12},"end":{"line":287,"column":12}},{"start":{"line":287,"column":12},"end":{"line":287,"column":12}}]},"22":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":10},"end":{"line":299,"column":10}},{"start":{"line":299,"column":10},"end":{"line":299,"column":10}}]},"23":{"line":323,"type":"binary-expr","locations":[{"start":{"line":323,"column":17},"end":{"line":323,"column":27}},{"start":{"line":323,"column":31},"end":{"line":323,"column":33}}]},"24":{"line":348,"type":"cond-expr","locations":[{"start":{"line":348,"column":67},"end":{"line":348,"column":71}},{"start":{"line":348,"column":74},"end":{"line":348,"column":164}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = undefined;","","var _isInvalid = require('../jsutils/isInvalid');","","var _isInvalid2 = _interopRequireDefault(_isInvalid);","","var _astFromValue = require('../utilities/astFromValue');","","var _printer = require('../language/printer');","","var _definition = require('./definition');","","var _scalars = require('./scalars');","","var _directives = require('./directives');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var __Schema = exports.__Schema = new _definition.GraphQLObjectType({","  name: '__Schema',","  isIntrospection: true,","  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',","  fields: function fields() {","    return {","      types: {","        description: 'A list of all types supported by this server.',","        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type))),","        resolve: function resolve(schema) {","          var typeMap = schema.getTypeMap();","          return Object.keys(typeMap).map(function (key) {","            return typeMap[key];","          });","        }","      },","      queryType: {","        description: 'The type that query operations will be rooted at.',","        type: new _definition.GraphQLNonNull(__Type),","        resolve: function resolve(schema) {","          return schema.getQueryType();","        }","      },","      mutationType: {","        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',","        type: __Type,","        resolve: function resolve(schema) {","          return schema.getMutationType();","        }","      },","      subscriptionType: {","        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',","        type: __Type,","        resolve: function resolve(schema) {","          return schema.getSubscriptionType();","        }","      },","      directives: {","        description: 'A list of all directives supported by this server.',","        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__Directive))),","        resolve: function resolve(schema) {","          return schema.getDirectives();","        }","      }","    };","  }","});","","var __Directive = exports.__Directive = new _definition.GraphQLObjectType({","  name: '__Directive',","  isIntrospection: true,","  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + '\\n\\nIn some cases, you need to provide options to alter GraphQL\\'s ' + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',","  fields: function fields() {","    return {","      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },","      description: { type: _scalars.GraphQLString },","      locations: {","        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__DirectiveLocation)))","      },","      args: {","        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),","        resolve: function resolve(directive) {","          return directive.args || [];","        }","      },","      // NOTE: the following three fields are deprecated and are no longer part","      // of the GraphQL specification.","      onOperation: {","        deprecationReason: 'Use `locations`.',","        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),","        resolve: function resolve(d) {","          return d.locations.indexOf(_directives.DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.SUBSCRIPTION) !== -1;","        }","      },","      onFragment: {","        deprecationReason: 'Use `locations`.',","        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),","        resolve: function resolve(d) {","          return d.locations.indexOf(_directives.DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(_directives.DirectiveLocation.FRAGMENT_DEFINITION) !== -1;","        }","      },","      onField: {","        deprecationReason: 'Use `locations`.',","        type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),","        resolve: function resolve(d) {","          return d.locations.indexOf(_directives.DirectiveLocation.FIELD) !== -1;","        }","      }","    };","  }","});","","var __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({","  name: '__DirectiveLocation',","  isIntrospection: true,","  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',","  values: {","    QUERY: {","      value: _directives.DirectiveLocation.QUERY,","      description: 'Location adjacent to a query operation.'","    },","    MUTATION: {","      value: _directives.DirectiveLocation.MUTATION,","      description: 'Location adjacent to a mutation operation.'","    },","    SUBSCRIPTION: {","      value: _directives.DirectiveLocation.SUBSCRIPTION,","      description: 'Location adjacent to a subscription operation.'","    },","    FIELD: {","      value: _directives.DirectiveLocation.FIELD,","      description: 'Location adjacent to a field.'","    },","    FRAGMENT_DEFINITION: {","      value: _directives.DirectiveLocation.FRAGMENT_DEFINITION,","      description: 'Location adjacent to a fragment definition.'","    },","    FRAGMENT_SPREAD: {","      value: _directives.DirectiveLocation.FRAGMENT_SPREAD,","      description: 'Location adjacent to a fragment spread.'","    },","    INLINE_FRAGMENT: {","      value: _directives.DirectiveLocation.INLINE_FRAGMENT,","      description: 'Location adjacent to an inline fragment.'","    },","    SCHEMA: {","      value: _directives.DirectiveLocation.SCHEMA,","      description: 'Location adjacent to a schema definition.'","    },","    SCALAR: {","      value: _directives.DirectiveLocation.SCALAR,","      description: 'Location adjacent to a scalar definition.'","    },","    OBJECT: {","      value: _directives.DirectiveLocation.OBJECT,","      description: 'Location adjacent to an object type definition.'","    },","    FIELD_DEFINITION: {","      value: _directives.DirectiveLocation.FIELD_DEFINITION,","      description: 'Location adjacent to a field definition.'","    },","    ARGUMENT_DEFINITION: {","      value: _directives.DirectiveLocation.ARGUMENT_DEFINITION,","      description: 'Location adjacent to an argument definition.'","    },","    INTERFACE: {","      value: _directives.DirectiveLocation.INTERFACE,","      description: 'Location adjacent to an interface definition.'","    },","    UNION: {","      value: _directives.DirectiveLocation.UNION,","      description: 'Location adjacent to a union definition.'","    },","    ENUM: {","      value: _directives.DirectiveLocation.ENUM,","      description: 'Location adjacent to an enum definition.'","    },","    ENUM_VALUE: {","      value: _directives.DirectiveLocation.ENUM_VALUE,","      description: 'Location adjacent to an enum value definition.'","    },","    INPUT_OBJECT: {","      value: _directives.DirectiveLocation.INPUT_OBJECT,","      description: 'Location adjacent to an input object type definition.'","    },","    INPUT_FIELD_DEFINITION: {","      value: _directives.DirectiveLocation.INPUT_FIELD_DEFINITION,","      description: 'Location adjacent to an input object field definition.'","    }","  }","});","","var __Type = exports.__Type = new _definition.GraphQLObjectType({","  name: '__Type',","  isIntrospection: true,","  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',","  fields: function fields() {","    return {","      kind: {","        type: new _definition.GraphQLNonNull(__TypeKind),","        resolve: function resolve(type) {","          if (type instanceof _definition.GraphQLScalarType) {","            return TypeKind.SCALAR;","          } else if (type instanceof _definition.GraphQLObjectType) {","            return TypeKind.OBJECT;","          } else if (type instanceof _definition.GraphQLInterfaceType) {","            return TypeKind.INTERFACE;","          } else if (type instanceof _definition.GraphQLUnionType) {","            return TypeKind.UNION;","          } else if (type instanceof _definition.GraphQLEnumType) {","            return TypeKind.ENUM;","          } else if (type instanceof _definition.GraphQLInputObjectType) {","            return TypeKind.INPUT_OBJECT;","          } else if (type instanceof _definition.GraphQLList) {","            return TypeKind.LIST;","          } else if (type instanceof _definition.GraphQLNonNull) {","            return TypeKind.NON_NULL;","          }","          throw new Error('Unknown kind of type: ' + type);","        }","      },","      name: { type: _scalars.GraphQLString },","      description: { type: _scalars.GraphQLString },","      fields: {","        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Field)),","        args: {","          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }","        },","        resolve: function resolve(type, _ref) {","          var includeDeprecated = _ref.includeDeprecated;","","          if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {","            var fieldMap = type.getFields();","            var fields = Object.keys(fieldMap).map(function (fieldName) {","              return fieldMap[fieldName];","            });","            if (!includeDeprecated) {","              fields = fields.filter(function (field) {","                return !field.deprecationReason;","              });","            }","            return fields;","          }","          return null;","        }","      },","      interfaces: {","        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),","        resolve: function resolve(type) {","          if (type instanceof _definition.GraphQLObjectType) {","            return type.getInterfaces();","          }","        }","      },","      possibleTypes: {","        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),","        resolve: function resolve(type, args, context, _ref2) {","          var schema = _ref2.schema;","","          if (type instanceof _definition.GraphQLInterfaceType || type instanceof _definition.GraphQLUnionType) {","            return schema.getPossibleTypes(type);","          }","        }","      },","      enumValues: {","        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__EnumValue)),","        args: {","          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }","        },","        resolve: function resolve(type, _ref3) {","          var includeDeprecated = _ref3.includeDeprecated;","","          if (type instanceof _definition.GraphQLEnumType) {","            var values = type.getValues();","            if (!includeDeprecated) {","              values = values.filter(function (value) {","                return !value.deprecationReason;","              });","            }","            return values;","          }","        }","      },","      inputFields: {","        type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue)),","        resolve: function resolve(type) {","          if (type instanceof _definition.GraphQLInputObjectType) {","            var fieldMap = type.getFields();","            return Object.keys(fieldMap).map(function (fieldName) {","              return fieldMap[fieldName];","            });","          }","        }","      },","      ofType: { type: __Type }","    };","  }","});","","var __Field = exports.__Field = new _definition.GraphQLObjectType({","  name: '__Field',","  isIntrospection: true,","  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',","  fields: function fields() {","    return {","      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },","      description: { type: _scalars.GraphQLString },","      args: {","        type: new _definition.GraphQLNonNull(new _definition.GraphQLList(new _definition.GraphQLNonNull(__InputValue))),","        resolve: function resolve(field) {","          return field.args || [];","        }","      },","      type: { type: new _definition.GraphQLNonNull(__Type) },","      isDeprecated: { type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean) },","      deprecationReason: {","        type: _scalars.GraphQLString","      }","    };","  }","});","","var __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({","  name: '__InputValue',","  isIntrospection: true,","  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',","  fields: function fields() {","    return {","      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },","      description: { type: _scalars.GraphQLString },","      type: { type: new _definition.GraphQLNonNull(__Type) },","      defaultValue: {","        type: _scalars.GraphQLString,","        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',","        resolve: function resolve(inputVal) {","          return (0, _isInvalid2.default)(inputVal.defaultValue) ? null : (0, _printer.print)((0, _astFromValue.astFromValue)(inputVal.defaultValue, inputVal.type));","        }","      }","    };","  }","});","","var __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({","  name: '__EnumValue',","  isIntrospection: true,","  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',","  fields: function fields() {","    return {","      name: { type: new _definition.GraphQLNonNull(_scalars.GraphQLString) },","      description: { type: _scalars.GraphQLString },","      isDeprecated: { type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean) },","      deprecationReason: {","        type: _scalars.GraphQLString","      }","    };","  }","});","","var TypeKind = exports.TypeKind = {","  SCALAR: 'SCALAR',","  OBJECT: 'OBJECT',","  INTERFACE: 'INTERFACE',","  UNION: 'UNION',","  ENUM: 'ENUM',","  INPUT_OBJECT: 'INPUT_OBJECT',","  LIST: 'LIST',","  NON_NULL: 'NON_NULL'","};","","var __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({","  name: '__TypeKind',","  isIntrospection: true,","  description: 'An enum describing what kind of type a given `__Type` is.',","  values: {","    SCALAR: {","      value: TypeKind.SCALAR,","      description: 'Indicates this type is a scalar.'","    },","    OBJECT: {","      value: TypeKind.OBJECT,","      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'","    },","    INTERFACE: {","      value: TypeKind.INTERFACE,","      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'","    },","    UNION: {","      value: TypeKind.UNION,","      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'","    },","    ENUM: {","      value: TypeKind.ENUM,","      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'","    },","    INPUT_OBJECT: {","      value: TypeKind.INPUT_OBJECT,","      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'","    },","    LIST: {","      value: TypeKind.LIST,","      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'","    },","    NON_NULL: {","      value: TypeKind.NON_NULL,","      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'","    }","  }","});","","/**"," * Note that these are GraphQLField and not GraphQLFieldConfig,"," * so the format for args is different."," */","","var SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {","  name: '__schema',","  type: new _definition.GraphQLNonNull(__Schema),","  description: 'Access the current type schema of this server.',","  args: [],","  resolve: function resolve(source, args, context, _ref4) {","    var schema = _ref4.schema;","    return schema;","  }","};","","var TypeMetaFieldDef = exports.TypeMetaFieldDef = {","  name: '__type',","  type: __Type,","  description: 'Request the type information of a single type.',","  args: [{ name: 'name', type: new _definition.GraphQLNonNull(_scalars.GraphQLString) }],","  resolve: function resolve(source, _ref5, context, _ref6) {","    var name = _ref5.name;","    var schema = _ref6.schema;","    return schema.getType(name);","  }","};","","var TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {","  name: '__typename',","  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),","  description: 'The name of the current Object type at runtime.',","  args: [],","  resolve: function resolve(source, args, context, _ref7) {","    var parentType = _ref7.parentType;","    return parentType.name;","  }","};"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"33":1,"38":0,"43":0,"44":0,"45":0,"53":0,"60":0,"67":0,"74":0,"81":1,"86":0,"95":0,"104":0,"111":0,"118":0,"125":1,"205":1,"210":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"231":0,"242":0,"244":0,"245":0,"246":0,"247":0,"249":0,"250":0,"251":0,"254":0,"256":0,"262":0,"263":0,"270":0,"272":0,"273":0,"283":0,"285":0,"286":0,"287":0,"288":0,"289":0,"292":0,"299":0,"300":0,"301":0,"302":0,"312":1,"317":0,"323":0,"335":1,"340":0,"348":0,"355":1,"360":0,"371":1,"382":1,"427":1,"433":0,"434":0,"438":1,"444":0,"445":0,"446":0,"450":1,"456":0,"457":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/isInvalid.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/isInvalid.js","s":{"1":1,"2":1,"3":1,"4":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isInvalid","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":26}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"3":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"4":{"start":{"line":21,"column":2},"end":{"line":21,"column":48}}},"branchMap":{"1":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":9},"end":{"line":21,"column":28}},{"start":{"line":21,"column":32},"end":{"line":21,"column":47}}]}},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = isInvalid;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Returns true if a value is undefined, or NaN."," */","function isInvalid(value) {","  return value === undefined || value !== value;","}"],"l":{"3":1,"6":1,"20":1,"21":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/astFromValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/astFromValue.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":3,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0},"b":{"1":[3,0],"2":[3,3],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":37}}},"2":{"name":"astFromValue","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":35}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":36},"end":{"line":75,"column":52}}},"4":{"name":"(anonymous_4)","line":94,"loc":{"start":{"line":94,"column":32},"end":{"line":94,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":53}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":49}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":42}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":48}},"12":{"start":{"line":26,"column":0},"end":{"line":26,"column":42}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":97}},"14":{"start":{"line":28,"column":39},"end":{"line":28,"column":95}},"15":{"start":{"line":47,"column":0},"end":{"line":149,"column":1}},"16":{"start":{"line":49,"column":2},"end":{"line":49,"column":21}},"17":{"start":{"line":51,"column":2},"end":{"line":57,"column":3}},"18":{"start":{"line":52,"column":4},"end":{"line":52,"column":53}},"19":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"20":{"start":{"line":54,"column":6},"end":{"line":54,"column":18}},"21":{"start":{"line":56,"column":4},"end":{"line":56,"column":20}},"22":{"start":{"line":60,"column":2},"end":{"line":62,"column":3}},"23":{"start":{"line":61,"column":4},"end":{"line":61,"column":33}},"24":{"start":{"line":65,"column":2},"end":{"line":67,"column":3}},"25":{"start":{"line":66,"column":4},"end":{"line":66,"column":16}},"26":{"start":{"line":71,"column":2},"end":{"line":84,"column":3}},"27":{"start":{"line":72,"column":4},"end":{"line":72,"column":31}},"28":{"start":{"line":73,"column":4},"end":{"line":82,"column":5}},"29":{"start":{"line":74,"column":6},"end":{"line":74,"column":27}},"30":{"start":{"line":75,"column":6},"end":{"line":80,"column":9}},"31":{"start":{"line":76,"column":8},"end":{"line":76,"column":52}},"32":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"33":{"start":{"line":78,"column":10},"end":{"line":78,"column":37}},"34":{"start":{"line":81,"column":6},"end":{"line":81,"column":56}},"35":{"start":{"line":83,"column":4},"end":{"line":83,"column":42}},"36":{"start":{"line":88,"column":2},"end":{"line":106,"column":3}},"37":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"38":{"start":{"line":90,"column":6},"end":{"line":90,"column":18}},"39":{"start":{"line":92,"column":4},"end":{"line":92,"column":34}},"40":{"start":{"line":93,"column":4},"end":{"line":93,"column":24}},"41":{"start":{"line":94,"column":4},"end":{"line":104,"column":7}},"42":{"start":{"line":95,"column":6},"end":{"line":95,"column":45}},"43":{"start":{"line":96,"column":6},"end":{"line":96,"column":66}},"44":{"start":{"line":97,"column":6},"end":{"line":103,"column":7}},"45":{"start":{"line":98,"column":8},"end":{"line":102,"column":11}},"46":{"start":{"line":105,"column":4},"end":{"line":105,"column":55}},"47":{"start":{"line":108,"column":2},"end":{"line":108,"column":177}},"48":{"start":{"line":112,"column":2},"end":{"line":112,"column":42}},"49":{"start":{"line":113,"column":2},"end":{"line":115,"column":3}},"50":{"start":{"line":114,"column":4},"end":{"line":114,"column":16}},"51":{"start":{"line":118,"column":2},"end":{"line":120,"column":3}},"52":{"start":{"line":119,"column":4},"end":{"line":119,"column":55}},"53":{"start":{"line":123,"column":2},"end":{"line":127,"column":3}},"54":{"start":{"line":124,"column":4},"end":{"line":124,"column":39}},"55":{"start":{"line":125,"column":4},"end":{"line":126,"column":6}},"56":{"start":{"line":129,"column":2},"end":{"line":146,"column":3}},"57":{"start":{"line":131,"column":4},"end":{"line":133,"column":5}},"58":{"start":{"line":132,"column":6},"end":{"line":132,"column":54}},"59":{"start":{"line":136,"column":4},"end":{"line":138,"column":5}},"60":{"start":{"line":137,"column":6},"end":{"line":137,"column":53}},"61":{"start":{"line":142,"column":4},"end":{"line":145,"column":6}},"62":{"start":{"line":148,"column":2},"end":{"line":148,"column":76}}},"branchMap":{"1":{"line":28,"type":"cond-expr","locations":[{"start":{"line":28,"column":70},"end":{"line":28,"column":73}},{"start":{"line":28,"column":76},"end":{"line":28,"column":94}}]},"2":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":46},"end":{"line":28,"column":49}},{"start":{"line":28,"column":53},"end":{"line":28,"column":67}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":16}},{"start":{"line":53,"column":20},"end":{"line":53,"column":49}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"7":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"9":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"10":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":8}},{"start":{"line":77,"column":8},"end":{"line":77,"column":8}}]},"11":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":2},"end":{"line":88,"column":2}},{"start":{"line":88,"column":2},"end":{"line":88,"column":2}}]},"12":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"13":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":8},"end":{"line":89,"column":23}},{"start":{"line":89,"column":27},"end":{"line":89,"column":53}}]},"14":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":6},"end":{"line":97,"column":6}},{"start":{"line":97,"column":6},"end":{"line":97,"column":6}}]},"15":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":27},"end":{"line":108,"column":72}},{"start":{"line":108,"column":76},"end":{"line":108,"column":119}}]},"16":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":2},"end":{"line":113,"column":2}},{"start":{"line":113,"column":2},"end":{"line":113,"column":2}}]},"17":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":2},"end":{"line":118,"column":2}},{"start":{"line":118,"column":2},"end":{"line":118,"column":2}}]},"18":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":2},"end":{"line":123,"column":2}},{"start":{"line":123,"column":2},"end":{"line":123,"column":2}}]},"19":{"line":125,"type":"cond-expr","locations":[{"start":{"line":125,"column":41},"end":{"line":125,"column":79}},{"start":{"line":125,"column":82},"end":{"line":125,"column":122}}]},"20":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":2},"end":{"line":129,"column":2}},{"start":{"line":129,"column":2},"end":{"line":129,"column":2}}]},"21":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":131,"column":4}},{"start":{"line":131,"column":4},"end":{"line":131,"column":4}}]},"22":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":4},"end":{"line":136,"column":4}},{"start":{"line":136,"column":4},"end":{"line":136,"column":4}}]},"23":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":8},"end":{"line":136,"column":35}},{"start":{"line":136,"column":39},"end":{"line":136,"column":66}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.astFromValue = astFromValue;","","var _iterall = require('iterall');","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _isInvalid = require('../jsutils/isInvalid');","","var _isInvalid2 = _interopRequireDefault(_isInvalid);","","var _kinds = require('../language/kinds');","","var _definition = require('../type/definition');","","var _scalars = require('../type/scalars');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Produces a GraphQL Value AST given a JavaScript value."," *"," * A GraphQL type must be provided, which will be used to interpret different"," * JavaScript values."," *"," * | JSON Value    | GraphQL Value        |"," * | ------------- | -------------------- |"," * | Object        | Input Object         |"," * | Array         | List                 |"," * | Boolean       | Boolean              |"," * | String        | String / Enum Value  |"," * | Number        | Int / Float          |"," * | Mixed         | Enum Value           |"," * | null          | NullValue            |"," *"," */","function astFromValue(value, type) {","  // Ensure flow knows that we treat function params as const.","  var _value = value;","","  if (type instanceof _definition.GraphQLNonNull) {","    var astValue = astFromValue(_value, type.ofType);","    if (astValue && astValue.kind === _kinds.NULL) {","      return null;","    }","    return astValue;","  }","","  // only explicit null, not undefined, NaN","  if (_value === null) {","    return { kind: _kinds.NULL };","  }","","  // undefined, NaN","  if ((0, _isInvalid2.default)(_value)) {","    return null;","  }","","  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but","  // the value is not an array, convert the value using the list's item type.","  if (type instanceof _definition.GraphQLList) {","    var itemType = type.ofType;","    if ((0, _iterall.isCollection)(_value)) {","      var valuesNodes = [];","      (0, _iterall.forEach)(_value, function (item) {","        var itemNode = astFromValue(item, itemType);","        if (itemNode) {","          valuesNodes.push(itemNode);","        }","      });","      return { kind: _kinds.LIST, values: valuesNodes };","    }","    return astFromValue(_value, itemType);","  }","","  // Populate the fields of the input object by creating ASTs from each value","  // in the JavaScript object according to the fields in the input type.","  if (type instanceof _definition.GraphQLInputObjectType) {","    if (_value === null || typeof _value !== 'object') {","      return null;","    }","    var fields = type.getFields();","    var fieldNodes = [];","    Object.keys(fields).forEach(function (fieldName) {","      var fieldType = fields[fieldName].type;","      var fieldValue = astFromValue(_value[fieldName], fieldType);","      if (fieldValue) {","        fieldNodes.push({","          kind: _kinds.OBJECT_FIELD,","          name: { kind: _kinds.NAME, value: fieldName },","          value: fieldValue","        });","      }","    });","    return { kind: _kinds.OBJECT, fields: fieldNodes };","  }","","  (0, _invariant2.default)(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType, 'Must provide Input Type, cannot use: ' + String(type));","","  // Since value is an internally represented value, it must be serialized","  // to an externally represented value before converting into an AST.","  var serialized = type.serialize(_value);","  if ((0, _isNullish2.default)(serialized)) {","    return null;","  }","","  // Others serialize based on their corresponding JavaScript scalar types.","  if (typeof serialized === 'boolean') {","    return { kind: _kinds.BOOLEAN, value: serialized };","  }","","  // JavaScript numbers can be Int or Float values.","  if (typeof serialized === 'number') {","    var stringNum = String(serialized);","    return (/^[0-9]+$/.test(stringNum) ? { kind: _kinds.INT, value: stringNum } : { kind: _kinds.FLOAT, value: stringNum }","    );","  }","","  if (typeof serialized === 'string') {","    // Enum types use Enum literals.","    if (type instanceof _definition.GraphQLEnumType) {","      return { kind: _kinds.ENUM, value: serialized };","    }","","    // ID types can use Int literals.","    if (type === _scalars.GraphQLID && /^[0-9]+$/.test(serialized)) {","      return { kind: _kinds.INT, value: serialized };","    }","","    // Use JSON stringify, which uses the same string encoding as GraphQL,","    // then remove the quotes.","    return {","      kind: _kinds.STRING,","      value: JSON.stringify(serialized).slice(1, -1)","    };","  }","","  throw new TypeError('Cannot convert value to AST: ' + String(serialized));","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":3,"47":1,"49":0,"51":0,"52":0,"53":0,"54":0,"56":0,"60":0,"61":0,"65":0,"66":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"81":0,"83":0,"88":0,"89":0,"90":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"105":0,"108":0,"112":0,"113":0,"114":0,"118":0,"119":0,"123":0,"124":0,"125":0,"129":0,"131":0,"132":0,"136":0,"137":0,"142":0,"148":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/printer.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/printer.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},"fnMap":{"1":{"name":"print","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":20}}},"2":{"name":"Name","line":26,"loc":{"start":{"line":26,"column":8},"end":{"line":26,"column":28}}},"3":{"name":"Variable","line":29,"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":36}}},"4":{"name":"Document","line":35,"loc":{"start":{"line":35,"column":12},"end":{"line":35,"column":36}}},"5":{"name":"OperationDefinition","line":39,"loc":{"start":{"line":39,"column":23},"end":{"line":39,"column":58}}},"6":{"name":"VariableDefinition","line":51,"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":56}}},"7":{"name":"SelectionSet","line":58,"loc":{"start":{"line":58,"column":16},"end":{"line":58,"column":45}}},"8":{"name":"Field","line":63,"loc":{"start":{"line":63,"column":9},"end":{"line":63,"column":31}}},"9":{"name":"Argument","line":72,"loc":{"start":{"line":72,"column":12},"end":{"line":72,"column":37}}},"10":{"name":"FragmentSpread","line":80,"loc":{"start":{"line":80,"column":18},"end":{"line":80,"column":49}}},"11":{"name":"InlineFragment","line":86,"loc":{"start":{"line":86,"column":18},"end":{"line":86,"column":49}}},"12":{"name":"FragmentDefinition","line":93,"loc":{"start":{"line":93,"column":22},"end":{"line":93,"column":57}}},"13":{"name":"IntValue","line":103,"loc":{"start":{"line":103,"column":12},"end":{"line":103,"column":37}}},"14":{"name":"FloatValue","line":107,"loc":{"start":{"line":107,"column":14},"end":{"line":107,"column":41}}},"15":{"name":"StringValue","line":111,"loc":{"start":{"line":111,"column":15},"end":{"line":111,"column":44}}},"16":{"name":"BooleanValue","line":115,"loc":{"start":{"line":115,"column":16},"end":{"line":115,"column":46}}},"17":{"name":"NullValue","line":119,"loc":{"start":{"line":119,"column":13},"end":{"line":119,"column":34}}},"18":{"name":"EnumValue","line":122,"loc":{"start":{"line":122,"column":13},"end":{"line":122,"column":40}}},"19":{"name":"ListValue","line":126,"loc":{"start":{"line":126,"column":13},"end":{"line":126,"column":40}}},"20":{"name":"ObjectValue","line":130,"loc":{"start":{"line":130,"column":15},"end":{"line":130,"column":44}}},"21":{"name":"ObjectField","line":134,"loc":{"start":{"line":134,"column":15},"end":{"line":134,"column":44}}},"22":{"name":"Directive","line":142,"loc":{"start":{"line":142,"column":13},"end":{"line":142,"column":40}}},"23":{"name":"NamedType","line":150,"loc":{"start":{"line":150,"column":13},"end":{"line":150,"column":40}}},"24":{"name":"ListType","line":154,"loc":{"start":{"line":154,"column":12},"end":{"line":154,"column":38}}},"25":{"name":"NonNullType","line":158,"loc":{"start":{"line":158,"column":15},"end":{"line":158,"column":44}}},"26":{"name":"SchemaDefinition","line":165,"loc":{"start":{"line":165,"column":20},"end":{"line":165,"column":54}}},"27":{"name":"OperationTypeDefinition","line":171,"loc":{"start":{"line":171,"column":27},"end":{"line":171,"column":68}}},"28":{"name":"ScalarTypeDefinition","line":177,"loc":{"start":{"line":177,"column":24},"end":{"line":177,"column":62}}},"29":{"name":"ObjectTypeDefinition","line":183,"loc":{"start":{"line":183,"column":24},"end":{"line":183,"column":62}}},"30":{"name":"FieldDefinition","line":191,"loc":{"start":{"line":191,"column":19},"end":{"line":191,"column":52}}},"31":{"name":"InputValueDefinition","line":199,"loc":{"start":{"line":199,"column":24},"end":{"line":199,"column":62}}},"32":{"name":"InterfaceTypeDefinition","line":207,"loc":{"start":{"line":207,"column":27},"end":{"line":207,"column":68}}},"33":{"name":"UnionTypeDefinition","line":214,"loc":{"start":{"line":214,"column":23},"end":{"line":214,"column":60}}},"34":{"name":"EnumTypeDefinition","line":221,"loc":{"start":{"line":221,"column":22},"end":{"line":221,"column":58}}},"35":{"name":"EnumValueDefinition","line":228,"loc":{"start":{"line":228,"column":23},"end":{"line":228,"column":60}}},"36":{"name":"InputObjectTypeDefinition","line":234,"loc":{"start":{"line":234,"column":29},"end":{"line":234,"column":72}}},"37":{"name":"TypeExtensionDefinition","line":241,"loc":{"start":{"line":241,"column":27},"end":{"line":241,"column":68}}},"38":{"name":"DirectiveDefinition","line":246,"loc":{"start":{"line":246,"column":23},"end":{"line":246,"column":60}}},"39":{"name":"join","line":258,"loc":{"start":{"line":258,"column":0},"end":{"line":258,"column":37}}},"40":{"name":"(anonymous_40)","line":259,"loc":{"start":{"line":259,"column":40},"end":{"line":259,"column":53}}},"41":{"name":"block","line":268,"loc":{"start":{"line":268,"column":0},"end":{"line":268,"column":22}}},"42":{"name":"wrap","line":276,"loc":{"start":{"line":276,"column":0},"end":{"line":276,"column":39}}},"43":{"name":"indent","line":280,"loc":{"start":{"line":280,"column":0},"end":{"line":280,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":22}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":36}},"4":{"start":{"line":14,"column":0},"end":{"line":16,"column":1}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":65}},"6":{"start":{"line":25,"column":0},"end":{"line":252,"column":2}},"7":{"start":{"line":27,"column":4},"end":{"line":27,"column":22}},"8":{"start":{"line":30,"column":4},"end":{"line":30,"column":27}},"9":{"start":{"line":36,"column":4},"end":{"line":36,"column":49}},"10":{"start":{"line":40,"column":4},"end":{"line":40,"column":28}},"11":{"start":{"line":41,"column":4},"end":{"line":41,"column":25}},"12":{"start":{"line":42,"column":4},"end":{"line":42,"column":71}},"13":{"start":{"line":43,"column":4},"end":{"line":43,"column":48}},"14":{"start":{"line":44,"column":4},"end":{"line":44,"column":41}},"15":{"start":{"line":47,"column":4},"end":{"line":47,"column":144}},"16":{"start":{"line":52,"column":4},"end":{"line":54,"column":41}},"17":{"start":{"line":55,"column":4},"end":{"line":55,"column":62}},"18":{"start":{"line":59,"column":4},"end":{"line":59,"column":38}},"19":{"start":{"line":60,"column":4},"end":{"line":60,"column":29}},"20":{"start":{"line":64,"column":4},"end":{"line":68,"column":42}},"21":{"start":{"line":69,"column":4},"end":{"line":69,"column":125}},"22":{"start":{"line":73,"column":4},"end":{"line":74,"column":28}},"23":{"start":{"line":75,"column":4},"end":{"line":75,"column":31}},"24":{"start":{"line":81,"column":4},"end":{"line":82,"column":38}},"25":{"start":{"line":83,"column":4},"end":{"line":83,"column":59}},"26":{"start":{"line":87,"column":4},"end":{"line":89,"column":42}},"27":{"start":{"line":90,"column":4},"end":{"line":90,"column":95}},"28":{"start":{"line":94,"column":4},"end":{"line":97,"column":42}},"29":{"start":{"line":98,"column":4},"end":{"line":98,"column":115}},"30":{"start":{"line":104,"column":4},"end":{"line":104,"column":28}},"31":{"start":{"line":105,"column":4},"end":{"line":105,"column":17}},"32":{"start":{"line":108,"column":4},"end":{"line":108,"column":28}},"33":{"start":{"line":109,"column":4},"end":{"line":109,"column":17}},"34":{"start":{"line":112,"column":4},"end":{"line":112,"column":29}},"35":{"start":{"line":113,"column":4},"end":{"line":113,"column":33}},"36":{"start":{"line":116,"column":4},"end":{"line":116,"column":29}},"37":{"start":{"line":117,"column":4},"end":{"line":117,"column":33}},"38":{"start":{"line":120,"column":4},"end":{"line":120,"column":18}},"39":{"start":{"line":123,"column":4},"end":{"line":123,"column":29}},"40":{"start":{"line":124,"column":4},"end":{"line":124,"column":17}},"41":{"start":{"line":127,"column":4},"end":{"line":127,"column":31}},"42":{"start":{"line":128,"column":4},"end":{"line":128,"column":42}},"43":{"start":{"line":131,"column":4},"end":{"line":131,"column":31}},"44":{"start":{"line":132,"column":4},"end":{"line":132,"column":42}},"45":{"start":{"line":135,"column":4},"end":{"line":136,"column":29}},"46":{"start":{"line":137,"column":4},"end":{"line":137,"column":31}},"47":{"start":{"line":143,"column":4},"end":{"line":144,"column":32}},"48":{"start":{"line":145,"column":4},"end":{"line":145,"column":57}},"49":{"start":{"line":151,"column":4},"end":{"line":151,"column":27}},"50":{"start":{"line":152,"column":4},"end":{"line":152,"column":16}},"51":{"start":{"line":155,"column":4},"end":{"line":155,"column":27}},"52":{"start":{"line":156,"column":4},"end":{"line":156,"column":28}},"53":{"start":{"line":159,"column":4},"end":{"line":159,"column":27}},"54":{"start":{"line":160,"column":4},"end":{"line":160,"column":22}},"55":{"start":{"line":166,"column":4},"end":{"line":167,"column":47}},"56":{"start":{"line":168,"column":4},"end":{"line":168,"column":79}},"57":{"start":{"line":172,"column":4},"end":{"line":173,"column":27}},"58":{"start":{"line":174,"column":4},"end":{"line":174,"column":35}},"59":{"start":{"line":178,"column":4},"end":{"line":179,"column":39}},"60":{"start":{"line":180,"column":4},"end":{"line":180,"column":62}},"61":{"start":{"line":184,"column":4},"end":{"line":187,"column":31}},"62":{"start":{"line":188,"column":4},"end":{"line":188,"column":120}},"63":{"start":{"line":192,"column":4},"end":{"line":195,"column":39}},"64":{"start":{"line":196,"column":4},"end":{"line":196,"column":100}},"65":{"start":{"line":200,"column":4},"end":{"line":203,"column":39}},"66":{"start":{"line":204,"column":4},"end":{"line":204,"column":92}},"67":{"start":{"line":208,"column":4},"end":{"line":210,"column":31}},"68":{"start":{"line":211,"column":4},"end":{"line":211,"column":80}},"69":{"start":{"line":215,"column":4},"end":{"line":217,"column":29}},"70":{"start":{"line":218,"column":4},"end":{"line":218,"column":88}},"71":{"start":{"line":222,"column":4},"end":{"line":224,"column":31}},"72":{"start":{"line":225,"column":4},"end":{"line":225,"column":75}},"73":{"start":{"line":229,"column":4},"end":{"line":230,"column":39}},"74":{"start":{"line":231,"column":4},"end":{"line":231,"column":52}},"75":{"start":{"line":235,"column":4},"end":{"line":237,"column":31}},"76":{"start":{"line":238,"column":4},"end":{"line":238,"column":76}},"77":{"start":{"line":242,"column":4},"end":{"line":242,"column":39}},"78":{"start":{"line":243,"column":4},"end":{"line":243,"column":34}},"79":{"start":{"line":247,"column":4},"end":{"line":249,"column":37}},"80":{"start":{"line":250,"column":4},"end":{"line":250,"column":101}},"81":{"start":{"line":258,"column":0},"end":{"line":262,"column":1}},"82":{"start":{"line":259,"column":2},"end":{"line":261,"column":32}},"83":{"start":{"line":260,"column":4},"end":{"line":260,"column":13}},"84":{"start":{"line":268,"column":0},"end":{"line":270,"column":1}},"85":{"start":{"line":269,"column":2},"end":{"line":269,"column":88}},"86":{"start":{"line":276,"column":0},"end":{"line":278,"column":1}},"87":{"start":{"line":277,"column":2},"end":{"line":277,"column":62}},"88":{"start":{"line":280,"column":0},"end":{"line":282,"column":1}},"89":{"start":{"line":281,"column":2},"end":{"line":281,"column":59}}},"branchMap":{"1":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":64},"end":{"line":47,"column":76}},{"start":{"line":47,"column":79},"end":{"line":47,"column":143}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":11},"end":{"line":47,"column":16}},{"start":{"line":47,"column":20},"end":{"line":47,"column":31}},{"start":{"line":47,"column":35},"end":{"line":47,"column":43}},{"start":{"line":47,"column":47},"end":{"line":47,"column":61}}]},"3":{"line":259,"type":"cond-expr","locations":[{"start":{"line":259,"column":22},"end":{"line":261,"column":26}},{"start":{"line":261,"column":29},"end":{"line":261,"column":31}}]},"4":{"line":261,"type":"binary-expr","locations":[{"start":{"line":261,"column":10},"end":{"line":261,"column":19}},{"start":{"line":261,"column":23},"end":{"line":261,"column":25}}]},"5":{"line":269,"type":"cond-expr","locations":[{"start":{"line":269,"column":39},"end":{"line":269,"column":80}},{"start":{"line":269,"column":83},"end":{"line":269,"column":87}}]},"6":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":9},"end":{"line":269,"column":14}},{"start":{"line":269,"column":18},"end":{"line":269,"column":36}}]},"7":{"line":277,"type":"cond-expr","locations":[{"start":{"line":277,"column":23},"end":{"line":277,"column":56}},{"start":{"line":277,"column":59},"end":{"line":277,"column":61}}]},"8":{"line":277,"type":"binary-expr","locations":[{"start":{"line":277,"column":46},"end":{"line":277,"column":49}},{"start":{"line":277,"column":53},"end":{"line":277,"column":55}}]},"9":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":9},"end":{"line":281,"column":20}},{"start":{"line":281,"column":24},"end":{"line":281,"column":58}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.print = print;","","var _visitor = require('./visitor');","","/**"," * Converts an AST into a string, using one set of reasonable"," * formatting rules."," */","function print(ast) {","  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });","} /**","   *  Copyright (c) 2015, Facebook, Inc.","   *  All rights reserved.","   *","   *  This source code is licensed under the BSD-style license found in the","   *  LICENSE file in the root directory of this source tree. An additional grant","   *  of patent rights can be found in the PATENTS file in the same directory.","   */","","var printDocASTReducer = {","  Name: function Name(node) {","    return node.value;","  },","  Variable: function Variable(node) {","    return '$' + node.name;","  },","","  // Document","","  Document: function Document(node) {","    return join(node.definitions, '\\n\\n') + '\\n';","  },","","  OperationDefinition: function OperationDefinition(node) {","    var op = node.operation;","    var name = node.name;","    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');","    var directives = join(node.directives, ' ');","    var selectionSet = node.selectionSet;","    // Anonymous queries with no directives or variable definitions can use","    // the query short form.","    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');","  },","","","  VariableDefinition: function VariableDefinition(_ref) {","    var variable = _ref.variable,","        type = _ref.type,","        defaultValue = _ref.defaultValue;","    return variable + ': ' + type + wrap(' = ', defaultValue);","  },","","  SelectionSet: function SelectionSet(_ref2) {","    var selections = _ref2.selections;","    return block(selections);","  },","","  Field: function Field(_ref3) {","    var alias = _ref3.alias,","        name = _ref3.name,","        args = _ref3.arguments,","        directives = _ref3.directives,","        selectionSet = _ref3.selectionSet;","    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');","  },","","  Argument: function Argument(_ref4) {","    var name = _ref4.name,","        value = _ref4.value;","    return name + ': ' + value;","  },","","  // Fragments","","  FragmentSpread: function FragmentSpread(_ref5) {","    var name = _ref5.name,","        directives = _ref5.directives;","    return '...' + name + wrap(' ', join(directives, ' '));","  },","","  InlineFragment: function InlineFragment(_ref6) {","    var typeCondition = _ref6.typeCondition,","        directives = _ref6.directives,","        selectionSet = _ref6.selectionSet;","    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');","  },","","  FragmentDefinition: function FragmentDefinition(_ref7) {","    var name = _ref7.name,","        typeCondition = _ref7.typeCondition,","        directives = _ref7.directives,","        selectionSet = _ref7.selectionSet;","    return 'fragment ' + name + ' on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ') + selectionSet;","  },","","  // Value","","  IntValue: function IntValue(_ref8) {","    var value = _ref8.value;","    return value;","  },","  FloatValue: function FloatValue(_ref9) {","    var value = _ref9.value;","    return value;","  },","  StringValue: function StringValue(_ref10) {","    var value = _ref10.value;","    return JSON.stringify(value);","  },","  BooleanValue: function BooleanValue(_ref11) {","    var value = _ref11.value;","    return JSON.stringify(value);","  },","  NullValue: function NullValue() {","    return 'null';","  },","  EnumValue: function EnumValue(_ref12) {","    var value = _ref12.value;","    return value;","  },","  ListValue: function ListValue(_ref13) {","    var values = _ref13.values;","    return '[' + join(values, ', ') + ']';","  },","  ObjectValue: function ObjectValue(_ref14) {","    var fields = _ref14.fields;","    return '{' + join(fields, ', ') + '}';","  },","  ObjectField: function ObjectField(_ref15) {","    var name = _ref15.name,","        value = _ref15.value;","    return name + ': ' + value;","  },","","  // Directive","","  Directive: function Directive(_ref16) {","    var name = _ref16.name,","        args = _ref16.arguments;","    return '@' + name + wrap('(', join(args, ', '), ')');","  },","","  // Type","","  NamedType: function NamedType(_ref17) {","    var name = _ref17.name;","    return name;","  },","  ListType: function ListType(_ref18) {","    var type = _ref18.type;","    return '[' + type + ']';","  },","  NonNullType: function NonNullType(_ref19) {","    var type = _ref19.type;","    return type + '!';","  },","","  // Type System Definitions","","  SchemaDefinition: function SchemaDefinition(_ref20) {","    var directives = _ref20.directives,","        operationTypes = _ref20.operationTypes;","    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');","  },","","  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {","    var operation = _ref21.operation,","        type = _ref21.type;","    return operation + ': ' + type;","  },","","  ScalarTypeDefinition: function ScalarTypeDefinition(_ref22) {","    var name = _ref22.name,","        directives = _ref22.directives;","    return join(['scalar', name, join(directives, ' ')], ' ');","  },","","  ObjectTypeDefinition: function ObjectTypeDefinition(_ref23) {","    var name = _ref23.name,","        interfaces = _ref23.interfaces,","        directives = _ref23.directives,","        fields = _ref23.fields;","    return join(['type', name, wrap('implements ', join(interfaces, ', ')), join(directives, ' '), block(fields)], ' ');","  },","","  FieldDefinition: function FieldDefinition(_ref24) {","    var name = _ref24.name,","        args = _ref24.arguments,","        type = _ref24.type,","        directives = _ref24.directives;","    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));","  },","","  InputValueDefinition: function InputValueDefinition(_ref25) {","    var name = _ref25.name,","        type = _ref25.type,","        defaultValue = _ref25.defaultValue,","        directives = _ref25.directives;","    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');","  },","","  InterfaceTypeDefinition: function InterfaceTypeDefinition(_ref26) {","    var name = _ref26.name,","        directives = _ref26.directives,","        fields = _ref26.fields;","    return join(['interface', name, join(directives, ' '), block(fields)], ' ');","  },","","  UnionTypeDefinition: function UnionTypeDefinition(_ref27) {","    var name = _ref27.name,","        directives = _ref27.directives,","        types = _ref27.types;","    return join(['union', name, join(directives, ' '), '= ' + join(types, ' | ')], ' ');","  },","","  EnumTypeDefinition: function EnumTypeDefinition(_ref28) {","    var name = _ref28.name,","        directives = _ref28.directives,","        values = _ref28.values;","    return join(['enum', name, join(directives, ' '), block(values)], ' ');","  },","","  EnumValueDefinition: function EnumValueDefinition(_ref29) {","    var name = _ref29.name,","        directives = _ref29.directives;","    return join([name, join(directives, ' ')], ' ');","  },","","  InputObjectTypeDefinition: function InputObjectTypeDefinition(_ref30) {","    var name = _ref30.name,","        directives = _ref30.directives,","        fields = _ref30.fields;","    return join(['input', name, join(directives, ' '), block(fields)], ' ');","  },","","  TypeExtensionDefinition: function TypeExtensionDefinition(_ref31) {","    var definition = _ref31.definition;","    return 'extend ' + definition;","  },","","  DirectiveDefinition: function DirectiveDefinition(_ref32) {","    var name = _ref32.name,","        args = _ref32.arguments,","        locations = _ref32.locations;","    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');","  }","};","","/**"," * Given maybeArray, print an empty string if it is null or empty, otherwise"," * print all items together separated by separator if provided"," */","function join(maybeArray, separator) {","  return maybeArray ? maybeArray.filter(function (x) {","    return x;","  }).join(separator || '') : '';","}","","/**"," * Given array, print each item on its own line, wrapped in an"," * indented \"{ }\" block."," */","function block(array) {","  return array && array.length !== 0 ? indent('{\\n' + join(array, '\\n')) + '\\n}' : '{}';","}","","/**"," * If maybeString is not null or empty, then wrap with start and end, otherwise"," * print an empty string."," */","function wrap(start, maybeString, end) {","  return maybeString ? start + maybeString + (end || '') : '';","}","","function indent(maybeString) {","  return maybeString && maybeString.replace(/\\n/g, '\\n  ');","}"],"l":{"3":1,"6":1,"8":1,"14":1,"15":0,"25":1,"27":0,"30":0,"36":0,"40":0,"41":0,"42":0,"43":0,"44":0,"47":0,"52":0,"55":0,"59":0,"60":0,"64":0,"69":0,"73":0,"75":0,"81":0,"83":0,"87":0,"90":0,"94":0,"98":0,"104":0,"105":0,"108":0,"109":0,"112":0,"113":0,"116":0,"117":0,"120":0,"123":0,"124":0,"127":0,"128":0,"131":0,"132":0,"135":0,"137":0,"143":0,"145":0,"151":0,"152":0,"155":0,"156":0,"159":0,"160":0,"166":0,"168":0,"172":0,"174":0,"178":0,"180":0,"184":0,"188":0,"192":0,"196":0,"200":0,"204":0,"208":0,"211":0,"215":0,"218":0,"222":0,"225":0,"229":0,"231":0,"235":0,"238":0,"242":0,"243":0,"247":0,"250":0,"258":1,"259":0,"260":0,"268":1,"269":0,"276":1,"277":0,"280":1,"281":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/find.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/find.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"find","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":23}},"3":{"start":{"line":17,"column":0},"end":{"line":23,"column":1}},"4":{"start":{"line":18,"column":2},"end":{"line":22,"column":3}},"5":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"6":{"start":{"line":20,"column":6},"end":{"line":20,"column":21}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]}},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = find;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function find(list, predicate) {","  for (var i = 0; i < list.length; i++) {","    if (predicate(list[i])) {","      return list[i];","    }","  }","}"],"l":{"3":1,"6":1,"17":1,"18":0,"19":0,"20":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/typeComparators.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/typeComparators.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"isEqualType","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":35}}},"2":{"name":"isTypeSubTypeOf","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":58}}},"3":{"name":"doTypesOverlap","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":46}}},"4":{"name":"(anonymous_4)","line":109,"loc":{"start":{"line":109,"column":49},"end":{"line":109,"column":65}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":42}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":48}},"6":{"start":{"line":15,"column":0},"end":{"line":33,"column":1}},"7":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"8":{"start":{"line":18,"column":4},"end":{"line":18,"column":16}},"9":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"10":{"start":{"line":23,"column":4},"end":{"line":23,"column":51}},"11":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"12":{"start":{"line":28,"column":4},"end":{"line":28,"column":51}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":15}},"14":{"start":{"line":49,"column":0},"end":{"line":85,"column":1}},"15":{"start":{"line":51,"column":2},"end":{"line":53,"column":3}},"16":{"start":{"line":52,"column":4},"end":{"line":52,"column":16}},"17":{"start":{"line":56,"column":2},"end":{"line":64,"column":3}},"18":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"19":{"start":{"line":58,"column":6},"end":{"line":58,"column":76}},"20":{"start":{"line":60,"column":4},"end":{"line":60,"column":17}},"21":{"start":{"line":61,"column":9},"end":{"line":64,"column":3}},"22":{"start":{"line":63,"column":4},"end":{"line":63,"column":67}},"23":{"start":{"line":67,"column":2},"end":{"line":75,"column":3}},"24":{"start":{"line":68,"column":4},"end":{"line":70,"column":5}},"25":{"start":{"line":69,"column":6},"end":{"line":69,"column":76}},"26":{"start":{"line":71,"column":4},"end":{"line":71,"column":17}},"27":{"start":{"line":72,"column":9},"end":{"line":75,"column":3}},"28":{"start":{"line":74,"column":4},"end":{"line":74,"column":17}},"29":{"start":{"line":79,"column":2},"end":{"line":81,"column":3}},"30":{"start":{"line":80,"column":4},"end":{"line":80,"column":16}},"31":{"start":{"line":84,"column":2},"end":{"line":84,"column":15}},"32":{"start":{"line":96,"column":0},"end":{"line":124,"column":1}},"33":{"start":{"line":98,"column":2},"end":{"line":98,"column":21}},"34":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"35":{"start":{"line":102,"column":4},"end":{"line":102,"column":16}},"36":{"start":{"line":105,"column":2},"end":{"line":115,"column":3}},"37":{"start":{"line":106,"column":4},"end":{"line":112,"column":5}},"38":{"start":{"line":109,"column":6},"end":{"line":111,"column":9}},"39":{"start":{"line":110,"column":8},"end":{"line":110,"column":51}},"40":{"start":{"line":114,"column":4},"end":{"line":114,"column":48}},"41":{"start":{"line":117,"column":2},"end":{"line":120,"column":3}},"42":{"start":{"line":119,"column":4},"end":{"line":119,"column":48}},"43":{"start":{"line":123,"column":2},"end":{"line":123,"column":15}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"3":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":49}},{"start":{"line":22,"column":53},"end":{"line":22,"column":96}}]},"4":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"5":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":46}},{"start":{"line":27,"column":50},"end":{"line":27,"column":90}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"7":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"8":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"9":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":9},"end":{"line":61,"column":9}},{"start":{"line":61,"column":9},"end":{"line":61,"column":9}}]},"10":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":2},"end":{"line":67,"column":2}},{"start":{"line":67,"column":2},"end":{"line":67,"column":2}}]},"11":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"12":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":9},"end":{"line":72,"column":9}},{"start":{"line":72,"column":9},"end":{"line":72,"column":9}}]},"13":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":2},"end":{"line":79,"column":2}},{"start":{"line":79,"column":2},"end":{"line":79,"column":2}}]},"14":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":48}},{"start":{"line":79,"column":52},"end":{"line":79,"column":105}},{"start":{"line":79,"column":109},"end":{"line":79,"column":155}}]},"15":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"16":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":2},"end":{"line":105,"column":2}},{"start":{"line":105,"column":2},"end":{"line":105,"column":2}}]},"17":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":55}},{"start":{"line":105,"column":59},"end":{"line":105,"column":104}}]},"18":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":106,"column":4}},{"start":{"line":106,"column":4},"end":{"line":106,"column":4}}]},"19":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":58}},{"start":{"line":106,"column":62},"end":{"line":106,"column":108}}]},"20":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":2},"end":{"line":117,"column":2}},{"start":{"line":117,"column":2},"end":{"line":117,"column":2}}]},"21":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":6},"end":{"line":117,"column":56}},{"start":{"line":117,"column":60},"end":{"line":117,"column":106}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.isEqualType = isEqualType;","exports.isTypeSubTypeOf = isTypeSubTypeOf;","exports.doTypesOverlap = doTypesOverlap;","","var _definition = require('../type/definition');","","/**"," * Provided two types, return true if the types are equal (invariant)."," */","function isEqualType(typeA, typeB) {","  // Equivalent types are equal.","  if (typeA === typeB) {","    return true;","  }","","  // If either type is non-null, the other must also be non-null.","  if (typeA instanceof _definition.GraphQLNonNull && typeB instanceof _definition.GraphQLNonNull) {","    return isEqualType(typeA.ofType, typeB.ofType);","  }","","  // If either type is a list, the other must also be a list.","  if (typeA instanceof _definition.GraphQLList && typeB instanceof _definition.GraphQLList) {","    return isEqualType(typeA.ofType, typeB.ofType);","  }","","  // Otherwise the types are not equal.","  return false;","}","","/**"," * Provided a type and a super type, return true if the first type is either"," * equal or a subset of the second super type (covariant)."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function isTypeSubTypeOf(schema, maybeSubType, superType) {","  // Equivalent type is a valid subtype","  if (maybeSubType === superType) {","    return true;","  }","","  // If superType is non-null, maybeSubType must also be non-null.","  if (superType instanceof _definition.GraphQLNonNull) {","    if (maybeSubType instanceof _definition.GraphQLNonNull) {","      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);","    }","    return false;","  } else if (maybeSubType instanceof _definition.GraphQLNonNull) {","    // If superType is nullable, maybeSubType may be non-null or nullable.","    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);","  }","","  // If superType type is a list, maybeSubType type must also be a list.","  if (superType instanceof _definition.GraphQLList) {","    if (maybeSubType instanceof _definition.GraphQLList) {","      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);","    }","    return false;","  } else if (maybeSubType instanceof _definition.GraphQLList) {","    // If superType is not a list, maybeSubType must also be not a list.","    return false;","  }","","  // If superType type is an abstract type, maybeSubType type may be a currently","  // possible object type.","  if ((0, _definition.isAbstractType)(superType) && maybeSubType instanceof _definition.GraphQLObjectType && schema.isPossibleType(superType, maybeSubType)) {","    return true;","  }","","  // Otherwise, the child type is not a valid subtype of the parent type.","  return false;","}","","/**"," * Provided two composite types, determine if they \"overlap\". Two composite"," * types overlap when the Sets of possible concrete types for each intersect."," *"," * This is often used to determine if a fragment of a given type could possibly"," * be visited in a context of another type."," *"," * This function is commutative."," */","function doTypesOverlap(schema, typeA, typeB) {","  // So flow is aware this is constant","  var _typeB = typeB;","","  // Equivalent types overlap","  if (typeA === _typeB) {","    return true;","  }","","  if (typeA instanceof _definition.GraphQLInterfaceType || typeA instanceof _definition.GraphQLUnionType) {","    if (_typeB instanceof _definition.GraphQLInterfaceType || _typeB instanceof _definition.GraphQLUnionType) {","      // If both types are abstract, then determine if there is any intersection","      // between possible concrete types of each.","      return schema.getPossibleTypes(typeA).some(function (type) {","        return schema.isPossibleType(_typeB, type);","      });","    }","    // Determine if the latter type is a possible concrete type of the former.","    return schema.isPossibleType(typeA, _typeB);","  }","","  if (_typeB instanceof _definition.GraphQLInterfaceType || _typeB instanceof _definition.GraphQLUnionType) {","    // Determine if the former type is a possible concrete type of the latter.","    return schema.isPossibleType(_typeB, typeA);","  }","","  // Otherwise the types do not overlap.","  return false;","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"15":1,"17":0,"18":0,"22":0,"23":0,"27":0,"28":0,"32":0,"49":1,"51":0,"52":0,"56":0,"57":0,"58":0,"60":0,"61":0,"63":0,"67":0,"68":0,"69":0,"71":0,"72":0,"74":0,"79":0,"80":0,"84":0,"96":1,"98":0,"101":0,"102":0,"105":0,"106":0,"109":0,"110":0,"114":0,"117":0,"119":0,"123":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/TypeInfo.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/TypeInfo.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":0,"42":0,"43":1,"44":0,"45":0,"46":1,"47":0,"48":0,"49":1,"50":0,"51":1,"52":0,"53":1,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":1,"134":1,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0},"b":{"1":[1,0],"2":[1,1],"3":[1,0],"4":[1,1],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0,0,0,0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0,0,0,0,0,0,0,0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0,0,0],"37":[0,0],"38":[0,0]},"f":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}}},"2":{"name":"_interopRequireWildcard","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":38}}},"3":{"name":"_classCallCheck","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":48}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":34},"end":{"line":41,"column":46}}},"5":{"name":"TypeInfo","line":42,"loc":{"start":{"line":42,"column":2},"end":{"line":45,"column":17}}},"6":{"name":"getType","line":59,"loc":{"start":{"line":59,"column":31},"end":{"line":59,"column":50}}},"7":{"name":"getParentType","line":65,"loc":{"start":{"line":65,"column":37},"end":{"line":65,"column":62}}},"8":{"name":"getInputType","line":71,"loc":{"start":{"line":71,"column":36},"end":{"line":71,"column":60}}},"9":{"name":"getFieldDef","line":77,"loc":{"start":{"line":77,"column":35},"end":{"line":77,"column":58}}},"10":{"name":"getDirective","line":83,"loc":{"start":{"line":83,"column":36},"end":{"line":83,"column":60}}},"11":{"name":"getArgument","line":87,"loc":{"start":{"line":87,"column":35},"end":{"line":87,"column":58}}},"12":{"name":"getEnumValue","line":91,"loc":{"start":{"line":91,"column":36},"end":{"line":91,"column":60}}},"13":{"name":"enter","line":98,"loc":{"start":{"line":98,"column":29},"end":{"line":98,"column":64}}},"14":{"name":"(anonymous_14)","line":143,"loc":{"start":{"line":143,"column":62},"end":{"line":143,"column":77}}},"15":{"name":"leave","line":177,"loc":{"start":{"line":177,"column":29},"end":{"line":177,"column":50}}},"16":{"name":"getFieldDef","line":221,"loc":{"start":{"line":221,"column":0},"end":{"line":221,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":43}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":54}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":44}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":39}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":43}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":97}},"11":{"start":{"line":22,"column":39},"end":{"line":22,"column":95}},"12":{"start":{"line":24,"column":0},"end":{"line":24,"column":269}},"13":{"start":{"line":24,"column":40},"end":{"line":24,"column":267}},"14":{"start":{"line":24,"column":69},"end":{"line":24,"column":80}},"15":{"start":{"line":24,"column":90},"end":{"line":24,"column":106}},"16":{"start":{"line":24,"column":107},"end":{"line":24,"column":228}},"17":{"start":{"line":24,"column":126},"end":{"line":24,"column":226}},"18":{"start":{"line":24,"column":149},"end":{"line":24,"column":224}},"19":{"start":{"line":24,"column":201},"end":{"line":24,"column":224}},"20":{"start":{"line":24,"column":229},"end":{"line":24,"column":250}},"21":{"start":{"line":24,"column":251},"end":{"line":24,"column":265}},"22":{"start":{"line":26,"column":0},"end":{"line":26,"column":153}},"23":{"start":{"line":26,"column":50},"end":{"line":26,"column":151}},"24":{"start":{"line":26,"column":92},"end":{"line":26,"column":149}},"25":{"start":{"line":41,"column":0},"end":{"line":212,"column":4}},"26":{"start":{"line":42,"column":2},"end":{"line":57,"column":3}},"27":{"start":{"line":46,"column":4},"end":{"line":46,"column":36}},"28":{"start":{"line":48,"column":4},"end":{"line":48,"column":26}},"29":{"start":{"line":49,"column":4},"end":{"line":49,"column":25}},"30":{"start":{"line":50,"column":4},"end":{"line":50,"column":31}},"31":{"start":{"line":51,"column":4},"end":{"line":51,"column":30}},"32":{"start":{"line":52,"column":4},"end":{"line":52,"column":29}},"33":{"start":{"line":53,"column":4},"end":{"line":53,"column":27}},"34":{"start":{"line":54,"column":4},"end":{"line":54,"column":26}},"35":{"start":{"line":55,"column":4},"end":{"line":55,"column":27}},"36":{"start":{"line":56,"column":4},"end":{"line":56,"column":53}},"37":{"start":{"line":59,"column":2},"end":{"line":63,"column":4}},"38":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"39":{"start":{"line":61,"column":6},"end":{"line":61,"column":57}},"40":{"start":{"line":65,"column":2},"end":{"line":69,"column":4}},"41":{"start":{"line":66,"column":4},"end":{"line":68,"column":5}},"42":{"start":{"line":67,"column":6},"end":{"line":67,"column":69}},"43":{"start":{"line":71,"column":2},"end":{"line":75,"column":4}},"44":{"start":{"line":72,"column":4},"end":{"line":74,"column":5}},"45":{"start":{"line":73,"column":6},"end":{"line":73,"column":67}},"46":{"start":{"line":77,"column":2},"end":{"line":81,"column":4}},"47":{"start":{"line":78,"column":4},"end":{"line":80,"column":5}},"48":{"start":{"line":79,"column":6},"end":{"line":79,"column":65}},"49":{"start":{"line":83,"column":2},"end":{"line":85,"column":4}},"50":{"start":{"line":84,"column":4},"end":{"line":84,"column":27}},"51":{"start":{"line":87,"column":2},"end":{"line":89,"column":4}},"52":{"start":{"line":88,"column":4},"end":{"line":88,"column":26}},"53":{"start":{"line":91,"column":2},"end":{"line":93,"column":4}},"54":{"start":{"line":92,"column":4},"end":{"line":92,"column":27}},"55":{"start":{"line":98,"column":2},"end":{"line":175,"column":4}},"56":{"start":{"line":99,"column":4},"end":{"line":99,"column":30}},"57":{"start":{"line":100,"column":4},"end":{"line":174,"column":5}},"58":{"start":{"line":102,"column":8},"end":{"line":102,"column":70}},"59":{"start":{"line":103,"column":8},"end":{"line":103,"column":104}},"60":{"start":{"line":104,"column":8},"end":{"line":104,"column":14}},"61":{"start":{"line":106,"column":8},"end":{"line":106,"column":46}},"62":{"start":{"line":107,"column":8},"end":{"line":107,"column":30}},"63":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"64":{"start":{"line":109,"column":10},"end":{"line":109,"column":65}},"65":{"start":{"line":111,"column":8},"end":{"line":111,"column":43}},"66":{"start":{"line":112,"column":8},"end":{"line":112,"column":56}},"67":{"start":{"line":113,"column":8},"end":{"line":113,"column":14}},"68":{"start":{"line":115,"column":8},"end":{"line":115,"column":63}},"69":{"start":{"line":116,"column":8},"end":{"line":116,"column":14}},"70":{"start":{"line":118,"column":8},"end":{"line":118,"column":26}},"71":{"start":{"line":119,"column":8},"end":{"line":125,"column":9}},"72":{"start":{"line":120,"column":10},"end":{"line":120,"column":39}},"73":{"start":{"line":121,"column":15},"end":{"line":125,"column":9}},"74":{"start":{"line":122,"column":10},"end":{"line":122,"column":42}},"75":{"start":{"line":123,"column":15},"end":{"line":125,"column":9}},"76":{"start":{"line":124,"column":10},"end":{"line":124,"column":46}},"77":{"start":{"line":126,"column":8},"end":{"line":126,"column":35}},"78":{"start":{"line":127,"column":8},"end":{"line":127,"column":14}},"79":{"start":{"line":130,"column":8},"end":{"line":130,"column":50}},"80":{"start":{"line":131,"column":8},"end":{"line":131,"column":117}},"81":{"start":{"line":132,"column":8},"end":{"line":132,"column":97}},"82":{"start":{"line":133,"column":8},"end":{"line":133,"column":14}},"83":{"start":{"line":135,"column":8},"end":{"line":135,"column":73}},"84":{"start":{"line":136,"column":8},"end":{"line":136,"column":99}},"85":{"start":{"line":137,"column":8},"end":{"line":137,"column":14}},"86":{"start":{"line":139,"column":8},"end":{"line":139,"column":28}},"87":{"start":{"line":140,"column":8},"end":{"line":140,"column":29}},"88":{"start":{"line":141,"column":8},"end":{"line":141,"column":73}},"89":{"start":{"line":142,"column":8},"end":{"line":149,"column":9}},"90":{"start":{"line":143,"column":10},"end":{"line":145,"column":13}},"91":{"start":{"line":144,"column":12},"end":{"line":144,"column":48}},"92":{"start":{"line":146,"column":10},"end":{"line":148,"column":11}},"93":{"start":{"line":147,"column":12},"end":{"line":147,"column":34}},"94":{"start":{"line":150,"column":8},"end":{"line":150,"column":32}},"95":{"start":{"line":151,"column":8},"end":{"line":151,"column":43}},"96":{"start":{"line":152,"column":8},"end":{"line":152,"column":14}},"97":{"start":{"line":154,"column":8},"end":{"line":154,"column":77}},"98":{"start":{"line":155,"column":8},"end":{"line":155,"column":109}},"99":{"start":{"line":156,"column":8},"end":{"line":156,"column":14}},"100":{"start":{"line":158,"column":8},"end":{"line":158,"column":76}},"101":{"start":{"line":159,"column":8},"end":{"line":159,"column":31}},"102":{"start":{"line":160,"column":8},"end":{"line":163,"column":9}},"103":{"start":{"line":161,"column":10},"end":{"line":161,"column":67}},"104":{"start":{"line":162,"column":10},"end":{"line":162,"column":63}},"105":{"start":{"line":164,"column":8},"end":{"line":164,"column":45}},"106":{"start":{"line":165,"column":8},"end":{"line":165,"column":14}},"107":{"start":{"line":167,"column":8},"end":{"line":167,"column":74}},"108":{"start":{"line":168,"column":8},"end":{"line":168,"column":31}},"109":{"start":{"line":169,"column":8},"end":{"line":171,"column":9}},"110":{"start":{"line":170,"column":10},"end":{"line":170,"column":52}},"111":{"start":{"line":172,"column":8},"end":{"line":172,"column":36}},"112":{"start":{"line":173,"column":8},"end":{"line":173,"column":14}},"113":{"start":{"line":177,"column":2},"end":{"line":209,"column":4}},"114":{"start":{"line":178,"column":4},"end":{"line":208,"column":5}},"115":{"start":{"line":180,"column":8},"end":{"line":180,"column":36}},"116":{"start":{"line":181,"column":8},"end":{"line":181,"column":14}},"117":{"start":{"line":183,"column":8},"end":{"line":183,"column":34}},"118":{"start":{"line":184,"column":8},"end":{"line":184,"column":30}},"119":{"start":{"line":185,"column":8},"end":{"line":185,"column":14}},"120":{"start":{"line":187,"column":8},"end":{"line":187,"column":31}},"121":{"start":{"line":188,"column":8},"end":{"line":188,"column":14}},"122":{"start":{"line":192,"column":8},"end":{"line":192,"column":30}},"123":{"start":{"line":193,"column":8},"end":{"line":193,"column":14}},"124":{"start":{"line":195,"column":8},"end":{"line":195,"column":35}},"125":{"start":{"line":196,"column":8},"end":{"line":196,"column":14}},"126":{"start":{"line":198,"column":8},"end":{"line":198,"column":30}},"127":{"start":{"line":199,"column":8},"end":{"line":199,"column":35}},"128":{"start":{"line":200,"column":8},"end":{"line":200,"column":14}},"129":{"start":{"line":203,"column":8},"end":{"line":203,"column":35}},"130":{"start":{"line":204,"column":8},"end":{"line":204,"column":14}},"131":{"start":{"line":206,"column":8},"end":{"line":206,"column":31}},"132":{"start":{"line":207,"column":8},"end":{"line":207,"column":14}},"133":{"start":{"line":211,"column":2},"end":{"line":211,"column":18}},"134":{"start":{"line":221,"column":0},"end":{"line":235,"column":1}},"135":{"start":{"line":222,"column":2},"end":{"line":222,"column":34}},"136":{"start":{"line":223,"column":2},"end":{"line":225,"column":3}},"137":{"start":{"line":224,"column":4},"end":{"line":224,"column":45}},"138":{"start":{"line":226,"column":2},"end":{"line":228,"column":3}},"139":{"start":{"line":227,"column":4},"end":{"line":227,"column":43}},"140":{"start":{"line":229,"column":2},"end":{"line":231,"column":3}},"141":{"start":{"line":230,"column":4},"end":{"line":230,"column":47}},"142":{"start":{"line":232,"column":2},"end":{"line":234,"column":3}},"143":{"start":{"line":233,"column":4},"end":{"line":233,"column":40}}},"branchMap":{"1":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":70},"end":{"line":22,"column":73}},{"start":{"line":22,"column":76},"end":{"line":22,"column":94}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":46},"end":{"line":22,"column":49}},{"start":{"line":22,"column":53},"end":{"line":22,"column":67}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":40},"end":{"line":24,"column":40}},{"start":{"line":24,"column":40},"end":{"line":24,"column":40}}]},"4":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":44},"end":{"line":24,"column":47}},{"start":{"line":24,"column":51},"end":{"line":24,"column":65}}]},"5":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":107},"end":{"line":24,"column":107}},{"start":{"line":24,"column":107},"end":{"line":24,"column":107}}]},"6":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":149},"end":{"line":24,"column":149}},{"start":{"line":24,"column":149},"end":{"line":24,"column":149}}]},"7":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":50},"end":{"line":26,"column":50}},{"start":{"line":26,"column":50},"end":{"line":26,"column":50}}]},"8":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":24},"end":{"line":56,"column":37}},{"start":{"line":56,"column":41},"end":{"line":56,"column":52}}]},"9":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"10":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"11":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"12":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"13":{"line":100,"type":"switch","locations":[{"start":{"line":101,"column":6},"end":{"line":104,"column":14}},{"start":{"line":105,"column":6},"end":{"line":113,"column":14}},{"start":{"line":114,"column":6},"end":{"line":116,"column":14}},{"start":{"line":117,"column":6},"end":{"line":127,"column":14}},{"start":{"line":128,"column":6},"end":{"line":128,"column":32}},{"start":{"line":129,"column":6},"end":{"line":133,"column":14}},{"start":{"line":134,"column":6},"end":{"line":137,"column":14}},{"start":{"line":138,"column":6},"end":{"line":152,"column":14}},{"start":{"line":153,"column":6},"end":{"line":156,"column":14}},{"start":{"line":157,"column":6},"end":{"line":165,"column":14}},{"start":{"line":166,"column":6},"end":{"line":173,"column":14}}]},"14":{"line":103,"type":"cond-expr","locations":[{"start":{"line":103,"column":81},"end":{"line":103,"column":90}},{"start":{"line":103,"column":93},"end":{"line":103,"column":102}}]},"15":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"16":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":29},"end":{"line":112,"column":37}},{"start":{"line":112,"column":41},"end":{"line":112,"column":54}}]},"17":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":8}},{"start":{"line":119,"column":8},"end":{"line":119,"column":8}}]},"18":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":15},"end":{"line":121,"column":15}},{"start":{"line":121,"column":15},"end":{"line":121,"column":15}}]},"19":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":15},"end":{"line":123,"column":15}},{"start":{"line":123,"column":15},"end":{"line":123,"column":15}}]},"20":{"line":131,"type":"cond-expr","locations":[{"start":{"line":131,"column":44},"end":{"line":131,"column":99}},{"start":{"line":131,"column":102},"end":{"line":131,"column":116}}]},"21":{"line":132,"type":"cond-expr","locations":[{"start":{"line":132,"column":73},"end":{"line":132,"column":83}},{"start":{"line":132,"column":86},"end":{"line":132,"column":95}}]},"22":{"line":136,"type":"cond-expr","locations":[{"start":{"line":136,"column":76},"end":{"line":136,"column":85}},{"start":{"line":136,"column":88},"end":{"line":136,"column":97}}]},"23":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":31},"end":{"line":141,"column":50}},{"start":{"line":141,"column":54},"end":{"line":141,"column":72}}]},"24":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":8},"end":{"line":142,"column":8}},{"start":{"line":142,"column":8},"end":{"line":142,"column":8}}]},"25":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":10},"end":{"line":146,"column":10}},{"start":{"line":146,"column":10},"end":{"line":146,"column":10}}]},"26":{"line":155,"type":"cond-expr","locations":[{"start":{"line":155,"column":80},"end":{"line":155,"column":95}},{"start":{"line":155,"column":98},"end":{"line":155,"column":107}}]},"27":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":8}},{"start":{"line":160,"column":8},"end":{"line":160,"column":8}}]},"28":{"line":162,"type":"cond-expr","locations":[{"start":{"line":162,"column":35},"end":{"line":162,"column":50}},{"start":{"line":162,"column":53},"end":{"line":162,"column":62}}]},"29":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":8}},{"start":{"line":169,"column":8},"end":{"line":169,"column":8}}]},"30":{"line":178,"type":"switch","locations":[{"start":{"line":179,"column":6},"end":{"line":181,"column":14}},{"start":{"line":182,"column":6},"end":{"line":185,"column":14}},{"start":{"line":186,"column":6},"end":{"line":188,"column":14}},{"start":{"line":189,"column":6},"end":{"line":189,"column":37}},{"start":{"line":190,"column":6},"end":{"line":190,"column":32}},{"start":{"line":191,"column":6},"end":{"line":193,"column":14}},{"start":{"line":194,"column":6},"end":{"line":196,"column":14}},{"start":{"line":197,"column":6},"end":{"line":200,"column":14}},{"start":{"line":201,"column":6},"end":{"line":201,"column":21}},{"start":{"line":202,"column":6},"end":{"line":204,"column":14}},{"start":{"line":205,"column":6},"end":{"line":207,"column":14}}]},"31":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":2},"end":{"line":223,"column":2}},{"start":{"line":223,"column":2},"end":{"line":223,"column":2}}]},"32":{"line":223,"type":"binary-expr","locations":[{"start":{"line":223,"column":6},"end":{"line":223,"column":53}},{"start":{"line":223,"column":57},"end":{"line":223,"column":93}}]},"33":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"34":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":6},"end":{"line":226,"column":51}},{"start":{"line":226,"column":55},"end":{"line":226,"column":91}}]},"35":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":2},"end":{"line":229,"column":2}},{"start":{"line":229,"column":2},"end":{"line":229,"column":2}}]},"36":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":6},"end":{"line":229,"column":55}},{"start":{"line":229,"column":60},"end":{"line":229,"column":111}},{"start":{"line":229,"column":115},"end":{"line":229,"column":169}},{"start":{"line":229,"column":173},"end":{"line":229,"column":223}}]},"37":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":2},"end":{"line":232,"column":2}},{"start":{"line":232,"column":2},"end":{"line":232,"column":2}}]},"38":{"line":232,"type":"binary-expr","locations":[{"start":{"line":232,"column":6},"end":{"line":232,"column":57}},{"start":{"line":232,"column":61},"end":{"line":232,"column":115}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.TypeInfo = undefined;","","var _kinds = require('../language/kinds');","","var Kind = _interopRequireWildcard(_kinds);","","var _definition = require('../type/definition');","","var _introspection = require('../type/introspection');","","var _typeFromAST = require('./typeFromAST');","","var _find = require('../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * TypeInfo is a utility class which, given a GraphQL schema, can keep track"," * of the current field and type definitions at any point in a GraphQL document"," * AST during a recursive descent by calling `enter(node)` and `leave(node)`."," */","var TypeInfo = exports.TypeInfo = function () {","  function TypeInfo(schema,","  // NOTE: this experimental optional second parameter is only needed in order","  // to support non-spec-compliant codebases. You should never need to use it.","  getFieldDefFn) {","    _classCallCheck(this, TypeInfo);","","    this._schema = schema;","    this._typeStack = [];","    this._parentTypeStack = [];","    this._inputTypeStack = [];","    this._fieldDefStack = [];","    this._directive = null;","    this._argument = null;","    this._enumValue = null;","    this._getFieldDef = getFieldDefFn || getFieldDef;","  }","","  TypeInfo.prototype.getType = function getType() {","    if (this._typeStack.length > 0) {","      return this._typeStack[this._typeStack.length - 1];","    }","  };","","  TypeInfo.prototype.getParentType = function getParentType() {","    if (this._parentTypeStack.length > 0) {","      return this._parentTypeStack[this._parentTypeStack.length - 1];","    }","  };","","  TypeInfo.prototype.getInputType = function getInputType() {","    if (this._inputTypeStack.length > 0) {","      return this._inputTypeStack[this._inputTypeStack.length - 1];","    }","  };","","  TypeInfo.prototype.getFieldDef = function getFieldDef() {","    if (this._fieldDefStack.length > 0) {","      return this._fieldDefStack[this._fieldDefStack.length - 1];","    }","  };","","  TypeInfo.prototype.getDirective = function getDirective() {","    return this._directive;","  };","","  TypeInfo.prototype.getArgument = function getArgument() {","    return this._argument;","  };","","  TypeInfo.prototype.getEnumValue = function getEnumValue() {","    return this._enumValue;","  };","","  // Flow does not yet handle this case.","","","  TypeInfo.prototype.enter = function enter(node /* ASTNode */) {","    var schema = this._schema;","    switch (node.kind) {","      case Kind.SELECTION_SET:","        var namedType = (0, _definition.getNamedType)(this.getType());","        this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);","        break;","      case Kind.FIELD:","        var parentType = this.getParentType();","        var fieldDef = void 0;","        if (parentType) {","          fieldDef = this._getFieldDef(schema, parentType, node);","        }","        this._fieldDefStack.push(fieldDef);","        this._typeStack.push(fieldDef && fieldDef.type);","        break;","      case Kind.DIRECTIVE:","        this._directive = schema.getDirective(node.name.value);","        break;","      case Kind.OPERATION_DEFINITION:","        var type = void 0;","        if (node.operation === 'query') {","          type = schema.getQueryType();","        } else if (node.operation === 'mutation') {","          type = schema.getMutationType();","        } else if (node.operation === 'subscription') {","          type = schema.getSubscriptionType();","        }","        this._typeStack.push(type);","        break;","      case Kind.INLINE_FRAGMENT:","      case Kind.FRAGMENT_DEFINITION:","        var typeConditionAST = node.typeCondition;","        var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : this.getType();","        this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);","        break;","      case Kind.VARIABLE_DEFINITION:","        var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);","        this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);","        break;","      case Kind.ARGUMENT:","        var argDef = void 0;","        var argType = void 0;","        var fieldOrDirective = this.getDirective() || this.getFieldDef();","        if (fieldOrDirective) {","          argDef = (0, _find2.default)(fieldOrDirective.args, function (arg) {","            return arg.name === node.name.value;","          });","          if (argDef) {","            argType = argDef.type;","          }","        }","        this._argument = argDef;","        this._inputTypeStack.push(argType);","        break;","      case Kind.LIST:","        var listType = (0, _definition.getNullableType)(this.getInputType());","        this._inputTypeStack.push(listType instanceof _definition.GraphQLList ? listType.ofType : undefined);","        break;","      case Kind.OBJECT_FIELD:","        var objectType = (0, _definition.getNamedType)(this.getInputType());","        var fieldType = void 0;","        if (objectType instanceof _definition.GraphQLInputObjectType) {","          var inputField = objectType.getFields()[node.name.value];","          fieldType = inputField ? inputField.type : undefined;","        }","        this._inputTypeStack.push(fieldType);","        break;","      case Kind.ENUM:","        var enumType = (0, _definition.getNamedType)(this.getInputType());","        var enumValue = void 0;","        if (enumType instanceof _definition.GraphQLEnumType) {","          enumValue = enumType.getValue(node.value);","        }","        this._enumValue = enumValue;","        break;","    }","  };","","  TypeInfo.prototype.leave = function leave(node) {","    switch (node.kind) {","      case Kind.SELECTION_SET:","        this._parentTypeStack.pop();","        break;","      case Kind.FIELD:","        this._fieldDefStack.pop();","        this._typeStack.pop();","        break;","      case Kind.DIRECTIVE:","        this._directive = null;","        break;","      case Kind.OPERATION_DEFINITION:","      case Kind.INLINE_FRAGMENT:","      case Kind.FRAGMENT_DEFINITION:","        this._typeStack.pop();","        break;","      case Kind.VARIABLE_DEFINITION:","        this._inputTypeStack.pop();","        break;","      case Kind.ARGUMENT:","        this._argument = null;","        this._inputTypeStack.pop();","        break;","      case Kind.LIST:","      case Kind.OBJECT_FIELD:","        this._inputTypeStack.pop();","        break;","      case Kind.ENUM:","        this._enumValue = null;","        break;","    }","  };","","  return TypeInfo;","}();","","/**"," * Not exactly the same as the executor's definition of getFieldDef, in this"," * statically evaluated environment we do not always have an Object type,"," * and need to handle Interface and Union types."," */","","","function getFieldDef(schema, parentType, fieldNode) {","  var name = fieldNode.name.value;","  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {","    return _introspection.SchemaMetaFieldDef;","  }","  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {","    return _introspection.TypeMetaFieldDef;","  }","  if (name === _introspection.TypeNameMetaFieldDef.name && (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType || parentType instanceof _definition.GraphQLUnionType)) {","    return _introspection.TypeNameMetaFieldDef;","  }","  if (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType) {","    return parentType.getFields()[name];","  }","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"41":1,"42":1,"46":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"59":1,"60":0,"61":0,"65":1,"66":0,"67":0,"71":1,"72":0,"73":0,"77":1,"78":0,"79":0,"83":1,"84":0,"87":1,"88":0,"91":1,"92":0,"98":1,"99":0,"100":0,"102":0,"103":0,"104":0,"106":0,"107":0,"108":0,"109":0,"111":0,"112":0,"113":0,"115":0,"116":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"126":0,"127":0,"130":0,"131":0,"132":0,"133":0,"135":0,"136":0,"137":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"146":0,"147":0,"150":0,"151":0,"152":0,"154":0,"155":0,"156":0,"158":0,"159":0,"160":0,"161":0,"162":0,"164":0,"165":0,"167":0,"168":0,"169":0,"170":0,"172":0,"173":0,"177":1,"178":0,"180":0,"181":0,"183":0,"184":0,"185":0,"187":0,"188":0,"192":0,"193":0,"195":0,"196":0,"198":0,"199":0,"200":0,"203":0,"204":0,"206":0,"207":0,"211":1,"221":1,"222":0,"223":0,"224":0,"226":0,"227":0,"229":0,"230":0,"232":0,"233":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/typeFromAST.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/typeFromAST.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":1,"2":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":37}}},"2":{"name":"typeFromAST","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":53}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":48}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":97}},"8":{"start":{"line":16,"column":39},"end":{"line":16,"column":95}},"9":{"start":{"line":18,"column":0},"end":{"line":30,"column":1}},"10":{"start":{"line":19,"column":2},"end":{"line":19,"column":25}},"11":{"start":{"line":20,"column":2},"end":{"line":23,"column":3}},"12":{"start":{"line":21,"column":4},"end":{"line":21,"column":51}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":63}},"14":{"start":{"line":24,"column":2},"end":{"line":27,"column":3}},"15":{"start":{"line":25,"column":4},"end":{"line":25,"column":51}},"16":{"start":{"line":26,"column":4},"end":{"line":26,"column":66}},"17":{"start":{"line":28,"column":2},"end":{"line":28,"column":89}},"18":{"start":{"line":29,"column":2},"end":{"line":29,"column":45}}},"branchMap":{"1":{"line":16,"type":"cond-expr","locations":[{"start":{"line":16,"column":70},"end":{"line":16,"column":73}},{"start":{"line":16,"column":76},"end":{"line":16,"column":94}}]},"2":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":46},"end":{"line":16,"column":49}},{"start":{"line":16,"column":53},"end":{"line":16,"column":67}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"4":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":11},"end":{"line":22,"column":20}},{"start":{"line":22,"column":24},"end":{"line":22,"column":62}}]},"5":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"6":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":11},"end":{"line":26,"column":20}},{"start":{"line":26,"column":24},"end":{"line":26,"column":65}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.typeFromAST = typeFromAST;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _kinds = require('../language/kinds');","","var _definition = require('../type/definition');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function typeFromAST(schema, typeNode) {","  var innerType = void 0;","  if (typeNode.kind === _kinds.LIST_TYPE) {","    innerType = typeFromAST(schema, typeNode.type);","    return innerType && new _definition.GraphQLList(innerType);","  }","  if (typeNode.kind === _kinds.NON_NULL_TYPE) {","    innerType = typeFromAST(schema, typeNode.type);","    return innerType && new _definition.GraphQLNonNull(innerType);","  }","  (0, _invariant2.default)(typeNode.kind === _kinds.NAMED_TYPE, 'Must be a named type.');","  return schema.getType(typeNode.name.value);","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"26":0,"28":0,"29":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/specifiedRules.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/specifiedRules.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":35}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":68}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":72}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":56}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":78}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":72}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":50}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":66}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":66}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":64}},"12":{"start":{"line":26,"column":0},"end":{"line":26,"column":62}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":74}},"14":{"start":{"line":30,"column":0},"end":{"line":30,"column":60}},"15":{"start":{"line":32,"column":0},"end":{"line":32,"column":66}},"16":{"start":{"line":34,"column":0},"end":{"line":34,"column":68}},"17":{"start":{"line":36,"column":0},"end":{"line":36,"column":62}},"18":{"start":{"line":38,"column":0},"end":{"line":38,"column":58}},"19":{"start":{"line":40,"column":0},"end":{"line":40,"column":82}},"20":{"start":{"line":42,"column":0},"end":{"line":42,"column":64}},"21":{"start":{"line":44,"column":0},"end":{"line":44,"column":66}},"22":{"start":{"line":46,"column":0},"end":{"line":46,"column":72}},"23":{"start":{"line":48,"column":0},"end":{"line":48,"column":76}},"24":{"start":{"line":50,"column":0},"end":{"line":50,"column":80}},"25":{"start":{"line":52,"column":0},"end":{"line":52,"column":80}},"26":{"start":{"line":54,"column":0},"end":{"line":54,"column":84}},"27":{"start":{"line":56,"column":0},"end":{"line":56,"column":70}},"28":{"start":{"line":97,"column":0},"end":{"line":97,"column":1163}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.specifiedRules = undefined;","","var _UniqueOperationNames = require('./rules/UniqueOperationNames');","","var _LoneAnonymousOperation = require('./rules/LoneAnonymousOperation');","","var _KnownTypeNames = require('./rules/KnownTypeNames');","","var _FragmentsOnCompositeTypes = require('./rules/FragmentsOnCompositeTypes');","","var _VariablesAreInputTypes = require('./rules/VariablesAreInputTypes');","","var _ScalarLeafs = require('./rules/ScalarLeafs');","","var _FieldsOnCorrectType = require('./rules/FieldsOnCorrectType');","","var _UniqueFragmentNames = require('./rules/UniqueFragmentNames');","","var _KnownFragmentNames = require('./rules/KnownFragmentNames');","","var _NoUnusedFragments = require('./rules/NoUnusedFragments');","","var _PossibleFragmentSpreads = require('./rules/PossibleFragmentSpreads');","","var _NoFragmentCycles = require('./rules/NoFragmentCycles');","","var _UniqueVariableNames = require('./rules/UniqueVariableNames');","","var _NoUndefinedVariables = require('./rules/NoUndefinedVariables');","","var _NoUnusedVariables = require('./rules/NoUnusedVariables');","","var _KnownDirectives = require('./rules/KnownDirectives');","","var _UniqueDirectivesPerLocation = require('./rules/UniqueDirectivesPerLocation');","","var _KnownArgumentNames = require('./rules/KnownArgumentNames');","","var _UniqueArgumentNames = require('./rules/UniqueArgumentNames');","","var _ArgumentsOfCorrectType = require('./rules/ArgumentsOfCorrectType');","","var _ProvidedNonNullArguments = require('./rules/ProvidedNonNullArguments');","","var _DefaultValuesOfCorrectType = require('./rules/DefaultValuesOfCorrectType');","","var _VariablesInAllowedPosition = require('./rules/VariablesInAllowedPosition');","","var _OverlappingFieldsCanBeMerged = require('./rules/OverlappingFieldsCanBeMerged');","","var _UniqueInputFieldNames = require('./rules/UniqueInputFieldNames');","","/**"," * This set includes all validation rules defined by the GraphQL spec."," */","","","// Spec Section: \"Field Selection Merging\"","","","// Spec Section: \"Variable Default Values Are Correctly Typed\"","","","// Spec Section: \"Argument Values Type Correctness\"","","","// Spec Section: \"Argument Names\"","","","// Spec Section: \"Directives Are Defined\"","","","// Spec Section: \"All Variable Used Defined\"","","","// Spec Section: \"Fragments must not form cycles\"","","","// Spec Section: \"Fragments must be used\"","","","// Spec Section: \"Fragment Name Uniqueness\"","","","// Spec Section: \"Leaf Field Selections\"","","","// Spec Section: \"Fragments on Composite Types\"","","","// Spec Section: \"Lone Anonymous Operation\"","var specifiedRules = exports.specifiedRules = [_UniqueOperationNames.UniqueOperationNames, _LoneAnonymousOperation.LoneAnonymousOperation, _KnownTypeNames.KnownTypeNames, _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes, _VariablesAreInputTypes.VariablesAreInputTypes, _ScalarLeafs.ScalarLeafs, _FieldsOnCorrectType.FieldsOnCorrectType, _UniqueFragmentNames.UniqueFragmentNames, _KnownFragmentNames.KnownFragmentNames, _NoUnusedFragments.NoUnusedFragments, _PossibleFragmentSpreads.PossibleFragmentSpreads, _NoFragmentCycles.NoFragmentCycles, _UniqueVariableNames.UniqueVariableNames, _NoUndefinedVariables.NoUndefinedVariables, _NoUnusedVariables.NoUnusedVariables, _KnownDirectives.KnownDirectives, _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation, _KnownArgumentNames.KnownArgumentNames, _UniqueArgumentNames.UniqueArgumentNames, _ArgumentsOfCorrectType.ArgumentsOfCorrectType, _ProvidedNonNullArguments.ProvidedNonNullArguments, _DefaultValuesOfCorrectType.DefaultValuesOfCorrectType, _VariablesInAllowedPosition.VariablesInAllowedPosition, _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged, _UniqueInputFieldNames.UniqueInputFieldNames];","","// Spec Section: \"Input Object Field Uniqueness\"","","","// Spec Section: \"All Variable Usages Are Allowed\"","","","// Spec Section: \"Argument Optionality\"","","","// Spec Section: \"Argument Uniqueness\"","","","// Spec Section: \"Directives Are Unique Per Location\"","","","// Spec Section: \"All Variables Used\"","","","// Spec Section: \"Variable Uniqueness\"","","","// Spec Section: \"Fragment spread is possible\"","","","// Spec Section: \"Fragment spread target defined\"","","","// Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"","","","// Spec Section: \"Variables are Input Types\"","","","// Spec Section: \"Fragment Spread Type Existence\"","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","// Spec Section: \"Operation Name Uniqueness\""],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":1,"34":1,"36":1,"38":1,"40":1,"42":1,"44":1,"46":1,"48":1,"50":1,"52":1,"54":1,"56":1,"97":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueOperationNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueOperationNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"duplicateOperationNameMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":54}}},"2":{"name":"UniqueOperationNames","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":39}}},"3":{"name":"OperationDefinition","line":32,"loc":{"start":{"line":32,"column":25},"end":{"line":32,"column":60}}},"4":{"name":"FragmentDefinition","line":44,"loc":{"start":{"line":44,"column":24},"end":{"line":44,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":70}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":74}},"7":{"start":{"line":29,"column":0},"end":{"line":48,"column":1}},"8":{"start":{"line":30,"column":2},"end":{"line":30,"column":48}},"9":{"start":{"line":31,"column":2},"end":{"line":47,"column":4}},"10":{"start":{"line":33,"column":6},"end":{"line":33,"column":36}},"11":{"start":{"line":34,"column":6},"end":{"line":40,"column":7}},"12":{"start":{"line":35,"column":8},"end":{"line":39,"column":9}},"13":{"start":{"line":36,"column":10},"end":{"line":36,"column":166}},"14":{"start":{"line":38,"column":10},"end":{"line":38,"column":67}},"15":{"start":{"line":41,"column":6},"end":{"line":41,"column":19}},"16":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.duplicateOperationNameMessage = duplicateOperationNameMessage;","exports.UniqueOperationNames = UniqueOperationNames;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function duplicateOperationNameMessage(operationName) {","  return 'There can be only one operation named \"' + operationName + '\".';","}","","/**"," * Unique operation names"," *"," * A GraphQL document is only valid if all defined operations have unique names."," */","function UniqueOperationNames(context) {","  var knownOperationNames = Object.create(null);","  return {","    OperationDefinition: function OperationDefinition(node) {","      var operationName = node.name;","      if (operationName) {","        if (knownOperationNames[operationName.value]) {","          context.reportError(new _error.GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));","        } else {","          knownOperationNames[operationName.value] = operationName;","        }","      }","      return false;","    },","","    FragmentDefinition: function FragmentDefinition() {","      return false;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"29":1,"30":0,"31":0,"33":0,"34":0,"35":0,"36":0,"38":0,"41":0,"45":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/LoneAnonymousOperation.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/LoneAnonymousOperation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"anonOperationNotAloneMessage","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":40}}},"2":{"name":"LoneAnonymousOperation","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":41}}},"3":{"name":"Document","line":36,"loc":{"start":{"line":36,"column":14},"end":{"line":36,"column":38}}},"4":{"name":"(anonymous_4)","line":37,"loc":{"start":{"line":37,"column":47},"end":{"line":37,"column":69}}},"5":{"name":"OperationDefinition","line":41,"loc":{"start":{"line":41,"column":25},"end":{"line":41,"column":60}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":68}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}},"6":{"start":{"line":13,"column":0},"end":{"line":15,"column":1}},"7":{"start":{"line":14,"column":2},"end":{"line":14,"column":72}},"8":{"start":{"line":33,"column":0},"end":{"line":47,"column":1}},"9":{"start":{"line":34,"column":2},"end":{"line":34,"column":25}},"10":{"start":{"line":35,"column":2},"end":{"line":46,"column":4}},"11":{"start":{"line":37,"column":6},"end":{"line":39,"column":16}},"12":{"start":{"line":38,"column":8},"end":{"line":38,"column":63}},"13":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"14":{"start":{"line":43,"column":8},"end":{"line":43,"column":93}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":20}},{"start":{"line":42,"column":24},"end":{"line":42,"column":42}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.anonOperationNotAloneMessage = anonOperationNotAloneMessage;","exports.LoneAnonymousOperation = LoneAnonymousOperation;","","var _error = require('../../error');","","var _kinds = require('../../language/kinds');","","function anonOperationNotAloneMessage() {","  return 'This anonymous operation must be the only defined operation.';","}","","/**"," * Lone anonymous operation"," *"," * A GraphQL document is only valid if when it contains an anonymous operation"," * (the query short-hand) that it contains only that one operation definition."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function LoneAnonymousOperation(context) {","  var operationCount = 0;","  return {","    Document: function Document(node) {","      operationCount = node.definitions.filter(function (definition) {","        return definition.kind === _kinds.OPERATION_DEFINITION;","      }).length;","    },","    OperationDefinition: function OperationDefinition(node) {","      if (!node.name && operationCount > 1) {","        context.reportError(new _error.GraphQLError(anonOperationNotAloneMessage(), [node]));","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"14":0,"33":1,"34":0,"35":0,"37":0,"38":0,"42":0,"43":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownTypeNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownTypeNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":2,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[2,0],"2":[2,2],"3":[0,0],"4":[0,0]},"f":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":37}}},"2":{"name":"unknownTypeMessage","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":50}}},"3":{"name":"KnownTypeNames","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":33}}},"4":{"name":"ObjectTypeDefinition","line":49,"loc":{"start":{"line":49,"column":26},"end":{"line":49,"column":58}}},"5":{"name":"InterfaceTypeDefinition","line":52,"loc":{"start":{"line":52,"column":29},"end":{"line":52,"column":64}}},"6":{"name":"UnionTypeDefinition","line":55,"loc":{"start":{"line":55,"column":25},"end":{"line":55,"column":56}}},"7":{"name":"InputObjectTypeDefinition","line":58,"loc":{"start":{"line":58,"column":31},"end":{"line":58,"column":68}}},"8":{"name":"NamedType","line":61,"loc":{"start":{"line":61,"column":15},"end":{"line":61,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":48}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":40}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":63}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":59}},"9":{"start":{"line":19,"column":0},"end":{"line":19,"column":97}},"10":{"start":{"line":19,"column":39},"end":{"line":19,"column":95}},"11":{"start":{"line":30,"column":0},"end":{"line":36,"column":1}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":55}},"13":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"14":{"start":{"line":33,"column":4},"end":{"line":33,"column":84}},"15":{"start":{"line":35,"column":2},"end":{"line":35,"column":17}},"16":{"start":{"line":44,"column":0},"end":{"line":70,"column":1}},"17":{"start":{"line":45,"column":2},"end":{"line":69,"column":4}},"18":{"start":{"line":50,"column":6},"end":{"line":50,"column":19}},"19":{"start":{"line":53,"column":6},"end":{"line":53,"column":19}},"20":{"start":{"line":56,"column":6},"end":{"line":56,"column":19}},"21":{"start":{"line":59,"column":6},"end":{"line":59,"column":19}},"22":{"start":{"line":62,"column":6},"end":{"line":62,"column":39}},"23":{"start":{"line":63,"column":6},"end":{"line":63,"column":37}},"24":{"start":{"line":64,"column":6},"end":{"line":64,"column":42}},"25":{"start":{"line":65,"column":6},"end":{"line":67,"column":7}},"26":{"start":{"line":66,"column":8},"end":{"line":66,"column":166}}},"branchMap":{"1":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":70},"end":{"line":19,"column":73}},{"start":{"line":19,"column":76},"end":{"line":19,"column":94}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":46},"end":{"line":19,"column":49}},{"start":{"line":19,"column":53},"end":{"line":19,"column":67}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.unknownTypeMessage = unknownTypeMessage;","exports.KnownTypeNames = KnownTypeNames;","","var _error = require('../../error');","","var _suggestionList = require('../../jsutils/suggestionList');","","var _suggestionList2 = _interopRequireDefault(_suggestionList);","","var _quotedOrList = require('../../jsutils/quotedOrList');","","var _quotedOrList2 = _interopRequireDefault(_quotedOrList);","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function unknownTypeMessage(type, suggestedTypes) {","  var message = 'Unknown type \"' + String(type) + '\".';","  if (suggestedTypes.length) {","    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedTypes) + '?';","  }","  return message;","}","","/**"," * Known type names"," *"," * A GraphQL document is only valid if referenced types (specifically"," * variable definitions and fragment conditions) are defined by the type schema."," */","function KnownTypeNames(context) {","  return {","    // TODO: when validating IDL, re-enable these. Experimental version does not","    // add unreferenced types, resulting in false-positive errors. Squelched","    // errors for now.","    ObjectTypeDefinition: function ObjectTypeDefinition() {","      return false;","    },","    InterfaceTypeDefinition: function InterfaceTypeDefinition() {","      return false;","    },","    UnionTypeDefinition: function UnionTypeDefinition() {","      return false;","    },","    InputObjectTypeDefinition: function InputObjectTypeDefinition() {","      return false;","    },","    NamedType: function NamedType(node) {","      var schema = context.getSchema();","      var typeName = node.name.value;","      var type = schema.getType(typeName);","      if (!type) {","        context.reportError(new _error.GraphQLError(unknownTypeMessage(typeName, (0, _suggestionList2.default)(typeName, Object.keys(schema.getTypeMap()))), [node]));","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"15":1,"17":1,"19":2,"30":1,"31":0,"32":0,"33":0,"35":0,"44":1,"45":0,"50":0,"53":0,"56":0,"59":0,"62":0,"63":0,"64":0,"65":0,"66":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/suggestionList.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/suggestionList.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"suggestionList","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":40}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":45},"end":{"line":32,"column":61}}},"3":{"name":"lexicalDistance","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":35,"column":1}},"4":{"start":{"line":22,"column":2},"end":{"line":22,"column":46}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":31}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":40}},"7":{"start":{"line":25,"column":2},"end":{"line":31,"column":3}},"8":{"start":{"line":26,"column":4},"end":{"line":26,"column":54}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":71}},"10":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"11":{"start":{"line":29,"column":6},"end":{"line":29,"column":47}},"12":{"start":{"line":32,"column":2},"end":{"line":34,"column":5}},"13":{"start":{"line":33,"column":4},"end":{"line":33,"column":55}},"14":{"start":{"line":51,"column":0},"end":{"line":79,"column":1}},"15":{"start":{"line":52,"column":2},"end":{"line":52,"column":17}},"16":{"start":{"line":53,"column":2},"end":{"line":53,"column":17}},"17":{"start":{"line":54,"column":2},"end":{"line":54,"column":13}},"18":{"start":{"line":55,"column":2},"end":{"line":55,"column":25}},"19":{"start":{"line":56,"column":2},"end":{"line":56,"column":25}},"20":{"start":{"line":58,"column":2},"end":{"line":60,"column":3}},"21":{"start":{"line":59,"column":4},"end":{"line":59,"column":15}},"22":{"start":{"line":62,"column":2},"end":{"line":64,"column":3}},"23":{"start":{"line":63,"column":4},"end":{"line":63,"column":16}},"24":{"start":{"line":66,"column":2},"end":{"line":76,"column":3}},"25":{"start":{"line":67,"column":4},"end":{"line":75,"column":5}},"26":{"start":{"line":68,"column":6},"end":{"line":68,"column":47}},"27":{"start":{"line":70,"column":6},"end":{"line":70,"column":83}},"28":{"start":{"line":72,"column":6},"end":{"line":74,"column":7}},"29":{"start":{"line":73,"column":8},"end":{"line":73,"column":60}},"30":{"start":{"line":78,"column":2},"end":{"line":78,"column":29}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":68,"type":"cond-expr","locations":[{"start":{"line":68,"column":41},"end":{"line":68,"column":42}},{"start":{"line":68,"column":45},"end":{"line":68,"column":46}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"4":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":10},"end":{"line":72,"column":15}},{"start":{"line":72,"column":19},"end":{"line":72,"column":24}},{"start":{"line":72,"column":28},"end":{"line":72,"column":49}},{"start":{"line":72,"column":53},"end":{"line":72,"column":74}}]}},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = suggestionList;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Given an invalid input string and a list of valid options, returns a filtered"," * list of valid options sorted based on their similarity with the input."," */","function suggestionList(input, options) {","  var optionsByDistance = Object.create(null);","  var oLength = options.length;","  var inputThreshold = input.length / 2;","  for (var i = 0; i < oLength; i++) {","    var distance = lexicalDistance(input, options[i]);","    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);","    if (distance <= threshold) {","      optionsByDistance[options[i]] = distance;","    }","  }","  return Object.keys(optionsByDistance).sort(function (a, b) {","    return optionsByDistance[a] - optionsByDistance[b];","  });","}","","/**"," * Computes the lexical distance between strings A and B."," *"," * The \"distance\" between two strings is given by counting the minimum number"," * of edits needed to transform string A into string B. An edit can be an"," * insertion, deletion, or substitution of a single character, or a swap of two"," * adjacent characters."," *"," * This distance can be useful for detecting typos in input or sorting"," *"," * @param {string} a"," * @param {string} b"," * @return {int} distance in number of edits"," */","function lexicalDistance(a, b) {","  var i = void 0;","  var j = void 0;","  var d = [];","  var aLength = a.length;","  var bLength = b.length;","","  for (i = 0; i <= aLength; i++) {","    d[i] = [i];","  }","","  for (j = 1; j <= bLength; j++) {","    d[0][j] = j;","  }","","  for (i = 1; i <= aLength; i++) {","    for (j = 1; j <= bLength; j++) {","      var cost = a[i - 1] === b[j - 1] ? 0 : 1;","","      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);","","      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {","        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);","      }","    }","  }","","  return d[aLength][bLength];","}"],"l":{"3":1,"6":1,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"32":0,"33":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"58":0,"59":0,"62":0,"63":0,"66":0,"67":0,"68":0,"70":0,"72":0,"73":0,"78":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/quotedOrList.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/quotedOrList.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"quotedOrList","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":22},"end":{"line":24,"column":38}}},"3":{"name":"(anonymous_3)","line":26,"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"3":{"start":{"line":17,"column":0},"end":{"line":17,"column":19}},"4":{"start":{"line":22,"column":0},"end":{"line":29,"column":1}},"5":{"start":{"line":23,"column":2},"end":{"line":23,"column":44}},"6":{"start":{"line":24,"column":2},"end":{"line":28,"column":5}},"7":{"start":{"line":25,"column":4},"end":{"line":25,"column":28}},"8":{"start":{"line":27,"column":4},"end":{"line":27,"column":109}}},"branchMap":{"1":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":41},"end":{"line":27,"column":45}},{"start":{"line":27,"column":48},"end":{"line":27,"column":51}}]},"2":{"line":27,"type":"cond-expr","locations":[{"start":{"line":27,"column":88},"end":{"line":27,"column":93}},{"start":{"line":27,"column":96},"end":{"line":27,"column":98}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = quotedOrList;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var MAX_LENGTH = 5;","","/**"," * Given [ A, B, C ] return '\"A\", \"B\", or \"C\"'."," */","function quotedOrList(items) {","  var selected = items.slice(0, MAX_LENGTH);","  return selected.map(function (item) {","    return '\"' + item + '\"';","  }).reduce(function (list, quoted, index) {","    return list + (selected.length > 2 ? ', ' : ' ') + (index === selected.length - 1 ? 'or ' : '') + quoted;","  });","}"],"l":{"3":1,"6":1,"17":1,"22":1,"23":0,"24":0,"25":0,"27":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"inlineFragmentOnNonCompositeErrorMessage","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":56}}},"2":{"name":"fragmentOnNonCompositeErrorMessage","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":60}}},"3":{"name":"FragmentsOnCompositeTypes","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":44}}},"4":{"name":"InlineFragment","line":43,"loc":{"start":{"line":43,"column":20},"end":{"line":43,"column":50}}},"5":{"name":"FragmentDefinition","line":51,"loc":{"start":{"line":51,"column":24},"end":{"line":51,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":92}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":80}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":51}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":58}},"9":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"10":{"start":{"line":19,"column":2},"end":{"line":19,"column":83}},"11":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":109}},"13":{"start":{"line":41,"column":0},"end":{"line":58,"column":1}},"14":{"start":{"line":42,"column":2},"end":{"line":57,"column":4}},"15":{"start":{"line":44,"column":6},"end":{"line":49,"column":7}},"16":{"start":{"line":45,"column":8},"end":{"line":45,"column":90}},"17":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"18":{"start":{"line":47,"column":10},"end":{"line":47,"column":160}},"19":{"start":{"line":52,"column":6},"end":{"line":52,"column":88}},"20":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"21":{"start":{"line":54,"column":8},"end":{"line":54,"column":169}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":16}},{"start":{"line":46,"column":20},"end":{"line":46,"column":59}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":10},"end":{"line":53,"column":14}},{"start":{"line":53,"column":18},"end":{"line":53,"column":57}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;","exports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;","exports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;","","var _error = require('../../error');","","var _printer = require('../../language/printer');","","var _definition = require('../../type/definition');","","var _typeFromAST = require('../../utilities/typeFromAST');","","function inlineFragmentOnNonCompositeErrorMessage(type) {","  return 'Fragment cannot condition on non composite type \"' + String(type) + '\".';","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function fragmentOnNonCompositeErrorMessage(fragName, type) {","  return 'Fragment \"' + fragName + '\" cannot condition on non composite ' + ('type \"' + String(type) + '\".');","}","","/**"," * Fragments on composite type"," *"," * Fragments use a type condition to determine if they apply, since fragments"," * can only be spread into a composite type (object, interface, or union), the"," * type condition must also be a composite type."," */","function FragmentsOnCompositeTypes(context) {","  return {","    InlineFragment: function InlineFragment(node) {","      if (node.typeCondition) {","        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);","        if (type && !(0, _definition.isCompositeType)(type)) {","          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(node.typeCondition)), [node.typeCondition]));","        }","      }","    },","    FragmentDefinition: function FragmentDefinition(node) {","      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);","      if (type && !(0, _definition.isCompositeType)(type)) {","        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"19":0,"30":1,"31":0,"41":1,"42":0,"44":0,"45":0,"46":0,"47":0,"52":0,"53":0,"54":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/VariablesAreInputTypes.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/VariablesAreInputTypes.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"nonInputTypeOnVarMessage","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":58}}},"2":{"name":"VariablesAreInputTypes","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":41}}},"3":{"name":"VariableDefinition","line":39,"loc":{"start":{"line":39,"column":24},"end":{"line":39,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":51}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"8":{"start":{"line":17,"column":0},"end":{"line":19,"column":1}},"9":{"start":{"line":18,"column":2},"end":{"line":18,"column":89}},"10":{"start":{"line":37,"column":0},"end":{"line":49,"column":1}},"11":{"start":{"line":38,"column":2},"end":{"line":48,"column":4}},"12":{"start":{"line":40,"column":6},"end":{"line":40,"column":79}},"13":{"start":{"line":43,"column":6},"end":{"line":46,"column":7}},"14":{"start":{"line":44,"column":8},"end":{"line":44,"column":52}},"15":{"start":{"line":45,"column":8},"end":{"line":45,"column":138}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":10},"end":{"line":43,"column":14}},{"start":{"line":43,"column":18},"end":{"line":43,"column":53}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;","exports.VariablesAreInputTypes = VariablesAreInputTypes;","","var _error = require('../../error');","","var _printer = require('../../language/printer');","","var _definition = require('../../type/definition');","","var _typeFromAST = require('../../utilities/typeFromAST');","","function nonInputTypeOnVarMessage(variableName, typeName) {","  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';","}","","/**"," * Variables are input types"," *"," * A GraphQL operation is only valid if all the variables it defines are of"," * input types (scalar, enum, or input object)."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function VariablesAreInputTypes(context) {","  return {","    VariableDefinition: function VariableDefinition(node) {","      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);","","      // If the variable type is not an input type, return an error.","      if (type && !(0, _definition.isInputType)(type)) {","        var variableName = node.variable.name.value;","        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"15":1,"17":1,"18":0,"37":1,"38":0,"40":0,"43":0,"44":0,"45":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/ScalarLeafs.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/ScalarLeafs.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"noSubselectionAllowedMessage","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":55}}},"2":{"name":"requiredSubselectionMessage","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":54}}},"3":{"name":"ScalarLeafs","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":30}}},"4":{"name":"Field","line":38,"loc":{"start":{"line":38,"column":11},"end":{"line":38,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":68}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":51}},"7":{"start":{"line":14,"column":0},"end":{"line":16,"column":1}},"8":{"start":{"line":15,"column":2},"end":{"line":15,"column":122}},"9":{"start":{"line":26,"column":0},"end":{"line":28,"column":1}},"10":{"start":{"line":27,"column":2},"end":{"line":27,"column":153}},"11":{"start":{"line":36,"column":0},"end":{"line":51,"column":1}},"12":{"start":{"line":37,"column":2},"end":{"line":50,"column":4}},"13":{"start":{"line":39,"column":6},"end":{"line":39,"column":35}},"14":{"start":{"line":40,"column":6},"end":{"line":48,"column":7}},"15":{"start":{"line":41,"column":8},"end":{"line":47,"column":9}},"16":{"start":{"line":42,"column":10},"end":{"line":44,"column":11}},"17":{"start":{"line":43,"column":12},"end":{"line":43,"column":131}},"18":{"start":{"line":45,"column":15},"end":{"line":47,"column":9}},"19":{"start":{"line":46,"column":10},"end":{"line":46,"column":115}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":10}},{"start":{"line":42,"column":10},"end":{"line":42,"column":10}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":15},"end":{"line":45,"column":15}},{"start":{"line":45,"column":15},"end":{"line":45,"column":15}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.noSubselectionAllowedMessage = noSubselectionAllowedMessage;","exports.requiredSubselectionMessage = requiredSubselectionMessage;","exports.ScalarLeafs = ScalarLeafs;","","var _error = require('../../error');","","var _definition = require('../../type/definition');","","function noSubselectionAllowedMessage(fieldName, type) {","  return 'Field \"' + fieldName + '\" must not have a selection since ' + ('type \"' + String(type) + '\" has no subfields.');","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function requiredSubselectionMessage(fieldName, type) {","  return 'Field \"' + fieldName + '\" of type \"' + String(type) + '\" must have a ' + ('selection of subfields. Did you mean \"' + fieldName + ' { ... }\"?');","}","","/**"," * Scalar leafs"," *"," * A GraphQL document is valid only if all leaf fields (fields without"," * sub selections) are of scalar or enum types."," */","function ScalarLeafs(context) {","  return {","    Field: function Field(node) {","      var type = context.getType();","      if (type) {","        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {","          if (node.selectionSet) {","            context.reportError(new _error.GraphQLError(noSubselectionAllowedMessage(node.name.value, type), [node.selectionSet]));","          }","        } else if (!node.selectionSet) {","          context.reportError(new _error.GraphQLError(requiredSubselectionMessage(node.name.value, type), [node]));","        }","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"15":0,"26":1,"27":0,"36":1,"37":0,"39":0,"40":0,"41":0,"42":0,"43":0,"45":0,"46":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/FieldsOnCorrectType.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/FieldsOnCorrectType.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":2,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0},"b":{"1":[2,0],"2":[2,2],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":21,"column":37}}},"2":{"name":"undefinedFieldMessage","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":89}}},"3":{"name":"FieldsOnCorrectType","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":38}}},"4":{"name":"Field","line":52,"loc":{"start":{"line":52,"column":11},"end":{"line":52,"column":32}}},"5":{"name":"getSuggestedTypeNames","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":56}}},"6":{"name":"(anonymous_6)","line":83,"loc":{"start":{"line":83,"column":42},"end":{"line":83,"column":66}}},"7":{"name":"(anonymous_7)","line":89,"loc":{"start":{"line":89,"column":43},"end":{"line":89,"column":72}}},"8":{"name":"(anonymous_8)","line":99,"loc":{"start":{"line":99,"column":72},"end":{"line":99,"column":88}}},"9":{"name":"getSuggestedFieldNames","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":54}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":50}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":63}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":59}},"9":{"start":{"line":19,"column":0},"end":{"line":19,"column":51}},"10":{"start":{"line":21,"column":0},"end":{"line":21,"column":97}},"11":{"start":{"line":21,"column":39},"end":{"line":21,"column":95}},"12":{"start":{"line":23,"column":0},"end":{"line":32,"column":1}},"13":{"start":{"line":24,"column":2},"end":{"line":24,"column":81}},"14":{"start":{"line":25,"column":2},"end":{"line":30,"column":3}},"15":{"start":{"line":26,"column":4},"end":{"line":26,"column":70}},"16":{"start":{"line":27,"column":4},"end":{"line":27,"column":81}},"17":{"start":{"line":28,"column":9},"end":{"line":30,"column":3}},"18":{"start":{"line":29,"column":4},"end":{"line":29,"column":89}},"19":{"start":{"line":31,"column":2},"end":{"line":31,"column":17}},"20":{"start":{"line":50,"column":0},"end":{"line":71,"column":1}},"21":{"start":{"line":51,"column":2},"end":{"line":70,"column":4}},"22":{"start":{"line":53,"column":6},"end":{"line":53,"column":41}},"23":{"start":{"line":54,"column":6},"end":{"line":68,"column":7}},"24":{"start":{"line":55,"column":8},"end":{"line":55,"column":45}},"25":{"start":{"line":56,"column":8},"end":{"line":67,"column":9}},"26":{"start":{"line":58,"column":10},"end":{"line":58,"column":43}},"27":{"start":{"line":59,"column":10},"end":{"line":59,"column":42}},"28":{"start":{"line":61,"column":10},"end":{"line":61,"column":82}},"29":{"start":{"line":63,"column":10},"end":{"line":63,"column":123}},"30":{"start":{"line":66,"column":10},"end":{"line":66,"column":149}},"31":{"start":{"line":79,"column":0},"end":{"line":109,"column":1}},"32":{"start":{"line":80,"column":2},"end":{"line":105,"column":3}},"33":{"start":{"line":81,"column":4},"end":{"line":81,"column":34}},"34":{"start":{"line":82,"column":4},"end":{"line":82,"column":50}},"35":{"start":{"line":83,"column":4},"end":{"line":96,"column":7}},"36":{"start":{"line":84,"column":6},"end":{"line":86,"column":7}},"37":{"start":{"line":85,"column":8},"end":{"line":85,"column":15}},"38":{"start":{"line":88,"column":6},"end":{"line":88,"column":51}},"39":{"start":{"line":89,"column":6},"end":{"line":95,"column":9}},"40":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"41":{"start":{"line":91,"column":10},"end":{"line":91,"column":17}},"42":{"start":{"line":94,"column":8},"end":{"line":94,"column":109}},"43":{"start":{"line":99,"column":4},"end":{"line":101,"column":7}},"44":{"start":{"line":100,"column":6},"end":{"line":100,"column":61}},"45":{"start":{"line":104,"column":4},"end":{"line":104,"column":64}},"46":{"start":{"line":108,"column":2},"end":{"line":108,"column":12}},"47":{"start":{"line":115,"column":0},"end":{"line":122,"column":1}},"48":{"start":{"line":116,"column":2},"end":{"line":119,"column":3}},"49":{"start":{"line":117,"column":4},"end":{"line":117,"column":59}},"50":{"start":{"line":118,"column":4},"end":{"line":118,"column":72}},"51":{"start":{"line":121,"column":2},"end":{"line":121,"column":12}}},"branchMap":{"1":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":70},"end":{"line":21,"column":73}},{"start":{"line":21,"column":76},"end":{"line":21,"column":94}}]},"2":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":46},"end":{"line":21,"column":49}},{"start":{"line":21,"column":53},"end":{"line":21,"column":67}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"4":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":9},"end":{"line":28,"column":9}},{"start":{"line":28,"column":9},"end":{"line":28,"column":9}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"7":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":70},"end":{"line":63,"column":72}},{"start":{"line":63,"column":75},"end":{"line":63,"column":122}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"9":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":54}},{"start":{"line":80,"column":58},"end":{"line":80,"column":102}}]},"10":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]},"11":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":90,"column":8}},{"start":{"line":90,"column":8},"end":{"line":90,"column":8}}]},"12":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":55},"end":{"line":94,"column":98}},{"start":{"line":94,"column":102},"end":{"line":94,"column":103}}]},"13":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":2},"end":{"line":116,"column":2}},{"start":{"line":116,"column":2},"end":{"line":116,"column":2}}]},"14":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":51}},{"start":{"line":116,"column":55},"end":{"line":116,"column":103}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.undefinedFieldMessage = undefinedFieldMessage;","exports.FieldsOnCorrectType = FieldsOnCorrectType;","","var _error = require('../../error');","","var _suggestionList = require('../../jsutils/suggestionList');","","var _suggestionList2 = _interopRequireDefault(_suggestionList);","","var _quotedOrList = require('../../jsutils/quotedOrList');","","var _quotedOrList2 = _interopRequireDefault(_quotedOrList);","","var _definition = require('../../type/definition');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {","  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';","  if (suggestedTypeNames.length !== 0) {","    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);","    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';","  } else if (suggestedFieldNames.length !== 0) {","    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';","  }","  return message;","}","","/**"," * Fields on correct type"," *"," * A GraphQL document is only valid if all fields selected are defined by the"," * parent type, or are an allowed meta field such as __typename."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function FieldsOnCorrectType(context) {","  return {","    Field: function Field(node) {","      var type = context.getParentType();","      if (type) {","        var fieldDef = context.getFieldDef();","        if (!fieldDef) {","          // This field doesn't exist, lets look for suggestions.","          var schema = context.getSchema();","          var fieldName = node.name.value;","          // First determine if there are any suggested types to condition on.","          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);","          // If there are no suggested types, then perhaps this was a typo?","          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);","","          // Report an error, including helpful suggestions.","          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));","        }","      }","    }","  };","}","","/**"," * Go through all of the implementations of type, as well as the interfaces"," * that they implement. If any of those types include the provided field,"," * suggest them, sorted by how often the type is referenced,  starting"," * with Interfaces."," */","function getSuggestedTypeNames(schema, type, fieldName) {","  if (type instanceof _definition.GraphQLInterfaceType || type instanceof _definition.GraphQLUnionType) {","    var suggestedObjectTypes = [];","    var interfaceUsageCount = Object.create(null);","    schema.getPossibleTypes(type).forEach(function (possibleType) {","      if (!possibleType.getFields()[fieldName]) {","        return;","      }","      // This object type defines this field.","      suggestedObjectTypes.push(possibleType.name);","      possibleType.getInterfaces().forEach(function (possibleInterface) {","        if (!possibleInterface.getFields()[fieldName]) {","          return;","        }","        // This interface type defines this field.","        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;","      });","    });","","    // Suggest interface types based on how common they are.","    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {","      return interfaceUsageCount[b] - interfaceUsageCount[a];","    });","","    // Suggest both interface and object types.","    return suggestedInterfaceTypes.concat(suggestedObjectTypes);","  }","","  // Otherwise, must be an Object type, which does not have possible fields.","  return [];","}","","/**"," * For the field name provided, determine if there are any similar field names"," * that may be the result of a typo."," */","function getSuggestedFieldNames(schema, type, fieldName) {","  if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {","    var possibleFieldNames = Object.keys(type.getFields());","    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);","  }","  // Otherwise, must be a Union type, which does not define fields.","  return [];","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"15":1,"17":1,"19":1,"21":2,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"31":0,"50":1,"51":0,"53":0,"54":0,"55":0,"56":0,"58":0,"59":0,"61":0,"63":0,"66":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"88":0,"89":0,"90":0,"91":0,"94":0,"99":0,"100":0,"104":0,"108":0,"115":1,"116":0,"117":0,"118":0,"121":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueFragmentNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueFragmentNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"duplicateFragmentNameMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":48}}},"2":{"name":"UniqueFragmentNames","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":38}}},"3":{"name":"OperationDefinition","line":32,"loc":{"start":{"line":32,"column":25},"end":{"line":32,"column":56}}},"4":{"name":"FragmentDefinition","line":35,"loc":{"start":{"line":35,"column":24},"end":{"line":35,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":68}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":50}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":68}},"7":{"start":{"line":29,"column":0},"end":{"line":45,"column":1}},"8":{"start":{"line":30,"column":2},"end":{"line":30,"column":47}},"9":{"start":{"line":31,"column":2},"end":{"line":44,"column":4}},"10":{"start":{"line":33,"column":6},"end":{"line":33,"column":19}},"11":{"start":{"line":36,"column":6},"end":{"line":36,"column":41}},"12":{"start":{"line":37,"column":6},"end":{"line":41,"column":7}},"13":{"start":{"line":38,"column":8},"end":{"line":38,"column":144}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":53}},"15":{"start":{"line":42,"column":6},"end":{"line":42,"column":19}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.duplicateFragmentNameMessage = duplicateFragmentNameMessage;","exports.UniqueFragmentNames = UniqueFragmentNames;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function duplicateFragmentNameMessage(fragName) {","  return 'There can be only one fragment named \"' + fragName + '\".';","}","","/**"," * Unique fragment names"," *"," * A GraphQL document is only valid if all defined fragments have unique names."," */","function UniqueFragmentNames(context) {","  var knownFragmentNames = Object.create(null);","  return {","    OperationDefinition: function OperationDefinition() {","      return false;","    },","    FragmentDefinition: function FragmentDefinition(node) {","      var fragmentName = node.name.value;","      if (knownFragmentNames[fragmentName]) {","        context.reportError(new _error.GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));","      } else {","        knownFragmentNames[fragmentName] = node.name;","      }","      return false;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"29":1,"30":0,"31":0,"33":0,"36":0,"37":0,"38":0,"40":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownFragmentNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownFragmentNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"unknownFragmentMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":42}}},"2":{"name":"KnownFragmentNames","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":37}}},"3":{"name":"FragmentSpread","line":32,"loc":{"start":{"line":32,"column":20},"end":{"line":32,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":48}},"7":{"start":{"line":30,"column":0},"end":{"line":40,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":39,"column":4}},"9":{"start":{"line":33,"column":6},"end":{"line":33,"column":41}},"10":{"start":{"line":34,"column":6},"end":{"line":34,"column":55}},"11":{"start":{"line":35,"column":6},"end":{"line":37,"column":7}},"12":{"start":{"line":36,"column":8},"end":{"line":36,"column":104}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":6},"end":{"line":35,"column":6}},{"start":{"line":35,"column":6},"end":{"line":35,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.unknownFragmentMessage = unknownFragmentMessage;","exports.KnownFragmentNames = KnownFragmentNames;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function unknownFragmentMessage(fragName) {","  return 'Unknown fragment \"' + fragName + '\".';","}","","/**"," * Known fragment names"," *"," * A GraphQL document is only valid if all `...Fragment` fragment spreads refer"," * to fragments defined in the same document."," */","function KnownFragmentNames(context) {","  return {","    FragmentSpread: function FragmentSpread(node) {","      var fragmentName = node.name.value;","      var fragment = context.getFragment(fragmentName);","      if (!fragment) {","        context.reportError(new _error.GraphQLError(unknownFragmentMessage(fragmentName), [node.name]));","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"33":0,"34":0,"35":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoUnusedFragments.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoUnusedFragments.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"unusedFragMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":37}}},"2":{"name":"NoUnusedFragments","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}}},"3":{"name":"OperationDefinition","line":35,"loc":{"start":{"line":35,"column":25},"end":{"line":35,"column":60}}},"4":{"name":"FragmentDefinition","line":39,"loc":{"start":{"line":39,"column":24},"end":{"line":39,"column":58}}},"5":{"name":"leave","line":45,"loc":{"start":{"line":45,"column":13},"end":{"line":45,"column":30}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":30},"end":{"line":47,"column":51}}},"7":{"name":"(anonymous_7)","line":48,"loc":{"start":{"line":48,"column":71},"end":{"line":48,"column":91}}},"8":{"name":"(anonymous_8)","line":53,"loc":{"start":{"line":53,"column":29},"end":{"line":53,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":54}},"7":{"start":{"line":30,"column":0},"end":{"line":62,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":25}},"9":{"start":{"line":32,"column":2},"end":{"line":32,"column":24}},"10":{"start":{"line":34,"column":2},"end":{"line":61,"column":4}},"11":{"start":{"line":36,"column":6},"end":{"line":36,"column":31}},"12":{"start":{"line":37,"column":6},"end":{"line":37,"column":19}},"13":{"start":{"line":40,"column":6},"end":{"line":40,"column":30}},"14":{"start":{"line":41,"column":6},"end":{"line":41,"column":19}},"15":{"start":{"line":46,"column":8},"end":{"line":46,"column":51}},"16":{"start":{"line":47,"column":8},"end":{"line":51,"column":11}},"17":{"start":{"line":48,"column":10},"end":{"line":50,"column":13}},"18":{"start":{"line":49,"column":12},"end":{"line":49,"column":57}},"19":{"start":{"line":53,"column":8},"end":{"line":58,"column":11}},"20":{"start":{"line":54,"column":10},"end":{"line":54,"column":48}},"21":{"start":{"line":55,"column":10},"end":{"line":57,"column":11}},"22":{"start":{"line":56,"column":12},"end":{"line":56,"column":101}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":10},"end":{"line":55,"column":10}},{"start":{"line":55,"column":10},"end":{"line":55,"column":10}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.unusedFragMessage = unusedFragMessage;","exports.NoUnusedFragments = NoUnusedFragments;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function unusedFragMessage(fragName) {","  return 'Fragment \"' + fragName + '\" is never used.';","}","","/**"," * No unused fragments"," *"," * A GraphQL document is only valid if all fragment definitions are spread"," * within operations, or spread within other fragments spread within operations."," */","function NoUnusedFragments(context) {","  var operationDefs = [];","  var fragmentDefs = [];","","  return {","    OperationDefinition: function OperationDefinition(node) {","      operationDefs.push(node);","      return false;","    },","    FragmentDefinition: function FragmentDefinition(node) {","      fragmentDefs.push(node);","      return false;","    },","","    Document: {","      leave: function leave() {","        var fragmentNameUsed = Object.create(null);","        operationDefs.forEach(function (operation) {","          context.getRecursivelyReferencedFragments(operation).forEach(function (fragment) {","            fragmentNameUsed[fragment.name.value] = true;","          });","        });","","        fragmentDefs.forEach(function (fragmentDef) {","          var fragName = fragmentDef.name.value;","          if (fragmentNameUsed[fragName] !== true) {","            context.reportError(new _error.GraphQLError(unusedFragMessage(fragName), [fragmentDef]));","          }","        });","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"32":0,"34":0,"36":0,"37":0,"40":0,"41":0,"46":0,"47":0,"48":0,"49":0,"53":0,"54":0,"55":0,"56":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/PossibleFragmentSpreads.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/PossibleFragmentSpreads.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"typeIncompatibleSpreadMessage","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":71}}},"2":{"name":"typeIncompatibleAnonSpreadMessage","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":65}}},"3":{"name":"PossibleFragmentSpreads","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":42}}},"4":{"name":"InlineFragment","line":42,"loc":{"start":{"line":42,"column":20},"end":{"line":42,"column":50}}},"5":{"name":"FragmentSpread","line":49,"loc":{"start":{"line":49,"column":20},"end":{"line":49,"column":50}}},"6":{"name":"getFragmentType","line":60,"loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":70}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":78}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":58}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":66}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":58}},"8":{"start":{"line":25,"column":0},"end":{"line":27,"column":1}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":165}},"10":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":146}},"12":{"start":{"line":40,"column":0},"end":{"line":58,"column":1}},"13":{"start":{"line":41,"column":2},"end":{"line":57,"column":4}},"14":{"start":{"line":43,"column":6},"end":{"line":43,"column":39}},"15":{"start":{"line":44,"column":6},"end":{"line":44,"column":47}},"16":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"17":{"start":{"line":46,"column":8},"end":{"line":46,"column":118}},"18":{"start":{"line":50,"column":6},"end":{"line":50,"column":37}},"19":{"start":{"line":51,"column":6},"end":{"line":51,"column":56}},"20":{"start":{"line":52,"column":6},"end":{"line":52,"column":47}},"21":{"start":{"line":53,"column":6},"end":{"line":55,"column":7}},"22":{"start":{"line":54,"column":8},"end":{"line":54,"column":124}},"23":{"start":{"line":60,"column":0},"end":{"line":63,"column":1}},"24":{"start":{"line":61,"column":2},"end":{"line":61,"column":39}},"25":{"start":{"line":62,"column":2},"end":{"line":62,"column":88}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":18}},{"start":{"line":45,"column":22},"end":{"line":45,"column":32}},{"start":{"line":45,"column":36},"end":{"line":45,"column":116}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"4":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":10},"end":{"line":53,"column":18}},{"start":{"line":53,"column":22},"end":{"line":53,"column":32}},{"start":{"line":53,"column":36},"end":{"line":53,"column":116}}]},"5":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":9},"end":{"line":62,"column":13}},{"start":{"line":62,"column":17},"end":{"line":62,"column":87}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;","exports.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;","exports.PossibleFragmentSpreads = PossibleFragmentSpreads;","","var _error = require('../../error');","","var _typeComparators = require('../../utilities/typeComparators');","","var _typeFromAST = require('../../utilities/typeFromAST');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {","  return 'Fragment \"' + fragName + '\" cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');","}","","function typeIncompatibleAnonSpreadMessage(parentType, fragType) {","  return 'Fragment cannot be spread here as objects of ' + ('type \"' + String(parentType) + '\" can never be of type \"' + String(fragType) + '\".');","}","","/**"," * Possible fragment spread"," *"," * A fragment spread is only valid if the type condition could ever possibly"," * be true: if there is a non-empty intersection of the possible parent types,"," * and possible types which pass the type condition."," */","function PossibleFragmentSpreads(context) {","  return {","    InlineFragment: function InlineFragment(node) {","      var fragType = context.getType();","      var parentType = context.getParentType();","      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {","        context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));","      }","    },","    FragmentSpread: function FragmentSpread(node) {","      var fragName = node.name.value;","      var fragType = getFragmentType(context, fragName);","      var parentType = context.getParentType();","      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {","        context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));","      }","    }","  };","}","","function getFragmentType(context, name) {","  var frag = context.getFragment(name);","  return frag && (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"25":1,"26":0,"29":1,"30":0,"40":1,"41":0,"43":0,"44":0,"45":0,"46":0,"50":0,"51":0,"52":0,"53":0,"54":0,"60":1,"61":0,"62":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoFragmentCycles.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoFragmentCycles.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"cycleErrorMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":50}}},"2":{"name":"NoFragmentCycles","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":35}}},"3":{"name":"OperationDefinition","line":37,"loc":{"start":{"line":37,"column":25},"end":{"line":37,"column":56}}},"4":{"name":"FragmentDefinition","line":40,"loc":{"start":{"line":40,"column":24},"end":{"line":40,"column":58}}},"5":{"name":"detectCycleRecursive","line":51,"loc":{"start":{"line":51,"column":2},"end":{"line":51,"column":42}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":96},"end":{"line":78,"column":109}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":23,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":71}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":79}},"8":{"start":{"line":25,"column":0},"end":{"line":86,"column":1}},"9":{"start":{"line":28,"column":2},"end":{"line":28,"column":41}},"10":{"start":{"line":31,"column":2},"end":{"line":31,"column":22}},"11":{"start":{"line":34,"column":2},"end":{"line":34,"column":50}},"12":{"start":{"line":36,"column":2},"end":{"line":46,"column":4}},"13":{"start":{"line":38,"column":6},"end":{"line":38,"column":19}},"14":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"15":{"start":{"line":42,"column":8},"end":{"line":42,"column":35}},"16":{"start":{"line":44,"column":6},"end":{"line":44,"column":19}},"17":{"start":{"line":51,"column":2},"end":{"line":85,"column":3}},"18":{"start":{"line":52,"column":4},"end":{"line":52,"column":43}},"19":{"start":{"line":53,"column":4},"end":{"line":53,"column":38}},"20":{"start":{"line":55,"column":4},"end":{"line":55,"column":72}},"21":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"22":{"start":{"line":57,"column":6},"end":{"line":57,"column":13}},"23":{"start":{"line":60,"column":4},"end":{"line":60,"column":60}},"24":{"start":{"line":62,"column":4},"end":{"line":82,"column":5}},"25":{"start":{"line":63,"column":6},"end":{"line":63,"column":38}},"26":{"start":{"line":64,"column":6},"end":{"line":64,"column":45}},"27":{"start":{"line":65,"column":6},"end":{"line":65,"column":57}},"28":{"start":{"line":67,"column":6},"end":{"line":81,"column":7}},"29":{"start":{"line":68,"column":8},"end":{"line":68,"column":36}},"30":{"start":{"line":69,"column":8},"end":{"line":74,"column":9}},"31":{"start":{"line":70,"column":10},"end":{"line":70,"column":63}},"32":{"start":{"line":71,"column":10},"end":{"line":73,"column":11}},"33":{"start":{"line":72,"column":12},"end":{"line":72,"column":49}},"34":{"start":{"line":75,"column":8},"end":{"line":75,"column":25}},"35":{"start":{"line":77,"column":8},"end":{"line":77,"column":53}},"36":{"start":{"line":78,"column":8},"end":{"line":80,"column":44}},"37":{"start":{"line":79,"column":10},"end":{"line":79,"column":30}},"38":{"start":{"line":84,"column":4},"end":{"line":84,"column":52}}},"branchMap":{"1":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":33},"end":{"line":21,"column":65}},{"start":{"line":21,"column":68},"end":{"line":21,"column":70}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":67,"column":6}},{"start":{"line":67,"column":6},"end":{"line":67,"column":6}}]},"5":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":8}},{"start":{"line":69,"column":8},"end":{"line":69,"column":8}}]},"6":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":10},"end":{"line":71,"column":10}},{"start":{"line":71,"column":10},"end":{"line":71,"column":10}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.cycleErrorMessage = cycleErrorMessage;","exports.NoFragmentCycles = NoFragmentCycles;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function cycleErrorMessage(fragName, spreadNames) {","  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';","  return 'Cannot spread fragment \"' + fragName + '\" within itself' + via + '.';","}","","function NoFragmentCycles(context) {","  // Tracks already visited fragments to maintain O(N) and to ensure that cycles","  // are not redundantly reported.","  var visitedFrags = Object.create(null);","","  // Array of AST nodes used to produce meaningful errors","  var spreadPath = [];","","  // Position in the spread path","  var spreadPathIndexByName = Object.create(null);","","  return {","    OperationDefinition: function OperationDefinition() {","      return false;","    },","    FragmentDefinition: function FragmentDefinition(node) {","      if (!visitedFrags[node.name.value]) {","        detectCycleRecursive(node);","      }","      return false;","    }","  };","","  // This does a straight-forward DFS to find cycles.","  // It does not terminate when a cycle was found but continues to explore","  // the graph to find all possible cycles.","  function detectCycleRecursive(fragment) {","    var fragmentName = fragment.name.value;","    visitedFrags[fragmentName] = true;","","    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);","    if (spreadNodes.length === 0) {","      return;","    }","","    spreadPathIndexByName[fragmentName] = spreadPath.length;","","    for (var i = 0; i < spreadNodes.length; i++) {","      var spreadNode = spreadNodes[i];","      var spreadName = spreadNode.name.value;","      var cycleIndex = spreadPathIndexByName[spreadName];","","      if (cycleIndex === undefined) {","        spreadPath.push(spreadNode);","        if (!visitedFrags[spreadName]) {","          var spreadFragment = context.getFragment(spreadName);","          if (spreadFragment) {","            detectCycleRecursive(spreadFragment);","          }","        }","        spreadPath.pop();","      } else {","        var cyclePath = spreadPath.slice(cycleIndex);","        context.reportError(new _error.GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {","          return s.name.value;","        })), cyclePath.concat(spreadNode)));","      }","    }","","    spreadPathIndexByName[fragmentName] = undefined;","  }","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"22":0,"25":1,"28":0,"31":0,"34":0,"36":0,"38":0,"41":0,"42":0,"44":0,"51":1,"52":0,"53":0,"55":0,"56":0,"57":0,"60":0,"62":0,"63":0,"64":0,"65":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"75":0,"77":0,"78":0,"79":0,"84":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueVariableNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueVariableNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"duplicateVariableMessage","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":48}}},"2":{"name":"UniqueVariableNames","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":38}}},"3":{"name":"OperationDefinition","line":33,"loc":{"start":{"line":33,"column":25},"end":{"line":33,"column":56}}},"4":{"name":"VariableDefinition","line":36,"loc":{"start":{"line":36,"column":24},"end":{"line":36,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":60}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":50}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":13,"column":1}},"6":{"start":{"line":12,"column":2},"end":{"line":12,"column":72}},"7":{"start":{"line":30,"column":0},"end":{"line":45,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":47}},"9":{"start":{"line":32,"column":2},"end":{"line":44,"column":4}},"10":{"start":{"line":34,"column":6},"end":{"line":34,"column":47}},"11":{"start":{"line":37,"column":6},"end":{"line":37,"column":50}},"12":{"start":{"line":38,"column":6},"end":{"line":42,"column":7}},"13":{"start":{"line":39,"column":8},"end":{"line":39,"column":149}},"14":{"start":{"line":41,"column":8},"end":{"line":41,"column":62}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.duplicateVariableMessage = duplicateVariableMessage;","exports.UniqueVariableNames = UniqueVariableNames;","","var _error = require('../../error');","","function duplicateVariableMessage(variableName) {","  return 'There can be only one variable named \"' + variableName + '\".';","}","","/**"," * Unique variable names"," *"," * A GraphQL operation is only valid if all its variables are uniquely named."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function UniqueVariableNames(context) {","  var knownVariableNames = Object.create(null);","  return {","    OperationDefinition: function OperationDefinition() {","      knownVariableNames = Object.create(null);","    },","    VariableDefinition: function VariableDefinition(node) {","      var variableName = node.variable.name.value;","      if (knownVariableNames[variableName]) {","        context.reportError(new _error.GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));","      } else {","        knownVariableNames[variableName] = node.variable.name;","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"12":0,"30":1,"31":0,"32":0,"34":0,"37":0,"38":0,"39":0,"41":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoUndefinedVariables.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoUndefinedVariables.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"undefinedVarMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":46}}},"2":{"name":"NoUndefinedVariables","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":39}}},"3":{"name":"enter","line":35,"loc":{"start":{"line":35,"column":13},"end":{"line":35,"column":30}}},"4":{"name":"leave","line":38,"loc":{"start":{"line":38,"column":13},"end":{"line":38,"column":39}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":23},"end":{"line":41,"column":39}}},"6":{"name":"VariableDefinition","line":51,"loc":{"start":{"line":51,"column":24},"end":{"line":51,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":50}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":142}},"7":{"start":{"line":30,"column":0},"end":{"line":55,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":48}},"9":{"start":{"line":33,"column":2},"end":{"line":54,"column":4}},"10":{"start":{"line":36,"column":8},"end":{"line":36,"column":50}},"11":{"start":{"line":39,"column":8},"end":{"line":39,"column":67}},"12":{"start":{"line":41,"column":8},"end":{"line":48,"column":11}},"13":{"start":{"line":42,"column":10},"end":{"line":42,"column":31}},"14":{"start":{"line":44,"column":10},"end":{"line":44,"column":40}},"15":{"start":{"line":45,"column":10},"end":{"line":47,"column":11}},"16":{"start":{"line":46,"column":12},"end":{"line":46,"column":146}},"17":{"start":{"line":52,"column":6},"end":{"line":52,"column":59}}},"branchMap":{"1":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":18},"end":{"line":21,"column":93}},{"start":{"line":21,"column":96},"end":{"line":21,"column":141}}]},"2":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":10},"end":{"line":45,"column":10}},{"start":{"line":45,"column":10},"end":{"line":45,"column":10}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":85},"end":{"line":46,"column":99}},{"start":{"line":46,"column":103},"end":{"line":46,"column":123}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.undefinedVarMessage = undefinedVarMessage;","exports.NoUndefinedVariables = NoUndefinedVariables;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function undefinedVarMessage(varName, opName) {","  return opName ? 'Variable \"$' + varName + '\" is not defined by operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is not defined.';","}","","/**"," * No undefined variables"," *"," * A GraphQL operation is only valid if all variables encountered, both directly"," * and via fragment spreads, are defined by that operation."," */","function NoUndefinedVariables(context) {","  var variableNameDefined = Object.create(null);","","  return {","    OperationDefinition: {","      enter: function enter() {","        variableNameDefined = Object.create(null);","      },","      leave: function leave(operation) {","        var usages = context.getRecursiveVariableUsages(operation);","","        usages.forEach(function (_ref) {","          var node = _ref.node;","","          var varName = node.name.value;","          if (variableNameDefined[varName] !== true) {","            context.reportError(new _error.GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));","          }","        });","      }","    },","    VariableDefinition: function VariableDefinition(node) {","      variableNameDefined[node.variable.name.value] = true;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"33":0,"36":0,"39":0,"41":0,"42":0,"44":0,"45":0,"46":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoUnusedVariables.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/NoUnusedVariables.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"unusedVariableMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":48}}},"2":{"name":"NoUnusedVariables","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}}},"3":{"name":"enter","line":35,"loc":{"start":{"line":35,"column":13},"end":{"line":35,"column":30}}},"4":{"name":"leave","line":38,"loc":{"start":{"line":38,"column":13},"end":{"line":38,"column":39}}},"5":{"name":"(anonymous_5)","line":43,"loc":{"start":{"line":43,"column":23},"end":{"line":43,"column":39}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":29},"end":{"line":49,"column":52}}},"7":{"name":"VariableDefinition","line":57,"loc":{"start":{"line":57,"column":24},"end":{"line":57,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":54}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":140}},"7":{"start":{"line":30,"column":0},"end":{"line":61,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":24}},"9":{"start":{"line":33,"column":2},"end":{"line":60,"column":4}},"10":{"start":{"line":36,"column":8},"end":{"line":36,"column":26}},"11":{"start":{"line":39,"column":8},"end":{"line":39,"column":51}},"12":{"start":{"line":40,"column":8},"end":{"line":40,"column":67}},"13":{"start":{"line":41,"column":8},"end":{"line":41,"column":66}},"14":{"start":{"line":43,"column":8},"end":{"line":47,"column":11}},"15":{"start":{"line":44,"column":10},"end":{"line":44,"column":31}},"16":{"start":{"line":46,"column":10},"end":{"line":46,"column":51}},"17":{"start":{"line":49,"column":8},"end":{"line":54,"column":11}},"18":{"start":{"line":50,"column":10},"end":{"line":50,"column":61}},"19":{"start":{"line":51,"column":10},"end":{"line":53,"column":11}},"20":{"start":{"line":52,"column":12},"end":{"line":52,"column":117}},"21":{"start":{"line":58,"column":6},"end":{"line":58,"column":29}}},"branchMap":{"1":{"line":21,"type":"cond-expr","locations":[{"start":{"line":21,"column":18},"end":{"line":21,"column":92}},{"start":{"line":21,"column":95},"end":{"line":21,"column":139}}]},"2":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":38},"end":{"line":41,"column":58}},{"start":{"line":41,"column":61},"end":{"line":41,"column":65}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":10},"end":{"line":51,"column":10}},{"start":{"line":51,"column":10},"end":{"line":51,"column":10}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.unusedVariableMessage = unusedVariableMessage;","exports.NoUnusedVariables = NoUnusedVariables;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function unusedVariableMessage(varName, opName) {","  return opName ? 'Variable \"$' + varName + '\" is never used in operation \"' + opName + '\".' : 'Variable \"$' + varName + '\" is never used.';","}","","/**"," * No unused variables"," *"," * A GraphQL operation is only valid if all variables defined by an operation"," * are used, either directly or within a spread fragment."," */","function NoUnusedVariables(context) {","  var variableDefs = [];","","  return {","    OperationDefinition: {","      enter: function enter() {","        variableDefs = [];","      },","      leave: function leave(operation) {","        var variableNameUsed = Object.create(null);","        var usages = context.getRecursiveVariableUsages(operation);","        var opName = operation.name ? operation.name.value : null;","","        usages.forEach(function (_ref) {","          var node = _ref.node;","","          variableNameUsed[node.name.value] = true;","        });","","        variableDefs.forEach(function (variableDef) {","          var variableName = variableDef.variable.name.value;","          if (variableNameUsed[variableName] !== true) {","            context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));","          }","        });","      }","    },","    VariableDefinition: function VariableDefinition(def) {","      variableDefs.push(def);","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"33":0,"36":0,"39":0,"40":0,"41":0,"43":0,"44":0,"46":0,"49":0,"50":0,"51":0,"52":0,"58":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownDirectives.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownDirectives.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"7":[0,0,0],"8":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":37}}},"2":{"name":"unknownDirectiveMessage","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":48}}},"3":{"name":"misplacedDirectiveMessage","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":60}}},"4":{"name":"KnownDirectives","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":34}}},"5":{"name":"Directive","line":46,"loc":{"start":{"line":46,"column":15},"end":{"line":46,"column":70}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":82},"end":{"line":47,"column":97}}},"7":{"name":"getDirectiveLocationForASTPath","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":58}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":43}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":45}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":51}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":97}},"11":{"start":{"line":20,"column":39},"end":{"line":20,"column":95}},"12":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"13":{"start":{"line":23,"column":2},"end":{"line":23,"column":54}},"14":{"start":{"line":34,"column":0},"end":{"line":36,"column":1}},"15":{"start":{"line":35,"column":2},"end":{"line":35,"column":82}},"16":{"start":{"line":44,"column":0},"end":{"line":62,"column":1}},"17":{"start":{"line":45,"column":2},"end":{"line":61,"column":4}},"18":{"start":{"line":47,"column":6},"end":{"line":49,"column":9}},"19":{"start":{"line":48,"column":8},"end":{"line":48,"column":44}},"20":{"start":{"line":50,"column":6},"end":{"line":53,"column":7}},"21":{"start":{"line":51,"column":8},"end":{"line":51,"column":103}},"22":{"start":{"line":52,"column":8},"end":{"line":52,"column":15}},"23":{"start":{"line":54,"column":6},"end":{"line":54,"column":72}},"24":{"start":{"line":55,"column":6},"end":{"line":59,"column":7}},"25":{"start":{"line":56,"column":8},"end":{"line":56,"column":116}},"26":{"start":{"line":57,"column":13},"end":{"line":59,"column":7}},"27":{"start":{"line":58,"column":8},"end":{"line":58,"column":124}},"28":{"start":{"line":64,"column":0},"end":{"line":107,"column":1}},"29":{"start":{"line":65,"column":2},"end":{"line":65,"column":50}},"30":{"start":{"line":66,"column":2},"end":{"line":106,"column":3}},"31":{"start":{"line":68,"column":6},"end":{"line":75,"column":7}},"32":{"start":{"line":70,"column":10},"end":{"line":70,"column":53}},"33":{"start":{"line":72,"column":10},"end":{"line":72,"column":56}},"34":{"start":{"line":74,"column":10},"end":{"line":74,"column":60}},"35":{"start":{"line":76,"column":6},"end":{"line":76,"column":12}},"36":{"start":{"line":78,"column":6},"end":{"line":78,"column":49}},"37":{"start":{"line":80,"column":6},"end":{"line":80,"column":59}},"38":{"start":{"line":82,"column":6},"end":{"line":82,"column":59}},"39":{"start":{"line":84,"column":6},"end":{"line":84,"column":63}},"40":{"start":{"line":86,"column":6},"end":{"line":86,"column":50}},"41":{"start":{"line":88,"column":6},"end":{"line":88,"column":50}},"42":{"start":{"line":90,"column":6},"end":{"line":90,"column":50}},"43":{"start":{"line":92,"column":6},"end":{"line":92,"column":60}},"44":{"start":{"line":94,"column":6},"end":{"line":94,"column":53}},"45":{"start":{"line":96,"column":6},"end":{"line":96,"column":49}},"46":{"start":{"line":98,"column":6},"end":{"line":98,"column":48}},"47":{"start":{"line":100,"column":6},"end":{"line":100,"column":54}},"48":{"start":{"line":102,"column":6},"end":{"line":102,"column":56}},"49":{"start":{"line":104,"column":6},"end":{"line":104,"column":55}},"50":{"start":{"line":105,"column":6},"end":{"line":105,"column":176}}},"branchMap":{"1":{"line":20,"type":"cond-expr","locations":[{"start":{"line":20,"column":70},"end":{"line":20,"column":73}},{"start":{"line":20,"column":76},"end":{"line":20,"column":94}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":46},"end":{"line":20,"column":49}},{"start":{"line":20,"column":53},"end":{"line":20,"column":67}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"4":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":13},"end":{"line":57,"column":13}},{"start":{"line":57,"column":13},"end":{"line":57,"column":13}}]},"6":{"line":66,"type":"switch","locations":[{"start":{"line":67,"column":4},"end":{"line":76,"column":12}},{"start":{"line":77,"column":4},"end":{"line":78,"column":49}},{"start":{"line":79,"column":4},"end":{"line":80,"column":59}},{"start":{"line":81,"column":4},"end":{"line":82,"column":59}},{"start":{"line":83,"column":4},"end":{"line":84,"column":63}},{"start":{"line":85,"column":4},"end":{"line":86,"column":50}},{"start":{"line":87,"column":4},"end":{"line":88,"column":50}},{"start":{"line":89,"column":4},"end":{"line":90,"column":50}},{"start":{"line":91,"column":4},"end":{"line":92,"column":60}},{"start":{"line":93,"column":4},"end":{"line":94,"column":53}},{"start":{"line":95,"column":4},"end":{"line":96,"column":49}},{"start":{"line":97,"column":4},"end":{"line":98,"column":48}},{"start":{"line":99,"column":4},"end":{"line":100,"column":54}},{"start":{"line":101,"column":4},"end":{"line":102,"column":56}},{"start":{"line":103,"column":4},"end":{"line":105,"column":176}}]},"7":{"line":68,"type":"switch","locations":[{"start":{"line":69,"column":8},"end":{"line":70,"column":53}},{"start":{"line":71,"column":8},"end":{"line":72,"column":56}},{"start":{"line":73,"column":8},"end":{"line":74,"column":60}}]},"8":{"line":105,"type":"cond-expr","locations":[{"start":{"line":105,"column":71},"end":{"line":105,"column":123}},{"start":{"line":105,"column":126},"end":{"line":105,"column":175}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.unknownDirectiveMessage = unknownDirectiveMessage;","exports.misplacedDirectiveMessage = misplacedDirectiveMessage;","exports.KnownDirectives = KnownDirectives;","","var _error = require('../../error');","","var _find = require('../../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","var _kinds = require('../../language/kinds');","","var _directives = require('../../type/directives');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function unknownDirectiveMessage(directiveName) {","  return 'Unknown directive \"' + directiveName + '\".';","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function misplacedDirectiveMessage(directiveName, location) {","  return 'Directive \"' + directiveName + '\" may not be used on ' + location + '.';","}","","/**"," * Known directives"," *"," * A GraphQL document is only valid if all `@directives` are known by the"," * schema and legally positioned."," */","function KnownDirectives(context) {","  return {","    Directive: function Directive(node, key, parent, path, ancestors) {","      var directiveDef = (0, _find2.default)(context.getSchema().getDirectives(), function (def) {","        return def.name === node.name.value;","      });","      if (!directiveDef) {","        context.reportError(new _error.GraphQLError(unknownDirectiveMessage(node.name.value), [node]));","        return;","      }","      var candidateLocation = getDirectiveLocationForASTPath(ancestors);","      if (!candidateLocation) {","        context.reportError(new _error.GraphQLError(misplacedDirectiveMessage(node.name.value, node.type), [node]));","      } else if (directiveDef.locations.indexOf(candidateLocation) === -1) {","        context.reportError(new _error.GraphQLError(misplacedDirectiveMessage(node.name.value, candidateLocation), [node]));","      }","    }","  };","}","","function getDirectiveLocationForASTPath(ancestors) {","  var appliedTo = ancestors[ancestors.length - 1];","  switch (appliedTo.kind) {","    case _kinds.OPERATION_DEFINITION:","      switch (appliedTo.operation) {","        case 'query':","          return _directives.DirectiveLocation.QUERY;","        case 'mutation':","          return _directives.DirectiveLocation.MUTATION;","        case 'subscription':","          return _directives.DirectiveLocation.SUBSCRIPTION;","      }","      break;","    case _kinds.FIELD:","      return _directives.DirectiveLocation.FIELD;","    case _kinds.FRAGMENT_SPREAD:","      return _directives.DirectiveLocation.FRAGMENT_SPREAD;","    case _kinds.INLINE_FRAGMENT:","      return _directives.DirectiveLocation.INLINE_FRAGMENT;","    case _kinds.FRAGMENT_DEFINITION:","      return _directives.DirectiveLocation.FRAGMENT_DEFINITION;","    case _kinds.SCHEMA_DEFINITION:","      return _directives.DirectiveLocation.SCHEMA;","    case _kinds.SCALAR_TYPE_DEFINITION:","      return _directives.DirectiveLocation.SCALAR;","    case _kinds.OBJECT_TYPE_DEFINITION:","      return _directives.DirectiveLocation.OBJECT;","    case _kinds.FIELD_DEFINITION:","      return _directives.DirectiveLocation.FIELD_DEFINITION;","    case _kinds.INTERFACE_TYPE_DEFINITION:","      return _directives.DirectiveLocation.INTERFACE;","    case _kinds.UNION_TYPE_DEFINITION:","      return _directives.DirectiveLocation.UNION;","    case _kinds.ENUM_TYPE_DEFINITION:","      return _directives.DirectiveLocation.ENUM;","    case _kinds.ENUM_VALUE_DEFINITION:","      return _directives.DirectiveLocation.ENUM_VALUE;","    case _kinds.INPUT_OBJECT_TYPE_DEFINITION:","      return _directives.DirectiveLocation.INPUT_OBJECT;","    case _kinds.INPUT_VALUE_DEFINITION:","      var parentNode = ancestors[ancestors.length - 3];","      return parentNode.kind === _kinds.INPUT_OBJECT_TYPE_DEFINITION ? _directives.DirectiveLocation.INPUT_FIELD_DEFINITION : _directives.DirectiveLocation.ARGUMENT_DEFINITION;","  }","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"23":0,"34":1,"35":0,"44":1,"45":0,"47":0,"48":0,"50":0,"51":0,"52":0,"54":0,"55":0,"56":0,"57":0,"58":0,"64":1,"65":0,"66":0,"68":0,"70":0,"72":0,"74":0,"76":0,"78":0,"80":0,"82":0,"84":0,"86":0,"88":0,"90":0,"92":0,"94":0,"96":0,"98":0,"100":0,"102":0,"104":0,"105":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"duplicateDirectiveMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":50}}},"2":{"name":"UniqueDirectivesPerLocation","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":46}}},"3":{"name":"enter","line":35,"loc":{"start":{"line":35,"column":11},"end":{"line":35,"column":32}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":32},"end":{"line":38,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":66}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":94}},"7":{"start":{"line":30,"column":0},"end":{"line":49,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":48,"column":4}},"9":{"start":{"line":36,"column":6},"end":{"line":46,"column":7}},"10":{"start":{"line":37,"column":8},"end":{"line":37,"column":50}},"11":{"start":{"line":38,"column":8},"end":{"line":45,"column":11}},"12":{"start":{"line":39,"column":10},"end":{"line":39,"column":51}},"13":{"start":{"line":40,"column":10},"end":{"line":44,"column":11}},"14":{"start":{"line":41,"column":12},"end":{"line":41,"column":144}},"15":{"start":{"line":43,"column":12},"end":{"line":43,"column":55}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":10},"end":{"line":40,"column":10}},{"start":{"line":40,"column":10},"end":{"line":40,"column":10}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.duplicateDirectiveMessage = duplicateDirectiveMessage;","exports.UniqueDirectivesPerLocation = UniqueDirectivesPerLocation;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function duplicateDirectiveMessage(directiveName) {","  return 'The directive \"' + directiveName + '\" can only be used once at ' + 'this location.';","}","","/**"," * Unique directive names per location"," *"," * A GraphQL document is only valid if all directives at a given location"," * are uniquely named."," */","function UniqueDirectivesPerLocation(context) {","  return {","    // Many different AST nodes may contain directives. Rather than listing","    // them all, just listen for entering any node, and check to see if it","    // defines any directives.","    enter: function enter(node) {","      if (node.directives) {","        var knownDirectives = Object.create(null);","        node.directives.forEach(function (directive) {","          var directiveName = directive.name.value;","          if (knownDirectives[directiveName]) {","            context.reportError(new _error.GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));","          } else {","            knownDirectives[directiveName] = directive;","          }","        });","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"43":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownArgumentNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/KnownArgumentNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":4,"17":1,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"b":{"1":[4,0],"2":[4,4],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":4,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":37}}},"2":{"name":"unknownArgMessage","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":68}}},"3":{"name":"unknownDirectiveArgMessage","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":75}}},"4":{"name":"KnownArgumentNames","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":37}}},"5":{"name":"Argument","line":64,"loc":{"start":{"line":64,"column":14},"end":{"line":64,"column":68}}},"6":{"name":"(anonymous_6)","line":69,"loc":{"start":{"line":69,"column":63},"end":{"line":69,"column":78}}},"7":{"name":"(anonymous_7)","line":75,"loc":{"start":{"line":75,"column":188},"end":{"line":75,"column":203}}},"8":{"name":"(anonymous_8)","line":83,"loc":{"start":{"line":83,"column":68},"end":{"line":83,"column":83}}},"9":{"name":"(anonymous_9)","line":87,"loc":{"start":{"line":87,"column":182},"end":{"line":87,"column":197}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":64}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":42}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":43}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":52}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":53}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":62}},"11":{"start":{"line":22,"column":0},"end":{"line":22,"column":63}},"12":{"start":{"line":24,"column":0},"end":{"line":24,"column":58}},"13":{"start":{"line":26,"column":0},"end":{"line":26,"column":59}},"14":{"start":{"line":28,"column":0},"end":{"line":28,"column":45}},"15":{"start":{"line":30,"column":0},"end":{"line":30,"column":97}},"16":{"start":{"line":30,"column":39},"end":{"line":30,"column":95}},"17":{"start":{"line":32,"column":0},"end":{"line":38,"column":1}},"18":{"start":{"line":33,"column":2},"end":{"line":33,"column":121}},"19":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"20":{"start":{"line":35,"column":4},"end":{"line":35,"column":83}},"21":{"start":{"line":37,"column":2},"end":{"line":37,"column":17}},"22":{"start":{"line":48,"column":0},"end":{"line":54,"column":1}},"23":{"start":{"line":49,"column":2},"end":{"line":49,"column":92}},"24":{"start":{"line":50,"column":2},"end":{"line":52,"column":3}},"25":{"start":{"line":51,"column":4},"end":{"line":51,"column":83}},"26":{"start":{"line":53,"column":2},"end":{"line":53,"column":17}},"27":{"start":{"line":62,"column":0},"end":{"line":95,"column":1}},"28":{"start":{"line":63,"column":2},"end":{"line":94,"column":4}},"29":{"start":{"line":65,"column":6},"end":{"line":65,"column":55}},"30":{"start":{"line":66,"column":6},"end":{"line":92,"column":7}},"31":{"start":{"line":67,"column":8},"end":{"line":67,"column":45}},"32":{"start":{"line":68,"column":8},"end":{"line":79,"column":9}},"33":{"start":{"line":69,"column":10},"end":{"line":71,"column":13}},"34":{"start":{"line":70,"column":12},"end":{"line":70,"column":48}},"35":{"start":{"line":72,"column":10},"end":{"line":78,"column":11}},"36":{"start":{"line":73,"column":12},"end":{"line":73,"column":53}},"37":{"start":{"line":74,"column":12},"end":{"line":74,"column":49}},"38":{"start":{"line":75,"column":12},"end":{"line":77,"column":27}},"39":{"start":{"line":76,"column":14},"end":{"line":76,"column":30}},"40":{"start":{"line":80,"column":13},"end":{"line":92,"column":7}},"41":{"start":{"line":81,"column":8},"end":{"line":81,"column":47}},"42":{"start":{"line":82,"column":8},"end":{"line":91,"column":9}},"43":{"start":{"line":83,"column":10},"end":{"line":85,"column":13}},"44":{"start":{"line":84,"column":12},"end":{"line":84,"column":48}},"45":{"start":{"line":86,"column":10},"end":{"line":90,"column":11}},"46":{"start":{"line":87,"column":12},"end":{"line":89,"column":27}},"47":{"start":{"line":88,"column":14},"end":{"line":88,"column":30}}},"branchMap":{"1":{"line":30,"type":"cond-expr","locations":[{"start":{"line":30,"column":70},"end":{"line":30,"column":73}},{"start":{"line":30,"column":76},"end":{"line":30,"column":94}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":46},"end":{"line":30,"column":49}},{"start":{"line":30,"column":53},"end":{"line":30,"column":67}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"7":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":10},"end":{"line":72,"column":10}},{"start":{"line":72,"column":10},"end":{"line":72,"column":10}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":13},"end":{"line":80,"column":13}},{"start":{"line":80,"column":13},"end":{"line":80,"column":13}}]},"9":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"10":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":10},"end":{"line":86,"column":10}},{"start":{"line":86,"column":10},"end":{"line":86,"column":10}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.unknownArgMessage = unknownArgMessage;","exports.unknownDirectiveArgMessage = unknownDirectiveArgMessage;","exports.KnownArgumentNames = KnownArgumentNames;","","var _error = require('../../error');","","var _find = require('../../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","var _invariant = require('../../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _suggestionList = require('../../jsutils/suggestionList');","","var _suggestionList2 = _interopRequireDefault(_suggestionList);","","var _quotedOrList = require('../../jsutils/quotedOrList');","","var _quotedOrList2 = _interopRequireDefault(_quotedOrList);","","var _kinds = require('../../language/kinds');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function unknownArgMessage(argName, fieldName, type, suggestedArgs) {","  var message = 'Unknown argument \"' + argName + '\" on field \"' + fieldName + '\" of ' + ('type \"' + String(type) + '\".');","  if (suggestedArgs.length) {","    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedArgs) + '?';","  }","  return message;","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {","  var message = 'Unknown argument \"' + argName + '\" on directive \"@' + directiveName + '\".';","  if (suggestedArgs.length) {","    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedArgs) + '?';","  }","  return message;","}","","/**"," * Known argument names"," *"," * A GraphQL field is only valid if all supplied arguments are defined by"," * that field."," */","function KnownArgumentNames(context) {","  return {","    Argument: function Argument(node, key, parent, path, ancestors) {","      var argumentOf = ancestors[ancestors.length - 1];","      if (argumentOf.kind === _kinds.FIELD) {","        var fieldDef = context.getFieldDef();","        if (fieldDef) {","          var fieldArgDef = (0, _find2.default)(fieldDef.args, function (arg) {","            return arg.name === node.name.value;","          });","          if (!fieldArgDef) {","            var parentType = context.getParentType();","            (0, _invariant2.default)(parentType);","            context.reportError(new _error.GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, (0, _suggestionList2.default)(node.name.value, fieldDef.args.map(function (arg) {","              return arg.name;","            }))), [node]));","          }","        }","      } else if (argumentOf.kind === _kinds.DIRECTIVE) {","        var directive = context.getDirective();","        if (directive) {","          var directiveArgDef = (0, _find2.default)(directive.args, function (arg) {","            return arg.name === node.name.value;","          });","          if (!directiveArgDef) {","            context.reportError(new _error.GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, (0, _suggestionList2.default)(node.name.value, directive.args.map(function (arg) {","              return arg.name;","            }))), [node]));","          }","        }","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":4,"32":1,"33":0,"34":0,"35":0,"37":0,"48":1,"49":0,"50":0,"51":0,"53":0,"62":1,"63":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"72":0,"73":0,"74":0,"75":0,"76":0,"80":0,"81":0,"82":0,"83":0,"84":0,"86":0,"87":0,"88":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueArgumentNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueArgumentNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"duplicateArgMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":38}}},"2":{"name":"UniqueArgumentNames","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":38}}},"3":{"name":"Field","line":33,"loc":{"start":{"line":33,"column":11},"end":{"line":33,"column":28}}},"4":{"name":"Directive","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":36}}},"5":{"name":"Argument","line":39,"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":50}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":50}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":67}},"7":{"start":{"line":30,"column":0},"end":{"line":49,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":42}},"9":{"start":{"line":32,"column":2},"end":{"line":48,"column":4}},"10":{"start":{"line":34,"column":6},"end":{"line":34,"column":42}},"11":{"start":{"line":37,"column":6},"end":{"line":37,"column":42}},"12":{"start":{"line":40,"column":6},"end":{"line":40,"column":36}},"13":{"start":{"line":41,"column":6},"end":{"line":45,"column":7}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":120}},"15":{"start":{"line":44,"column":8},"end":{"line":44,"column":43}},"16":{"start":{"line":46,"column":6},"end":{"line":46,"column":19}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.duplicateArgMessage = duplicateArgMessage;","exports.UniqueArgumentNames = UniqueArgumentNames;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function duplicateArgMessage(argName) {","  return 'There can be only one argument named \"' + argName + '\".';","}","","/**"," * Unique argument names"," *"," * A GraphQL field or directive is only valid if all supplied arguments are"," * uniquely named."," */","function UniqueArgumentNames(context) {","  var knownArgNames = Object.create(null);","  return {","    Field: function Field() {","      knownArgNames = Object.create(null);","    },","    Directive: function Directive() {","      knownArgNames = Object.create(null);","    },","    Argument: function Argument(node) {","      var argName = node.name.value;","      if (knownArgNames[argName]) {","        context.reportError(new _error.GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));","      } else {","        knownArgNames[argName] = node.name;","      }","      return false;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"32":0,"34":0,"37":0,"40":0,"41":0,"42":0,"44":0,"46":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/ArgumentsOfCorrectType.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/ArgumentsOfCorrectType.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"badValueMessage","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":62}}},"2":{"name":"ArgumentsOfCorrectType","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":41}}},"3":{"name":"Argument","line":37,"loc":{"start":{"line":37,"column":14},"end":{"line":37,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":56}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":49}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":74}},"7":{"start":{"line":24,"column":0},"end":{"line":27,"column":1}},"8":{"start":{"line":25,"column":2},"end":{"line":25,"column":69}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":81}},"10":{"start":{"line":35,"column":0},"end":{"line":48,"column":1}},"11":{"start":{"line":36,"column":2},"end":{"line":47,"column":4}},"12":{"start":{"line":38,"column":6},"end":{"line":38,"column":41}},"13":{"start":{"line":39,"column":6},"end":{"line":44,"column":7}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":92}},"15":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"16":{"start":{"line":42,"column":10},"end":{"line":42,"column":157}},"17":{"start":{"line":45,"column":6},"end":{"line":45,"column":19}}},"branchMap":{"1":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":32},"end":{"line":25,"column":63}},{"start":{"line":25,"column":66},"end":{"line":25,"column":68}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":18}},{"start":{"line":41,"column":22},"end":{"line":41,"column":39}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.badValueMessage = badValueMessage;","exports.ArgumentsOfCorrectType = ArgumentsOfCorrectType;","","var _error = require('../../error');","","var _printer = require('../../language/printer');","","var _isValidLiteralValue = require('../../utilities/isValidLiteralValue');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function badValueMessage(argName, type, value, verboseErrors) {","  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';","  return 'Argument \"' + argName + '\" has invalid value ' + value + '.' + message;","}","","/**"," * Argument values of correct type"," *"," * A GraphQL document is only valid if all field argument literal values are"," * of the type expected by their position."," */","function ArgumentsOfCorrectType(context) {","  return {","    Argument: function Argument(node) {","      var argDef = context.getArgument();","      if (argDef) {","        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argDef.type, node.value);","        if (errors && errors.length > 0) {","          context.reportError(new _error.GraphQLError(badValueMessage(node.name.value, argDef.type, (0, _printer.print)(node.value), errors), [node.value]));","        }","      }","      return false;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"24":1,"25":0,"26":0,"35":1,"36":0,"38":0,"39":0,"40":0,"41":0,"42":0,"45":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/isValidLiteralValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/isValidLiteralValue.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":3,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},"b":{"1":[3,0],"2":[3,3],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":37}}},"2":{"name":"isValidLiteralValue","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":46}}},"3":{"name":"(anonymous_3)","line":68,"loc":{"start":{"line":68,"column":37},"end":{"line":68,"column":65}}},"4":{"name":"(anonymous_4)","line":70,"loc":{"start":{"line":70,"column":37},"end":{"line":70,"column":54}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":23},"end":{"line":89,"column":52}}},"6":{"name":"(anonymous_6)","line":96,"loc":{"start":{"line":96,"column":57},"end":{"line":96,"column":78}}},"7":{"name":"(anonymous_7)","line":99,"loc":{"start":{"line":99,"column":32},"end":{"line":99,"column":53}}},"8":{"name":"(anonymous_8)","line":101,"loc":{"start":{"line":101,"column":43},"end":{"line":101,"column":60}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":50}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":42}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":53}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":43}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":47}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":49}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":53}},"12":{"start":{"line":26,"column":0},"end":{"line":26,"column":97}},"13":{"start":{"line":26,"column":39},"end":{"line":26,"column":95}},"14":{"start":{"line":45,"column":0},"end":{"line":119,"column":1}},"15":{"start":{"line":47,"column":2},"end":{"line":52,"column":3}},"16":{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},"17":{"start":{"line":49,"column":6},"end":{"line":49,"column":62}},"18":{"start":{"line":51,"column":4},"end":{"line":51,"column":55}},"19":{"start":{"line":54,"column":2},"end":{"line":56,"column":3}},"20":{"start":{"line":55,"column":4},"end":{"line":55,"column":14}},"21":{"start":{"line":60,"column":2},"end":{"line":62,"column":3}},"22":{"start":{"line":61,"column":4},"end":{"line":61,"column":14}},"23":{"start":{"line":65,"column":2},"end":{"line":76,"column":3}},"24":{"start":{"line":66,"column":4},"end":{"line":66,"column":31}},"25":{"start":{"line":67,"column":4},"end":{"line":74,"column":5}},"26":{"start":{"line":68,"column":6},"end":{"line":73,"column":13}},"27":{"start":{"line":69,"column":8},"end":{"line":69,"column":57}},"28":{"start":{"line":70,"column":8},"end":{"line":72,"column":12}},"29":{"start":{"line":71,"column":10},"end":{"line":71,"column":55}},"30":{"start":{"line":75,"column":4},"end":{"line":75,"column":52}},"31":{"start":{"line":79,"column":2},"end":{"line":107,"column":3}},"32":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"33":{"start":{"line":81,"column":6},"end":{"line":81,"column":68}},"34":{"start":{"line":83,"column":4},"end":{"line":83,"column":34}},"35":{"start":{"line":85,"column":4},"end":{"line":85,"column":20}},"36":{"start":{"line":88,"column":4},"end":{"line":88,"column":38}},"37":{"start":{"line":89,"column":4},"end":{"line":93,"column":7}},"38":{"start":{"line":90,"column":6},"end":{"line":92,"column":7}},"39":{"start":{"line":91,"column":8},"end":{"line":91,"column":87}},"40":{"start":{"line":96,"column":4},"end":{"line":98,"column":7}},"41":{"start":{"line":97,"column":6},"end":{"line":97,"column":34}},"42":{"start":{"line":99,"column":4},"end":{"line":104,"column":7}},"43":{"start":{"line":100,"column":6},"end":{"line":100,"column":121}},"44":{"start":{"line":101,"column":6},"end":{"line":103,"column":10}},"45":{"start":{"line":102,"column":8},"end":{"line":102,"column":56}},"46":{"start":{"line":106,"column":4},"end":{"line":106,"column":18}},"47":{"start":{"line":109,"column":2},"end":{"line":109,"column":143}},"48":{"start":{"line":113,"column":2},"end":{"line":113,"column":49}},"49":{"start":{"line":114,"column":2},"end":{"line":116,"column":3}},"50":{"start":{"line":115,"column":4},"end":{"line":115,"column":96}},"51":{"start":{"line":118,"column":2},"end":{"line":118,"column":12}}},"branchMap":{"1":{"line":26,"type":"cond-expr","locations":[{"start":{"line":26,"column":70},"end":{"line":26,"column":73}},{"start":{"line":26,"column":76},"end":{"line":26,"column":94}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":46},"end":{"line":26,"column":49}},{"start":{"line":26,"column":53},"end":{"line":26,"column":67}}]},"3":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"5":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":8},"end":{"line":48,"column":18}},{"start":{"line":48,"column":22},"end":{"line":48,"column":52}}]},"6":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":2},"end":{"line":54,"column":2}},{"start":{"line":54,"column":2},"end":{"line":54,"column":2}}]},"7":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":16}},{"start":{"line":54,"column":20},"end":{"line":54,"column":50}}]},"8":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"9":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"10":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"11":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":2},"end":{"line":79,"column":2}},{"start":{"line":79,"column":2},"end":{"line":79,"column":2}}]},"12":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"13":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":6}},{"start":{"line":90,"column":6},"end":{"line":90,"column":6}}]},"14":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":63},"end":{"line":100,"column":86}},{"start":{"line":100,"column":90},"end":{"line":100,"column":119}}]},"15":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":27},"end":{"line":109,"column":72}},{"start":{"line":109,"column":76},"end":{"line":109,"column":119}}]},"16":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":2},"end":{"line":114,"column":2}},{"start":{"line":114,"column":2},"end":{"line":114,"column":2}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.isValidLiteralValue = isValidLiteralValue;","","var _printer = require('../language/printer');","","var _kinds = require('../language/kinds');","","var _definition = require('../type/definition');","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _keyMap = require('../jsutils/keyMap');","","var _keyMap2 = _interopRequireDefault(_keyMap);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Utility for validators which determines if a value literal node is valid"," * given an input type."," *"," * Note that this only validates literal values, variables are assumed to"," * provide values of the correct type."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function isValidLiteralValue(type, valueNode) {","  // A value must be provided if the type is non-null.","  if (type instanceof _definition.GraphQLNonNull) {","    if (!valueNode || valueNode.kind === _kinds.NULL) {","      return ['Expected \"' + String(type) + '\", found null.'];","    }","    return isValidLiteralValue(type.ofType, valueNode);","  }","","  if (!valueNode || valueNode.kind === _kinds.NULL) {","    return [];","  }","","  // This function only tests literals, and assumes variables will provide","  // values of the correct type.","  if (valueNode.kind === _kinds.VARIABLE) {","    return [];","  }","","  // Lists accept a non-list value as a list of one.","  if (type instanceof _definition.GraphQLList) {","    var itemType = type.ofType;","    if (valueNode.kind === _kinds.LIST) {","      return valueNode.values.reduce(function (acc, item, index) {","        var errors = isValidLiteralValue(itemType, item);","        return acc.concat(errors.map(function (error) {","          return 'In element #' + index + ': ' + error;","        }));","      }, []);","    }","    return isValidLiteralValue(itemType, valueNode);","  }","","  // Input objects check each defined field and look for undefined fields.","  if (type instanceof _definition.GraphQLInputObjectType) {","    if (valueNode.kind !== _kinds.OBJECT) {","      return ['Expected \"' + type.name + '\", found not an object.'];","    }","    var fields = type.getFields();","","    var errors = [];","","    // Ensure every provided field is defined.","    var fieldNodes = valueNode.fields;","    fieldNodes.forEach(function (providedFieldNode) {","      if (!fields[providedFieldNode.name.value]) {","        errors.push('In field \"' + providedFieldNode.name.value + '\": Unknown field.');","      }","    });","","    // Ensure every defined field is valid.","    var fieldNodeMap = (0, _keyMap2.default)(fieldNodes, function (fieldNode) {","      return fieldNode.name.value;","    });","    Object.keys(fields).forEach(function (fieldName) {","      var result = isValidLiteralValue(fields[fieldName].type, fieldNodeMap[fieldName] && fieldNodeMap[fieldName].value);","      errors.push.apply(errors, result.map(function (error) {","        return 'In field \"' + fieldName + '\": ' + error;","      }));","    });","","    return errors;","  }","","  (0, _invariant2.default)(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType, 'Must be input type');","","  // Scalar/Enum input checks to ensure the type can parse the value to","  // a non-null value.","  var parseResult = type.parseLiteral(valueNode);","  if ((0, _isNullish2.default)(parseResult)) {","    return ['Expected type \"' + type.name + '\", found ' + (0, _printer.print)(valueNode) + '.'];","  }","","  return [];","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":3,"45":1,"47":0,"48":0,"49":0,"51":0,"54":0,"55":0,"60":0,"61":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"75":0,"79":0,"80":0,"81":0,"83":0,"85":0,"88":0,"89":0,"90":0,"91":0,"96":0,"97":0,"99":0,"100":0,"101":0,"102":0,"106":0,"109":0,"113":0,"114":0,"115":0,"118":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/keyMap.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/keyMap.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"keyMap","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":29}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":21},"end":{"line":41,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"3":{"start":{"line":40,"column":0},"end":{"line":44,"column":1}},"4":{"start":{"line":41,"column":2},"end":{"line":43,"column":9}},"5":{"start":{"line":42,"column":4},"end":{"line":42,"column":40}}},"branchMap":{},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = keyMap;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Creates a keyed JS object from an array, given a function to produce the keys"," * for each value in the array."," *"," * This provides a convenient lookup for the array items if the key function"," * produces unique results."," *"," *     const phoneBook = ["," *       { name: 'Jon', num: '555-1234' },"," *       { name: 'Jenny', num: '867-5309' }"," *     ]"," *"," *     // { Jon: { name: 'Jon', num: '555-1234' },"," *     //   Jenny: { name: 'Jenny', num: '867-5309' } }"," *     const entriesByName = keyMap("," *       phoneBook,"," *       entry => entry.name"," *     )"," *"," *     // { name: 'Jenny', num: '857-6309' }"," *     const jennyEntry = entriesByName['Jenny']"," *"," */","function keyMap(list, keyFn) {","  return list.reduce(function (map, item) {","    return map[keyFn(item)] = item, map;","  }, {});","}"],"l":{"3":1,"6":1,"40":1,"41":0,"42":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/ProvidedNonNullArguments.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/ProvidedNonNullArguments.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":37}}},"2":{"name":"missingFieldArgMessage","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":58}}},"3":{"name":"missingDirectiveArgMessage","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":66}}},"4":{"name":"ProvidedNonNullArguments","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":43}}},"5":{"name":"leave","line":47,"loc":{"start":{"line":47,"column":13},"end":{"line":47,"column":34}}},"6":{"name":"(anonymous_6)","line":54,"loc":{"start":{"line":54,"column":57},"end":{"line":54,"column":72}}},"7":{"name":"(anonymous_7)","line":57,"loc":{"start":{"line":57,"column":30},"end":{"line":57,"column":48}}},"8":{"name":"leave","line":68,"loc":{"start":{"line":68,"column":13},"end":{"line":68,"column":34}}},"9":{"name":"(anonymous_9)","line":75,"loc":{"start":{"line":75,"column":57},"end":{"line":75,"column":72}}},"10":{"name":"(anonymous_10)","line":78,"loc":{"start":{"line":78,"column":34},"end":{"line":78,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":64}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":60}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":46}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":47}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":51}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":97}},"10":{"start":{"line":18,"column":39},"end":{"line":18,"column":95}},"11":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"12":{"start":{"line":30,"column":2},"end":{"line":30,"column":132}},"13":{"start":{"line":33,"column":0},"end":{"line":35,"column":1}},"14":{"start":{"line":34,"column":2},"end":{"line":34,"column":141}},"15":{"start":{"line":43,"column":0},"end":{"line":87,"column":1}},"16":{"start":{"line":44,"column":2},"end":{"line":86,"column":4}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":45}},"18":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"19":{"start":{"line":50,"column":10},"end":{"line":50,"column":23}},"20":{"start":{"line":52,"column":8},"end":{"line":52,"column":44}},"21":{"start":{"line":54,"column":8},"end":{"line":56,"column":11}},"22":{"start":{"line":55,"column":10},"end":{"line":55,"column":32}},"23":{"start":{"line":57,"column":8},"end":{"line":62,"column":11}},"24":{"start":{"line":58,"column":10},"end":{"line":58,"column":48}},"25":{"start":{"line":59,"column":10},"end":{"line":61,"column":11}},"26":{"start":{"line":60,"column":12},"end":{"line":60,"column":132}},"27":{"start":{"line":69,"column":8},"end":{"line":69,"column":50}},"28":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"29":{"start":{"line":71,"column":10},"end":{"line":71,"column":23}},"30":{"start":{"line":73,"column":8},"end":{"line":73,"column":44}},"31":{"start":{"line":75,"column":8},"end":{"line":77,"column":11}},"32":{"start":{"line":76,"column":10},"end":{"line":76,"column":32}},"33":{"start":{"line":78,"column":8},"end":{"line":83,"column":11}},"34":{"start":{"line":79,"column":10},"end":{"line":79,"column":48}},"35":{"start":{"line":80,"column":10},"end":{"line":82,"column":11}},"36":{"start":{"line":81,"column":12},"end":{"line":81,"column":136}}},"branchMap":{"1":{"line":18,"type":"cond-expr","locations":[{"start":{"line":18,"column":70},"end":{"line":18,"column":73}},{"start":{"line":18,"column":76},"end":{"line":18,"column":94}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":46},"end":{"line":18,"column":49}},{"start":{"line":18,"column":53},"end":{"line":18,"column":67}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"4":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":23},"end":{"line":52,"column":37}},{"start":{"line":52,"column":41},"end":{"line":52,"column":43}}]},"5":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":10},"end":{"line":59,"column":10}},{"start":{"line":59,"column":10},"end":{"line":59,"column":10}}]},"6":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":14},"end":{"line":59,"column":22}},{"start":{"line":59,"column":26},"end":{"line":59,"column":75}}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"8":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":23},"end":{"line":73,"column":37}},{"start":{"line":73,"column":41},"end":{"line":73,"column":43}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":10},"end":{"line":80,"column":10}},{"start":{"line":80,"column":10},"end":{"line":80,"column":10}}]},"10":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":14},"end":{"line":80,"column":22}},{"start":{"line":80,"column":26},"end":{"line":80,"column":75}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.missingFieldArgMessage = missingFieldArgMessage;","exports.missingDirectiveArgMessage = missingDirectiveArgMessage;","exports.ProvidedNonNullArguments = ProvidedNonNullArguments;","","var _error = require('../../error');","","var _keyMap = require('../../jsutils/keyMap');","","var _keyMap2 = _interopRequireDefault(_keyMap);","","var _definition = require('../../type/definition');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function missingFieldArgMessage(fieldName, argName, type) {","  return 'Field \"' + fieldName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');","}","","function missingDirectiveArgMessage(directiveName, argName, type) {","  return 'Directive \"@' + directiveName + '\" argument \"' + argName + '\" of type ' + ('\"' + String(type) + '\" is required but not provided.');","}","","/**"," * Provided required arguments"," *"," * A field or directive is only valid if all required (non-null) field arguments"," * have been provided."," */","function ProvidedNonNullArguments(context) {","  return {","    Field: {","      // Validate on leave to allow for deeper errors to appear first.","      leave: function leave(node) {","        var fieldDef = context.getFieldDef();","        if (!fieldDef) {","          return false;","        }","        var argNodes = node.arguments || [];","","        var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {","          return arg.name.value;","        });","        fieldDef.args.forEach(function (argDef) {","          var argNode = argNodeMap[argDef.name];","          if (!argNode && argDef.type instanceof _definition.GraphQLNonNull) {","            context.reportError(new _error.GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));","          }","        });","      }","    },","","    Directive: {","      // Validate on leave to allow for deeper errors to appear first.","      leave: function leave(node) {","        var directiveDef = context.getDirective();","        if (!directiveDef) {","          return false;","        }","        var argNodes = node.arguments || [];","","        var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {","          return arg.name.value;","        });","        directiveDef.args.forEach(function (argDef) {","          var argNode = argNodeMap[argDef.name];","          if (!argNode && argDef.type instanceof _definition.GraphQLNonNull) {","            context.reportError(new _error.GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));","          }","        });","      }","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"29":1,"30":0,"33":1,"34":0,"43":1,"44":0,"48":0,"49":0,"50":0,"52":0,"54":0,"55":0,"57":0,"58":0,"59":0,"60":0,"69":0,"70":0,"71":0,"73":0,"75":0,"76":0,"78":0,"79":0,"80":0,"81":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/DefaultValuesOfCorrectType.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/DefaultValuesOfCorrectType.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"defaultForNonNullArgMessage","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":63}}},"2":{"name":"badValueForDefaultArgMessage","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":75}}},"3":{"name":"DefaultValuesOfCorrectType","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":45}}},"4":{"name":"VariableDefinition","line":43,"loc":{"start":{"line":43,"column":24},"end":{"line":43,"column":58}}},"5":{"name":"SelectionSet","line":59,"loc":{"start":{"line":59,"column":18},"end":{"line":59,"column":42}}},"6":{"name":"FragmentDefinition","line":62,"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":64}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":51}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":74}},"9":{"start":{"line":18,"column":0},"end":{"line":20,"column":1}},"10":{"start":{"line":19,"column":2},"end":{"line":19,"column":189}},"11":{"start":{"line":30,"column":0},"end":{"line":33,"column":1}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":69}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":128}},"14":{"start":{"line":41,"column":0},"end":{"line":66,"column":1}},"15":{"start":{"line":42,"column":2},"end":{"line":65,"column":4}},"16":{"start":{"line":44,"column":6},"end":{"line":44,"column":42}},"17":{"start":{"line":45,"column":6},"end":{"line":45,"column":43}},"18":{"start":{"line":46,"column":6},"end":{"line":46,"column":40}},"19":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"20":{"start":{"line":48,"column":8},"end":{"line":48,"column":123}},"21":{"start":{"line":50,"column":6},"end":{"line":55,"column":7}},"22":{"start":{"line":51,"column":8},"end":{"line":51,"column":87}},"23":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"24":{"start":{"line":53,"column":10},"end":{"line":53,"column":156}},"25":{"start":{"line":56,"column":6},"end":{"line":56,"column":19}},"26":{"start":{"line":60,"column":6},"end":{"line":60,"column":19}},"27":{"start":{"line":63,"column":6},"end":{"line":63,"column":19}}},"branchMap":{"1":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":32},"end":{"line":31,"column":63}},{"start":{"line":31,"column":66},"end":{"line":31,"column":68}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"3":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":52}},{"start":{"line":47,"column":56},"end":{"line":47,"column":68}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":14}},{"start":{"line":50,"column":18},"end":{"line":50,"column":30}}]},"6":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"7":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},{"start":{"line":52,"column":22},"end":{"line":52,"column":39}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.defaultForNonNullArgMessage = defaultForNonNullArgMessage;","exports.badValueForDefaultArgMessage = badValueForDefaultArgMessage;","exports.DefaultValuesOfCorrectType = DefaultValuesOfCorrectType;","","var _error = require('../../error');","","var _printer = require('../../language/printer');","","var _definition = require('../../type/definition');","","var _isValidLiteralValue = require('../../utilities/isValidLiteralValue');","","function defaultForNonNullArgMessage(varName, type, guessType) {","  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" is required and ' + 'will not use the default value. ' + ('Perhaps you meant to use type \"' + String(guessType) + '\".');","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function badValueForDefaultArgMessage(varName, type, value, verboseErrors) {","  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';","  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" has invalid ' + ('default value ' + value + '.' + message);","}","","/**"," * Variable default values of correct type"," *"," * A GraphQL document is only valid if all variable default values are of the"," * type expected by their definition."," */","function DefaultValuesOfCorrectType(context) {","  return {","    VariableDefinition: function VariableDefinition(node) {","      var name = node.variable.name.value;","      var defaultValue = node.defaultValue;","      var type = context.getInputType();","      if (type instanceof _definition.GraphQLNonNull && defaultValue) {","        context.reportError(new _error.GraphQLError(defaultForNonNullArgMessage(name, type, type.ofType), [defaultValue]));","      }","      if (type && defaultValue) {","        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(type, defaultValue);","        if (errors && errors.length > 0) {","          context.reportError(new _error.GraphQLError(badValueForDefaultArgMessage(name, type, (0, _printer.print)(defaultValue), errors), [defaultValue]));","        }","      }","      return false;","    },","","    SelectionSet: function SelectionSet() {","      return false;","    },","    FragmentDefinition: function FragmentDefinition() {","      return false;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"19":0,"30":1,"31":0,"32":0,"41":1,"42":0,"44":0,"45":0,"46":0,"47":0,"48":0,"50":0,"51":0,"52":0,"53":0,"56":0,"60":0,"63":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/VariablesInAllowedPosition.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/VariablesInAllowedPosition.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"badVarPosMessage","line":17,"loc":{"start":{"line":17,"column":0},"end":{"line":17,"column":58}}},"2":{"name":"VariablesInAllowedPosition","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":45}}},"3":{"name":"enter","line":39,"loc":{"start":{"line":39,"column":13},"end":{"line":39,"column":30}}},"4":{"name":"leave","line":42,"loc":{"start":{"line":42,"column":13},"end":{"line":42,"column":39}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":23},"end":{"line":45,"column":39}}},"6":{"name":"VariableDefinition","line":66,"loc":{"start":{"line":66,"column":24},"end":{"line":66,"column":58}}},"7":{"name":"effectiveType","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":64}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":51}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":66}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":58}},"8":{"start":{"line":17,"column":0},"end":{"line":19,"column":1}},"9":{"start":{"line":18,"column":2},"end":{"line":18,"column":144}},"10":{"start":{"line":34,"column":0},"end":{"line":70,"column":1}},"11":{"start":{"line":35,"column":2},"end":{"line":35,"column":38}},"12":{"start":{"line":37,"column":2},"end":{"line":69,"column":4}},"13":{"start":{"line":40,"column":8},"end":{"line":40,"column":40}},"14":{"start":{"line":43,"column":8},"end":{"line":43,"column":67}},"15":{"start":{"line":45,"column":8},"end":{"line":63,"column":11}},"16":{"start":{"line":46,"column":10},"end":{"line":47,"column":31}},"17":{"start":{"line":49,"column":10},"end":{"line":49,"column":40}},"18":{"start":{"line":50,"column":10},"end":{"line":50,"column":42}},"19":{"start":{"line":51,"column":10},"end":{"line":62,"column":11}},"20":{"start":{"line":57,"column":12},"end":{"line":57,"column":45}},"21":{"start":{"line":58,"column":12},"end":{"line":58,"column":77}},"22":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"23":{"start":{"line":60,"column":14},"end":{"line":60,"column":117}},"24":{"start":{"line":67,"column":6},"end":{"line":67,"column":49}},"25":{"start":{"line":73,"column":0},"end":{"line":75,"column":1}},"26":{"start":{"line":74,"column":2},"end":{"line":74,"column":131}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":10},"end":{"line":51,"column":10}},{"start":{"line":51,"column":10},"end":{"line":51,"column":10}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":14},"end":{"line":51,"column":20}},{"start":{"line":51,"column":24},"end":{"line":51,"column":28}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":12}},{"start":{"line":59,"column":12},"end":{"line":59,"column":12}}]},"4":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":23}},{"start":{"line":59,"column":27},"end":{"line":59,"column":111}}]},"5":{"line":74,"type":"cond-expr","locations":[{"start":{"line":74,"column":81},"end":{"line":74,"column":88}},{"start":{"line":74,"column":91},"end":{"line":74,"column":130}}]},"6":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":9},"end":{"line":74,"column":29}},{"start":{"line":74,"column":33},"end":{"line":74,"column":78}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.badVarPosMessage = badVarPosMessage;","exports.VariablesInAllowedPosition = VariablesInAllowedPosition;","","var _error = require('../../error');","","var _definition = require('../../type/definition');","","var _typeComparators = require('../../utilities/typeComparators');","","var _typeFromAST = require('../../utilities/typeFromAST');","","function badVarPosMessage(varName, varType, expectedType) {","  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');","}","","/**"," * Variables passed to field arguments conform to type"," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function VariablesInAllowedPosition(context) {","  var varDefMap = Object.create(null);","","  return {","    OperationDefinition: {","      enter: function enter() {","        varDefMap = Object.create(null);","      },","      leave: function leave(operation) {","        var usages = context.getRecursiveVariableUsages(operation);","","        usages.forEach(function (_ref) {","          var node = _ref.node,","              type = _ref.type;","","          var varName = node.name.value;","          var varDef = varDefMap[varName];","          if (varDef && type) {","            // A var type is allowed if it is the same or more strict (e.g. is","            // a subtype of) than the expected type. It can be more strict if","            // the variable type is non-null when the expected type is nullable.","            // If both are list types, the variable item type can be more strict","            // than the expected item type (contravariant).","            var schema = context.getSchema();","            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);","            if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {","              context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));","            }","          }","        });","      }","    },","    VariableDefinition: function VariableDefinition(node) {","      varDefMap[node.variable.name.value] = node;","    }","  };","}","","// If a variable definition has a default value, it's effectively non-null.","function effectiveType(varType, varDef) {","  return !varDef.defaultValue || varType instanceof _definition.GraphQLNonNull ? varType : new _definition.GraphQLNonNull(varType);","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"15":1,"17":1,"18":0,"34":1,"35":0,"37":0,"40":0,"43":0,"45":0,"46":0,"49":0,"50":0,"51":0,"57":0,"58":0,"59":0,"60":0,"67":0,"73":1,"74":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":1,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":1,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":1,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":1,"151":0,"152":0,"153":0,"154":0,"155":0,"156":1,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":1,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":1,"185":1,"186":0,"187":0,"188":1,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":0,"199":1,"200":1,"201":0,"202":0,"203":0,"204":0,"205":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":37}}},"2":{"name":"_classCallCheck","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":48}}},"3":{"name":"fieldsConflictMessage","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":53}}},"4":{"name":"reasonMessage","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":31}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":22},"end":{"line":41,"column":38}}},"6":{"name":"OverlappingFieldsCanBeMerged","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":47}}},"7":{"name":"SelectionSet","line":69,"loc":{"start":{"line":69,"column":18},"end":{"line":69,"column":54}}},"8":{"name":"(anonymous_8)","line":71,"loc":{"start":{"line":71,"column":24},"end":{"line":71,"column":41}}},"9":{"name":"findConflictsWithinSelectionSet","line":149,"loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":125}}},"10":{"name":"collectConflictsBetweenFieldsAndFragment","line":179,"loc":{"start":{"line":179,"column":0},"end":{"line":179,"column":165}}},"11":{"name":"collectConflictsBetweenFragments","line":204,"loc":{"start":{"line":204,"column":0},"end":{"line":204,"column":163}}},"12":{"name":"findConflictsBetweenSubSelectionSets","line":252,"loc":{"start":{"line":252,"column":0},"end":{"line":252,"column":182}}},"13":{"name":"collectConflictsWithin","line":292,"loc":{"start":{"line":292,"column":0},"end":{"line":292,"column":111}}},"14":{"name":"(anonymous_14)","line":297,"loc":{"start":{"line":297,"column":32},"end":{"line":297,"column":56}}},"15":{"name":"collectConflictsBetween","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":158}}},"16":{"name":"(anonymous_16)","line":327,"loc":{"start":{"line":327,"column":33},"end":{"line":327,"column":57}}},"17":{"name":"findConflict","line":345,"loc":{"start":{"line":345,"column":0},"end":{"line":345,"column":144}}},"18":{"name":"sameArguments","line":397,"loc":{"start":{"line":397,"column":0},"end":{"line":397,"column":47}}},"19":{"name":"(anonymous_19)","line":401,"loc":{"start":{"line":401,"column":26},"end":{"line":401,"column":47}}},"20":{"name":"(anonymous_20)","line":402,"loc":{"start":{"line":402,"column":52},"end":{"line":402,"column":72}}},"21":{"name":"sameValue","line":412,"loc":{"start":{"line":412,"column":0},"end":{"line":412,"column":35}}},"22":{"name":"doTypesConflict","line":419,"loc":{"start":{"line":419,"column":0},"end":{"line":419,"column":39}}},"23":{"name":"getFieldsAndFragmentNames","line":441,"loc":{"start":{"line":441,"column":0},"end":{"line":441,"column":100}}},"24":{"name":"getReferencedFieldsAndFragmentNames","line":455,"loc":{"start":{"line":455,"column":0},"end":{"line":455,"column":94}}},"25":{"name":"_collectFieldsAndFragmentNames","line":466,"loc":{"start":{"line":466,"column":0},"end":{"line":466,"column":103}}},"26":{"name":"subfieldConflicts","line":496,"loc":{"start":{"line":496,"column":0},"end":{"line":496,"column":66}}},"27":{"name":"(anonymous_27)","line":498,"loc":{"start":{"line":498,"column":41},"end":{"line":498,"column":58}}},"28":{"name":"(anonymous_28)","line":501,"loc":{"start":{"line":501,"column":26},"end":{"line":501,"column":54}}},"29":{"name":"(anonymous_29)","line":504,"loc":{"start":{"line":504,"column":34},"end":{"line":504,"column":62}}},"30":{"name":"(anonymous_30)","line":516,"loc":{"start":{"line":516,"column":14},"end":{"line":516,"column":26}}},"31":{"name":"PairSet","line":517,"loc":{"start":{"line":517,"column":2},"end":{"line":517,"column":21}}},"32":{"name":"has","line":523,"loc":{"start":{"line":523,"column":26},"end":{"line":523,"column":67}}},"33":{"name":"add","line":538,"loc":{"start":{"line":538,"column":26},"end":{"line":538,"column":67}}},"34":{"name":"_pairSetAdd","line":546,"loc":{"start":{"line":546,"column":0},"end":{"line":546,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":54}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":68}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":42}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":43}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":45}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":49}},"9":{"start":{"line":19,"column":0},"end":{"line":19,"column":51}},"10":{"start":{"line":21,"column":0},"end":{"line":21,"column":58}},"11":{"start":{"line":23,"column":0},"end":{"line":23,"column":97}},"12":{"start":{"line":23,"column":39},"end":{"line":23,"column":95}},"13":{"start":{"line":25,"column":0},"end":{"line":25,"column":153}},"14":{"start":{"line":25,"column":50},"end":{"line":25,"column":151}},"15":{"start":{"line":25,"column":92},"end":{"line":25,"column":149}},"16":{"start":{"line":35,"column":0},"end":{"line":37,"column":1}},"17":{"start":{"line":36,"column":2},"end":{"line":36,"column":169}},"18":{"start":{"line":39,"column":0},"end":{"line":48,"column":1}},"19":{"start":{"line":40,"column":2},"end":{"line":46,"column":3}},"20":{"start":{"line":41,"column":4},"end":{"line":45,"column":21}},"21":{"start":{"line":42,"column":6},"end":{"line":43,"column":30}},"22":{"start":{"line":44,"column":6},"end":{"line":44,"column":93}},"23":{"start":{"line":47,"column":2},"end":{"line":47,"column":16}},"24":{"start":{"line":57,"column":0},"end":{"line":81,"column":1}},"25":{"start":{"line":61,"column":2},"end":{"line":61,"column":40}},"26":{"start":{"line":66,"column":2},"end":{"line":66,"column":47}},"27":{"start":{"line":68,"column":2},"end":{"line":80,"column":4}},"28":{"start":{"line":70,"column":6},"end":{"line":70,"column":151}},"29":{"start":{"line":71,"column":6},"end":{"line":78,"column":9}},"30":{"start":{"line":72,"column":8},"end":{"line":76,"column":31}},"31":{"start":{"line":77,"column":8},"end":{"line":77,"column":130}},"32":{"start":{"line":149,"column":0},"end":{"line":175,"column":1}},"33":{"start":{"line":150,"column":2},"end":{"line":150,"column":21}},"34":{"start":{"line":152,"column":2},"end":{"line":154,"column":47}},"35":{"start":{"line":160,"column":2},"end":{"line":160,"column":104}},"36":{"start":{"line":164,"column":2},"end":{"line":173,"column":3}},"37":{"start":{"line":165,"column":4},"end":{"line":165,"column":149}},"38":{"start":{"line":170,"column":4},"end":{"line":172,"column":5}},"39":{"start":{"line":171,"column":6},"end":{"line":171,"column":151}},"40":{"start":{"line":174,"column":2},"end":{"line":174,"column":19}},"41":{"start":{"line":179,"column":0},"end":{"line":200,"column":1}},"42":{"start":{"line":180,"column":2},"end":{"line":180,"column":51}},"43":{"start":{"line":181,"column":2},"end":{"line":183,"column":3}},"44":{"start":{"line":182,"column":4},"end":{"line":182,"column":11}},"45":{"start":{"line":185,"column":2},"end":{"line":187,"column":48}},"46":{"start":{"line":193,"column":2},"end":{"line":193,"column":138}},"47":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"48":{"start":{"line":198,"column":4},"end":{"line":198,"column":165}},"49":{"start":{"line":204,"column":0},"end":{"line":247,"column":1}},"50":{"start":{"line":205,"column":2},"end":{"line":205,"column":53}},"51":{"start":{"line":206,"column":2},"end":{"line":206,"column":53}},"52":{"start":{"line":207,"column":2},"end":{"line":209,"column":3}},"53":{"start":{"line":208,"column":4},"end":{"line":208,"column":11}},"54":{"start":{"line":212,"column":2},"end":{"line":214,"column":3}},"55":{"start":{"line":213,"column":4},"end":{"line":213,"column":11}},"56":{"start":{"line":217,"column":2},"end":{"line":219,"column":3}},"57":{"start":{"line":218,"column":4},"end":{"line":218,"column":11}},"58":{"start":{"line":220,"column":2},"end":{"line":220,"column":76}},"59":{"start":{"line":222,"column":2},"end":{"line":224,"column":49}},"60":{"start":{"line":226,"column":2},"end":{"line":228,"column":49}},"61":{"start":{"line":234,"column":2},"end":{"line":234,"column":139}},"62":{"start":{"line":238,"column":2},"end":{"line":240,"column":3}},"63":{"start":{"line":239,"column":4},"end":{"line":239,"column":162}},"64":{"start":{"line":244,"column":2},"end":{"line":246,"column":3}},"65":{"start":{"line":245,"column":4},"end":{"line":245,"column":162}},"66":{"start":{"line":252,"column":0},"end":{"line":289,"column":1}},"67":{"start":{"line":253,"column":2},"end":{"line":253,"column":21}},"68":{"start":{"line":255,"column":2},"end":{"line":257,"column":49}},"69":{"start":{"line":259,"column":2},"end":{"line":261,"column":49}},"70":{"start":{"line":266,"column":2},"end":{"line":266,"column":139}},"71":{"start":{"line":270,"column":2},"end":{"line":272,"column":3}},"72":{"start":{"line":271,"column":4},"end":{"line":271,"column":166}},"73":{"start":{"line":276,"column":2},"end":{"line":278,"column":3}},"74":{"start":{"line":277,"column":4},"end":{"line":277,"column":166}},"75":{"start":{"line":283,"column":2},"end":{"line":287,"column":3}},"76":{"start":{"line":284,"column":4},"end":{"line":286,"column":5}},"77":{"start":{"line":285,"column":6},"end":{"line":285,"column":170}},"78":{"start":{"line":288,"column":2},"end":{"line":288,"column":19}},"79":{"start":{"line":292,"column":0},"end":{"line":314,"column":1}},"80":{"start":{"line":297,"column":2},"end":{"line":313,"column":5}},"81":{"start":{"line":298,"column":4},"end":{"line":298,"column":40}},"82":{"start":{"line":302,"column":4},"end":{"line":312,"column":5}},"83":{"start":{"line":303,"column":6},"end":{"line":311,"column":7}},"84":{"start":{"line":304,"column":8},"end":{"line":310,"column":9}},"85":{"start":{"line":305,"column":10},"end":{"line":306,"column":46}},"86":{"start":{"line":307,"column":10},"end":{"line":309,"column":11}},"87":{"start":{"line":308,"column":12},"end":{"line":308,"column":37}},"88":{"start":{"line":321,"column":0},"end":{"line":341,"column":1}},"89":{"start":{"line":327,"column":2},"end":{"line":340,"column":5}},"90":{"start":{"line":328,"column":4},"end":{"line":328,"column":42}},"91":{"start":{"line":329,"column":4},"end":{"line":339,"column":5}},"92":{"start":{"line":330,"column":6},"end":{"line":330,"column":44}},"93":{"start":{"line":331,"column":6},"end":{"line":338,"column":7}},"94":{"start":{"line":332,"column":8},"end":{"line":337,"column":9}},"95":{"start":{"line":333,"column":10},"end":{"line":333,"column":168}},"96":{"start":{"line":334,"column":10},"end":{"line":336,"column":11}},"97":{"start":{"line":335,"column":12},"end":{"line":335,"column":37}},"98":{"start":{"line":345,"column":0},"end":{"line":395,"column":1}},"99":{"start":{"line":346,"column":2},"end":{"line":348,"column":23}},"100":{"start":{"line":349,"column":2},"end":{"line":351,"column":23}},"101":{"start":{"line":362,"column":2},"end":{"line":362,"column":205}},"102":{"start":{"line":365,"column":2},"end":{"line":365,"column":32}},"103":{"start":{"line":366,"column":2},"end":{"line":366,"column":32}},"104":{"start":{"line":368,"column":2},"end":{"line":380,"column":3}},"105":{"start":{"line":370,"column":4},"end":{"line":370,"column":33}},"106":{"start":{"line":371,"column":4},"end":{"line":371,"column":33}},"107":{"start":{"line":372,"column":4},"end":{"line":374,"column":5}},"108":{"start":{"line":373,"column":6},"end":{"line":373,"column":99}},"109":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"110":{"start":{"line":378,"column":6},"end":{"line":378,"column":81}},"111":{"start":{"line":382,"column":2},"end":{"line":384,"column":3}},"112":{"start":{"line":383,"column":4},"end":{"line":383,"column":122}},"113":{"start":{"line":389,"column":2},"end":{"line":389,"column":41}},"114":{"start":{"line":390,"column":2},"end":{"line":390,"column":41}},"115":{"start":{"line":391,"column":2},"end":{"line":394,"column":3}},"116":{"start":{"line":392,"column":4},"end":{"line":392,"column":243}},"117":{"start":{"line":393,"column":4},"end":{"line":393,"column":68}},"118":{"start":{"line":397,"column":0},"end":{"line":410,"column":1}},"119":{"start":{"line":398,"column":2},"end":{"line":400,"column":3}},"120":{"start":{"line":399,"column":4},"end":{"line":399,"column":17}},"121":{"start":{"line":401,"column":2},"end":{"line":409,"column":5}},"122":{"start":{"line":402,"column":4},"end":{"line":404,"column":7}},"123":{"start":{"line":403,"column":6},"end":{"line":403,"column":58}},"124":{"start":{"line":405,"column":4},"end":{"line":407,"column":5}},"125":{"start":{"line":406,"column":6},"end":{"line":406,"column":19}},"126":{"start":{"line":408,"column":4},"end":{"line":408,"column":55}},"127":{"start":{"line":412,"column":0},"end":{"line":414,"column":1}},"128":{"start":{"line":413,"column":2},"end":{"line":413,"column":91}},"129":{"start":{"line":419,"column":0},"end":{"line":436,"column":1}},"130":{"start":{"line":420,"column":2},"end":{"line":422,"column":3}},"131":{"start":{"line":421,"column":4},"end":{"line":421,"column":105}},"132":{"start":{"line":423,"column":2},"end":{"line":425,"column":3}},"133":{"start":{"line":424,"column":4},"end":{"line":424,"column":105}},"134":{"start":{"line":426,"column":2},"end":{"line":428,"column":3}},"135":{"start":{"line":427,"column":4},"end":{"line":427,"column":108}},"136":{"start":{"line":429,"column":2},"end":{"line":431,"column":3}},"137":{"start":{"line":430,"column":4},"end":{"line":430,"column":108}},"138":{"start":{"line":432,"column":2},"end":{"line":434,"column":3}},"139":{"start":{"line":433,"column":4},"end":{"line":433,"column":27}},"140":{"start":{"line":435,"column":2},"end":{"line":435,"column":15}},"141":{"start":{"line":441,"column":0},"end":{"line":451,"column":1}},"142":{"start":{"line":442,"column":2},"end":{"line":442,"column":62}},"143":{"start":{"line":443,"column":2},"end":{"line":449,"column":3}},"144":{"start":{"line":444,"column":4},"end":{"line":444,"column":25}},"145":{"start":{"line":445,"column":4},"end":{"line":445,"column":27}},"146":{"start":{"line":446,"column":4},"end":{"line":446,"column":98}},"147":{"start":{"line":447,"column":4},"end":{"line":447,"column":55}},"148":{"start":{"line":448,"column":4},"end":{"line":448,"column":59}},"149":{"start":{"line":450,"column":2},"end":{"line":450,"column":16}},"150":{"start":{"line":455,"column":0},"end":{"line":464,"column":1}},"151":{"start":{"line":457,"column":2},"end":{"line":457,"column":71}},"152":{"start":{"line":458,"column":2},"end":{"line":460,"column":3}},"153":{"start":{"line":459,"column":4},"end":{"line":459,"column":18}},"154":{"start":{"line":462,"column":2},"end":{"line":462,"column":96}},"155":{"start":{"line":463,"column":2},"end":{"line":463,"column":111}},"156":{"start":{"line":466,"column":0},"end":{"line":492,"column":1}},"157":{"start":{"line":467,"column":2},"end":{"line":491,"column":3}},"158":{"start":{"line":468,"column":4},"end":{"line":468,"column":47}},"159":{"start":{"line":469,"column":4},"end":{"line":490,"column":5}},"160":{"start":{"line":471,"column":8},"end":{"line":471,"column":45}},"161":{"start":{"line":472,"column":8},"end":{"line":472,"column":30}},"162":{"start":{"line":473,"column":8},"end":{"line":475,"column":9}},"163":{"start":{"line":474,"column":10},"end":{"line":474,"column":55}},"164":{"start":{"line":476,"column":8},"end":{"line":476,"column":79}},"165":{"start":{"line":477,"column":8},"end":{"line":479,"column":9}},"166":{"start":{"line":478,"column":10},"end":{"line":478,"column":41}},"167":{"start":{"line":480,"column":8},"end":{"line":480,"column":74}},"168":{"start":{"line":481,"column":8},"end":{"line":481,"column":14}},"169":{"start":{"line":483,"column":8},"end":{"line":483,"column":51}},"170":{"start":{"line":484,"column":8},"end":{"line":484,"column":14}},"171":{"start":{"line":486,"column":8},"end":{"line":486,"column":52}},"172":{"start":{"line":487,"column":8},"end":{"line":487,"column":128}},"173":{"start":{"line":488,"column":8},"end":{"line":488,"column":120}},"174":{"start":{"line":489,"column":8},"end":{"line":489,"column":14}},"175":{"start":{"line":496,"column":0},"end":{"line":509,"column":1}},"176":{"start":{"line":497,"column":2},"end":{"line":508,"column":3}},"177":{"start":{"line":498,"column":4},"end":{"line":507,"column":17}},"178":{"start":{"line":499,"column":6},"end":{"line":499,"column":28}},"179":{"start":{"line":500,"column":6},"end":{"line":500,"column":20}},"180":{"start":{"line":502,"column":6},"end":{"line":502,"column":29}},"181":{"start":{"line":503,"column":6},"end":{"line":503,"column":39}},"182":{"start":{"line":505,"column":6},"end":{"line":505,"column":29}},"183":{"start":{"line":506,"column":6},"end":{"line":506,"column":39}},"184":{"start":{"line":516,"column":0},"end":{"line":544,"column":4}},"185":{"start":{"line":517,"column":2},"end":{"line":521,"column":3}},"186":{"start":{"line":518,"column":4},"end":{"line":518,"column":35}},"187":{"start":{"line":520,"column":4},"end":{"line":520,"column":37}},"188":{"start":{"line":523,"column":2},"end":{"line":536,"column":4}},"189":{"start":{"line":524,"column":4},"end":{"line":524,"column":30}},"190":{"start":{"line":525,"column":4},"end":{"line":525,"column":35}},"191":{"start":{"line":526,"column":4},"end":{"line":528,"column":5}},"192":{"start":{"line":527,"column":6},"end":{"line":527,"column":19}},"193":{"start":{"line":532,"column":4},"end":{"line":534,"column":5}},"194":{"start":{"line":533,"column":6},"end":{"line":533,"column":30}},"195":{"start":{"line":535,"column":4},"end":{"line":535,"column":16}},"196":{"start":{"line":538,"column":2},"end":{"line":541,"column":4}},"197":{"start":{"line":539,"column":4},"end":{"line":539,"column":56}},"198":{"start":{"line":540,"column":4},"end":{"line":540,"column":56}},"199":{"start":{"line":543,"column":2},"end":{"line":543,"column":17}},"200":{"start":{"line":546,"column":0},"end":{"line":553,"column":1}},"201":{"start":{"line":547,"column":2},"end":{"line":547,"column":20}},"202":{"start":{"line":548,"column":2},"end":{"line":551,"column":3}},"203":{"start":{"line":549,"column":4},"end":{"line":549,"column":30}},"204":{"start":{"line":550,"column":4},"end":{"line":550,"column":18}},"205":{"start":{"line":552,"column":2},"end":{"line":552,"column":32}}},"branchMap":{"1":{"line":23,"type":"cond-expr","locations":[{"start":{"line":23,"column":70},"end":{"line":23,"column":73}},{"start":{"line":23,"column":76},"end":{"line":23,"column":94}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":46},"end":{"line":23,"column":49}},{"start":{"line":23,"column":53},"end":{"line":23,"column":67}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":50},"end":{"line":25,"column":50}},{"start":{"line":25,"column":50},"end":{"line":25,"column":50}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"5":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":2},"end":{"line":181,"column":2}},{"start":{"line":181,"column":2},"end":{"line":181,"column":2}}]},"6":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":2},"end":{"line":207,"column":2}},{"start":{"line":207,"column":2},"end":{"line":207,"column":2}}]},"7":{"line":207,"type":"binary-expr","locations":[{"start":{"line":207,"column":6},"end":{"line":207,"column":16}},{"start":{"line":207,"column":20},"end":{"line":207,"column":30}}]},"8":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":2},"end":{"line":212,"column":2}},{"start":{"line":212,"column":2},"end":{"line":212,"column":2}}]},"9":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":2},"end":{"line":217,"column":2}},{"start":{"line":217,"column":2},"end":{"line":217,"column":2}}]},"10":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":4},"end":{"line":302,"column":4}},{"start":{"line":302,"column":4},"end":{"line":302,"column":4}}]},"11":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":10},"end":{"line":307,"column":10}},{"start":{"line":307,"column":10},"end":{"line":307,"column":10}}]},"12":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":4},"end":{"line":329,"column":4}},{"start":{"line":329,"column":4},"end":{"line":329,"column":4}}]},"13":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":10},"end":{"line":334,"column":10}},{"start":{"line":334,"column":10},"end":{"line":334,"column":10}}]},"14":{"line":362,"type":"binary-expr","locations":[{"start":{"line":362,"column":29},"end":{"line":362,"column":61}},{"start":{"line":362,"column":65},"end":{"line":362,"column":92}},{"start":{"line":362,"column":96},"end":{"line":362,"column":148}},{"start":{"line":362,"column":152},"end":{"line":362,"column":204}}]},"15":{"line":365,"type":"binary-expr","locations":[{"start":{"line":365,"column":14},"end":{"line":365,"column":18}},{"start":{"line":365,"column":22},"end":{"line":365,"column":31}}]},"16":{"line":366,"type":"binary-expr","locations":[{"start":{"line":366,"column":14},"end":{"line":366,"column":18}},{"start":{"line":366,"column":22},"end":{"line":366,"column":31}}]},"17":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":2},"end":{"line":368,"column":2}},{"start":{"line":368,"column":2},"end":{"line":368,"column":2}}]},"18":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":4},"end":{"line":372,"column":4}},{"start":{"line":372,"column":4},"end":{"line":372,"column":4}}]},"19":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":4},"end":{"line":377,"column":4}},{"start":{"line":377,"column":4},"end":{"line":377,"column":4}}]},"20":{"line":377,"type":"binary-expr","locations":[{"start":{"line":377,"column":23},"end":{"line":377,"column":38}},{"start":{"line":377,"column":42},"end":{"line":377,"column":44}}]},"21":{"line":377,"type":"binary-expr","locations":[{"start":{"line":377,"column":46},"end":{"line":377,"column":61}},{"start":{"line":377,"column":65},"end":{"line":377,"column":67}}]},"22":{"line":382,"type":"if","locations":[{"start":{"line":382,"column":2},"end":{"line":382,"column":2}},{"start":{"line":382,"column":2},"end":{"line":382,"column":2}}]},"23":{"line":382,"type":"binary-expr","locations":[{"start":{"line":382,"column":6},"end":{"line":382,"column":11}},{"start":{"line":382,"column":15},"end":{"line":382,"column":20}},{"start":{"line":382,"column":24},"end":{"line":382,"column":53}}]},"24":{"line":391,"type":"if","locations":[{"start":{"line":391,"column":2},"end":{"line":391,"column":2}},{"start":{"line":391,"column":2},"end":{"line":391,"column":2}}]},"25":{"line":391,"type":"binary-expr","locations":[{"start":{"line":391,"column":6},"end":{"line":391,"column":19}},{"start":{"line":391,"column":23},"end":{"line":391,"column":36}}]},"26":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":2},"end":{"line":398,"column":2}},{"start":{"line":398,"column":2},"end":{"line":398,"column":2}}]},"27":{"line":405,"type":"if","locations":[{"start":{"line":405,"column":4},"end":{"line":405,"column":4}},{"start":{"line":405,"column":4},"end":{"line":405,"column":4}}]},"28":{"line":413,"type":"binary-expr","locations":[{"start":{"line":413,"column":9},"end":{"line":413,"column":16}},{"start":{"line":413,"column":20},"end":{"line":413,"column":27}},{"start":{"line":413,"column":31},"end":{"line":413,"column":90}}]},"29":{"line":420,"type":"if","locations":[{"start":{"line":420,"column":2},"end":{"line":420,"column":2}},{"start":{"line":420,"column":2},"end":{"line":420,"column":2}}]},"30":{"line":421,"type":"cond-expr","locations":[{"start":{"line":421,"column":54},"end":{"line":421,"column":97}},{"start":{"line":421,"column":100},"end":{"line":421,"column":104}}]},"31":{"line":423,"type":"if","locations":[{"start":{"line":423,"column":2},"end":{"line":423,"column":2}},{"start":{"line":423,"column":2},"end":{"line":423,"column":2}}]},"32":{"line":424,"type":"cond-expr","locations":[{"start":{"line":424,"column":54},"end":{"line":424,"column":97}},{"start":{"line":424,"column":100},"end":{"line":424,"column":104}}]},"33":{"line":426,"type":"if","locations":[{"start":{"line":426,"column":2},"end":{"line":426,"column":2}},{"start":{"line":426,"column":2},"end":{"line":426,"column":2}}]},"34":{"line":427,"type":"cond-expr","locations":[{"start":{"line":427,"column":57},"end":{"line":427,"column":100}},{"start":{"line":427,"column":103},"end":{"line":427,"column":107}}]},"35":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":2},"end":{"line":429,"column":2}},{"start":{"line":429,"column":2},"end":{"line":429,"column":2}}]},"36":{"line":430,"type":"cond-expr","locations":[{"start":{"line":430,"column":57},"end":{"line":430,"column":100}},{"start":{"line":430,"column":103},"end":{"line":430,"column":107}}]},"37":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":2},"end":{"line":432,"column":2}},{"start":{"line":432,"column":2},"end":{"line":432,"column":2}}]},"38":{"line":432,"type":"binary-expr","locations":[{"start":{"line":432,"column":6},"end":{"line":432,"column":40}},{"start":{"line":432,"column":44},"end":{"line":432,"column":78}}]},"39":{"line":443,"type":"if","locations":[{"start":{"line":443,"column":2},"end":{"line":443,"column":2}},{"start":{"line":443,"column":2},"end":{"line":443,"column":2}}]},"40":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":2},"end":{"line":458,"column":2}},{"start":{"line":458,"column":2},"end":{"line":458,"column":2}}]},"41":{"line":469,"type":"switch","locations":[{"start":{"line":470,"column":6},"end":{"line":481,"column":14}},{"start":{"line":482,"column":6},"end":{"line":484,"column":14}},{"start":{"line":485,"column":6},"end":{"line":489,"column":14}}]},"42":{"line":473,"type":"if","locations":[{"start":{"line":473,"column":8},"end":{"line":473,"column":8}},{"start":{"line":473,"column":8},"end":{"line":473,"column":8}}]},"43":{"line":473,"type":"binary-expr","locations":[{"start":{"line":473,"column":12},"end":{"line":473,"column":63}},{"start":{"line":473,"column":67},"end":{"line":473,"column":121}}]},"44":{"line":476,"type":"cond-expr","locations":[{"start":{"line":476,"column":45},"end":{"line":476,"column":66}},{"start":{"line":476,"column":69},"end":{"line":476,"column":78}}]},"45":{"line":477,"type":"if","locations":[{"start":{"line":477,"column":8},"end":{"line":477,"column":8}},{"start":{"line":477,"column":8},"end":{"line":477,"column":8}}]},"46":{"line":487,"type":"cond-expr","locations":[{"start":{"line":487,"column":49},"end":{"line":487,"column":114}},{"start":{"line":487,"column":117},"end":{"line":487,"column":127}}]},"47":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":2},"end":{"line":497,"column":2}},{"start":{"line":497,"column":2},"end":{"line":497,"column":2}}]},"48":{"line":525,"type":"binary-expr","locations":[{"start":{"line":525,"column":17},"end":{"line":525,"column":22}},{"start":{"line":525,"column":26},"end":{"line":525,"column":34}}]},"49":{"line":526,"type":"if","locations":[{"start":{"line":526,"column":4},"end":{"line":526,"column":4}},{"start":{"line":526,"column":4},"end":{"line":526,"column":4}}]},"50":{"line":532,"type":"if","locations":[{"start":{"line":532,"column":4},"end":{"line":532,"column":4}},{"start":{"line":532,"column":4},"end":{"line":532,"column":4}}]},"51":{"line":548,"type":"if","locations":[{"start":{"line":548,"column":2},"end":{"line":548,"column":2}},{"start":{"line":548,"column":2},"end":{"line":548,"column":2}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.fieldsConflictMessage = fieldsConflictMessage;","exports.OverlappingFieldsCanBeMerged = OverlappingFieldsCanBeMerged;","","var _error = require('../../error');","","var _find = require('../../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","var _kinds = require('../../language/kinds');","","var _printer = require('../../language/printer');","","var _definition = require('../../type/definition');","","var _typeFromAST = require('../../utilities/typeFromAST');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function fieldsConflictMessage(responseName, reason) {","  return 'Fields \"' + responseName + '\" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';","}","","function reasonMessage(reason) {","  if (Array.isArray(reason)) {","    return reason.map(function (_ref) {","      var responseName = _ref[0],","          subreason = _ref[1];","      return 'subfields \"' + responseName + '\" conflict because ' + reasonMessage(subreason);","    }).join(' and ');","  }","  return reason;","}","","/**"," * Overlapping fields can be merged"," *"," * A selection set is only valid if all fields (including spreading any"," * fragments) either correspond to distinct response names or can be merged"," * without ambiguity."," */","function OverlappingFieldsCanBeMerged(context) {","  // A memoization for when two fragments are compared \"between\" each other for","  // conflicts. Two fragments may be compared many times, so memoizing this can","  // dramatically improve the performance of this validator.","  var comparedFragments = new PairSet();","","  // A cache for the \"field map\" and list of fragment names found in any given","  // selection set. Selection sets may be asked for this information multiple","  // times, so this improves the performance of this validator.","  var cachedFieldsAndFragmentNames = new Map();","","  return {","    SelectionSet: function SelectionSet(selectionSet) {","      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragments, context.getParentType(), selectionSet);","      conflicts.forEach(function (_ref2) {","        var _ref2$ = _ref2[0],","            responseName = _ref2$[0],","            reason = _ref2$[1],","            fields1 = _ref2[1],","            fields2 = _ref2[2];","        return context.reportError(new _error.GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));","      });","    }","  };","}","// Field name and reason.","","// Reason is a string, or a nested list of conflicts.","","// Tuple defining a field node in a context.","","// Map of array of those.","","","/**"," * Algorithm:"," *"," * Conflicts occur when two fields exist in a query which will produce the same"," * response name, but represent differing values, thus creating a conflict."," * The algorithm below finds all conflicts via making a series of comparisons"," * between fields. In order to compare as few fields as possible, this makes"," * a series of comparisons \"within\" sets of fields and \"between\" sets of fields."," *"," * Given any selection set, a collection produces both a set of fields by"," * also including all inline fragments, as well as a list of fragments"," * referenced by fragment spreads."," *"," * A) Each selection set represented in the document first compares \"within\" its"," * collected set of fields, finding any conflicts between every pair of"," * overlapping fields."," * Note: This is the *only time* that a the fields \"within\" a set are compared"," * to each other. After this only fields \"between\" sets are compared."," *"," * B) Also, if any fragment is referenced in a selection set, then a"," * comparison is made \"between\" the original set of fields and the"," * referenced fragment."," *"," * C) Also, if multiple fragments are referenced, then comparisons"," * are made \"between\" each referenced fragment."," *"," * D) When comparing \"between\" a set of fields and a referenced fragment, first"," * a comparison is made between each field in the original set of fields and"," * each field in the the referenced set of fields."," *"," * E) Also, if any fragment is referenced in the referenced selection set,"," * then a comparison is made \"between\" the original set of fields and the"," * referenced fragment (recursively referring to step D)."," *"," * F) When comparing \"between\" two fragments, first a comparison is made between"," * each field in the first referenced set of fields and each field in the the"," * second referenced set of fields."," *"," * G) Also, any fragments referenced by the first must be compared to the"," * second, and any fragments referenced by the second must be compared to the"," * first (recursively referring to step F)."," *"," * H) When comparing two fields, if both have selection sets, then a comparison"," * is made \"between\" both selection sets, first comparing the set of fields in"," * the first selection set with the set of fields in the second."," *"," * I) Also, if any fragment is referenced in either selection set, then a"," * comparison is made \"between\" the other set of fields and the"," * referenced fragment."," *"," * J) Also, if two fragments are referenced in both selection sets, then a"," * comparison is made \"between\" the two fragments."," *"," */","","// Find all conflicts found \"within\" a selection set, including those found","// via spreading in fragments. Called when visiting each SelectionSet in the","// GraphQL Document.","function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragments, parentType, selectionSet) {","  var conflicts = [];","","  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),","      fieldMap = _getFieldsAndFragment[0],","      fragmentNames = _getFieldsAndFragment[1];","","  // (A) Find find all conflicts \"within\" the fields of this selection set.","  // Note: this is the *only place* `collectConflictsWithin` is called.","","","  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, fieldMap);","","  // (B) Then collect conflicts between these fields and those represented by","  // each spread fragment name found.","  for (var i = 0; i < fragmentNames.length; i++) {","    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, false, fieldMap, fragmentNames[i]);","    // (C) Then compare this fragment with all other fragments found in this","    // selection set to collect conflicts between fragments spread together.","    // This compares each item in the list of fragment names to every other item","    // in that same list (except for itself).","    for (var j = i + 1; j < fragmentNames.length; j++) {","      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, false, fragmentNames[i], fragmentNames[j]);","    }","  }","  return conflicts;","}","","// Collect all conflicts found between a set of fields and a fragment reference","// including via spreading in any nested fragments.","function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fragmentName) {","  var fragment = context.getFragment(fragmentName);","  if (!fragment) {","    return;","  }","","  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),","      fieldMap2 = _getReferencedFieldsA[0],","      fragmentNames2 = _getReferencedFieldsA[1];","","  // (D) First collect any conflicts between the provided collection of fields","  // and the collection of fields represented by the given fragment.","","","  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fieldMap2);","","  // (E) Then collect any conflicts between the provided collection of fields","  // and any fragment names found in the given fragment.","  for (var i = 0; i < fragmentNames2.length; i++) {","    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap, fragmentNames2[i]);","  }","}","","// Collect all conflicts found between two fragments, including via spreading in","// any nested fragments.","function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentName1, fragmentName2) {","  var fragment1 = context.getFragment(fragmentName1);","  var fragment2 = context.getFragment(fragmentName2);","  if (!fragment1 || !fragment2) {","    return;","  }","","  // No need to compare a fragment to itself.","  if (fragment1 === fragment2) {","    return;","  }","","  // Memoize so two fragments are not compared for conflicts more than once.","  if (comparedFragments.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {","    return;","  }","  comparedFragments.add(fragmentName1, fragmentName2, areMutuallyExclusive);","","  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),","      fieldMap1 = _getReferencedFieldsA2[0],","      fragmentNames1 = _getReferencedFieldsA2[1];","","  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),","      fieldMap2 = _getReferencedFieldsA3[0],","      fragmentNames2 = _getReferencedFieldsA3[1];","","  // (F) First, collect all conflicts between these two collections of fields","  // (not including any nested fragments).","","","  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fieldMap2);","","  // (G) Then collect conflicts between the first fragment and any nested","  // fragments spread in the second fragment.","  for (var j = 0; j < fragmentNames2.length; j++) {","    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);","  }","","  // (G) Then collect conflicts between the second fragment and any nested","  // fragments spread in the first fragment.","  for (var i = 0; i < fragmentNames1.length; i++) {","    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentNames1[i], fragmentName2);","  }","}","","// Find all conflicts found between two selection sets, including those found","// via spreading in fragments. Called when determining if conflicts exist","// between the sub-fields of two overlapping fields.","function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {","  var conflicts = [];","","  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),","      fieldMap1 = _getFieldsAndFragment2[0],","      fragmentNames1 = _getFieldsAndFragment2[1];","","  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),","      fieldMap2 = _getFieldsAndFragment3[0],","      fragmentNames2 = _getFieldsAndFragment3[1];","","  // (H) First, collect all conflicts between these two collections of field.","","","  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fieldMap2);","","  // (I) Then collect conflicts between the first collection of fields and","  // those referenced by each fragment name associated with the second.","  for (var j = 0; j < fragmentNames2.length; j++) {","    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);","  }","","  // (I) Then collect conflicts between the second collection of fields and","  // those referenced by each fragment name associated with the first.","  for (var i = 0; i < fragmentNames1.length; i++) {","    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);","  }","","  // (J) Also collect conflicts between any fragment names by the first and","  // fragment names by the second. This compares each item in the first set of","  // names to each item in the second set of names.","  for (var _i = 0; _i < fragmentNames1.length; _i++) {","    for (var _j = 0; _j < fragmentNames2.length; _j++) {","      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);","    }","  }","  return conflicts;","}","","// Collect all Conflicts \"within\" one collection of fields.","function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, fieldMap) {","  // A field map is a keyed collection, where each key represents a response","  // name and the value at that key is a list of all fields which provide that","  // response name. For every response name, if there are multiple fields, they","  // must be compared to find a potential conflict.","  Object.keys(fieldMap).forEach(function (responseName) {","    var fields = fieldMap[responseName];","    // This compares every field in the list to every other field in this list","    // (except to itself). If the list only has one item, nothing needs to","    // be compared.","    if (fields.length > 1) {","      for (var i = 0; i < fields.length; i++) {","        for (var j = i + 1; j < fields.length; j++) {","          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, false, // within one collection is never mutually exclusive","          responseName, fields[i], fields[j]);","          if (conflict) {","            conflicts.push(conflict);","          }","        }","      }","    }","  });","}","","// Collect all Conflicts between two collections of fields. This is similar to,","// but different from the `collectConflictsWithin` function above. This check","// assumes that `collectConflictsWithin` has already been called on each","// provided collection of fields. This is true because this validator traverses","// each individual selection set.","function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {","  // A field map is a keyed collection, where each key represents a response","  // name and the value at that key is a list of all fields which provide that","  // response name. For any response name which appears in both provided field","  // maps, each field from the first field map must be compared to every field","  // in the second field map to find potential conflicts.","  Object.keys(fieldMap1).forEach(function (responseName) {","    var fields2 = fieldMap2[responseName];","    if (fields2) {","      var fields1 = fieldMap1[responseName];","      for (var i = 0; i < fields1.length; i++) {","        for (var j = 0; j < fields2.length; j++) {","          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);","          if (conflict) {","            conflicts.push(conflict);","          }","        }","      }","    }","  });","}","","// Determines if there is a conflict between two particular fields, including","// comparing their sub-fields.","function findConflict(context, cachedFieldsAndFragmentNames, comparedFragments, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {","  var parentType1 = field1[0],","      node1 = field1[1],","      def1 = field1[2];","  var parentType2 = field2[0],","      node2 = field2[1],","      def2 = field2[2];","","  // If it is known that two fields could not possibly apply at the same","  // time, due to the parent types, then it is safe to permit them to diverge","  // in aliased field or arguments used as they will not present any ambiguity","  // by differing.","  // It is known that two parent types could never overlap if they are","  // different Object types. Interface or Union types might overlap - if not","  // in the current state of the schema, then perhaps in some future version,","  // thus may not safely diverge.","","  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && parentType1 instanceof _definition.GraphQLObjectType && parentType2 instanceof _definition.GraphQLObjectType;","","  // The return type for each field.","  var type1 = def1 && def1.type;","  var type2 = def2 && def2.type;","","  if (!areMutuallyExclusive) {","    // Two aliases must refer to the same field.","    var name1 = node1.name.value;","    var name2 = node2.name.value;","    if (name1 !== name2) {","      return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];","    }","","    // Two field calls must have the same arguments.","    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {","      return [[responseName, 'they have differing arguments'], [node1], [node2]];","    }","  }","","  if (type1 && type2 && doTypesConflict(type1, type2)) {","    return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];","  }","","  // Collect and compare sub-fields. Use the same \"visited fragment names\" list","  // for both collections so fields in a fragment reference are never","  // compared to themselves.","  var selectionSet1 = node1.selectionSet;","  var selectionSet2 = node2.selectionSet;","  if (selectionSet1 && selectionSet2) {","    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragments, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);","    return subfieldConflicts(conflicts, responseName, node1, node2);","  }","}","","function sameArguments(arguments1, arguments2) {","  if (arguments1.length !== arguments2.length) {","    return false;","  }","  return arguments1.every(function (argument1) {","    var argument2 = (0, _find2.default)(arguments2, function (argument) {","      return argument.name.value === argument1.name.value;","    });","    if (!argument2) {","      return false;","    }","    return sameValue(argument1.value, argument2.value);","  });","}","","function sameValue(value1, value2) {","  return !value1 && !value2 || (0, _printer.print)(value1) === (0, _printer.print)(value2);","}","","// Two types conflict if both types could not apply to a value simultaneously.","// Composite types are ignored as their individual field types will be compared","// later recursively. However List and Non-Null types must match.","function doTypesConflict(type1, type2) {","  if (type1 instanceof _definition.GraphQLList) {","    return type2 instanceof _definition.GraphQLList ? doTypesConflict(type1.ofType, type2.ofType) : true;","  }","  if (type2 instanceof _definition.GraphQLList) {","    return type1 instanceof _definition.GraphQLList ? doTypesConflict(type1.ofType, type2.ofType) : true;","  }","  if (type1 instanceof _definition.GraphQLNonNull) {","    return type2 instanceof _definition.GraphQLNonNull ? doTypesConflict(type1.ofType, type2.ofType) : true;","  }","  if (type2 instanceof _definition.GraphQLNonNull) {","    return type1 instanceof _definition.GraphQLNonNull ? doTypesConflict(type1.ofType, type2.ofType) : true;","  }","  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {","    return type1 !== type2;","  }","  return false;","}","","// Given a selection set, return the collection of fields (a mapping of response","// name to field nodes and definitions) as well as a list of fragment names","// referenced via fragment spreads.","function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {","  var cached = cachedFieldsAndFragmentNames.get(selectionSet);","  if (!cached) {","    var nodeAndDefs = {};","    var fragmentNames = {};","    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);","    cached = [nodeAndDefs, Object.keys(fragmentNames)];","    cachedFieldsAndFragmentNames.set(selectionSet, cached);","  }","  return cached;","}","","// Given a reference to a fragment, return the represented collection of fields","// as well as a list of nested fragment names referenced via fragment spreads.","function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {","  // Short-circuit building a type from the node if possible.","  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);","  if (cached) {","    return cached;","  }","","  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);","  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);","}","","function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {","  for (var i = 0; i < selectionSet.selections.length; i++) {","    var selection = selectionSet.selections[i];","    switch (selection.kind) {","      case _kinds.FIELD:","        var fieldName = selection.name.value;","        var fieldDef = void 0;","        if (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType) {","          fieldDef = parentType.getFields()[fieldName];","        }","        var responseName = selection.alias ? selection.alias.value : fieldName;","        if (!nodeAndDefs[responseName]) {","          nodeAndDefs[responseName] = [];","        }","        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);","        break;","      case _kinds.FRAGMENT_SPREAD:","        fragmentNames[selection.name.value] = true;","        break;","      case _kinds.INLINE_FRAGMENT:","        var typeCondition = selection.typeCondition;","        var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;","        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);","        break;","    }","  }","}","","// Given a series of Conflicts which occurred between two sub-fields, generate","// a single Conflict.","function subfieldConflicts(conflicts, responseName, node1, node2) {","  if (conflicts.length > 0) {","    return [[responseName, conflicts.map(function (_ref3) {","      var reason = _ref3[0];","      return reason;","    })], conflicts.reduce(function (allFields, _ref4) {","      var fields1 = _ref4[1];","      return allFields.concat(fields1);","    }, [node1]), conflicts.reduce(function (allFields, _ref5) {","      var fields2 = _ref5[2];","      return allFields.concat(fields2);","    }, [node2])];","  }","}","","/**"," * A way to keep track of pairs of things when the ordering of the pair does"," * not matter. We do this by maintaining a sort of double adjacency sets."," */","","var PairSet = function () {","  function PairSet() {","    _classCallCheck(this, PairSet);","","    this._data = Object.create(null);","  }","","  PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {","    var first = this._data[a];","    var result = first && first[b];","    if (result === undefined) {","      return false;","    }","    // areMutuallyExclusive being false is a superset of being true,","    // hence if we want to know if this PairSet \"has\" these two with no","    // exclusivity, we have to ensure it was added as such.","    if (areMutuallyExclusive === false) {","      return result === false;","    }","    return true;","  };","","  PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {","    _pairSetAdd(this._data, a, b, areMutuallyExclusive);","    _pairSetAdd(this._data, b, a, areMutuallyExclusive);","  };","","  return PairSet;","}();","","function _pairSetAdd(data, a, b, areMutuallyExclusive) {","  var map = data[a];","  if (!map) {","    map = Object.create(null);","    data[a] = map;","  }","  map[b] = areMutuallyExclusive;","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"15":1,"17":1,"19":1,"21":1,"23":1,"25":1,"35":1,"36":0,"39":1,"40":0,"41":0,"42":0,"44":0,"47":0,"57":1,"61":0,"66":0,"68":0,"70":0,"71":0,"72":0,"77":0,"149":1,"150":0,"152":0,"160":0,"164":0,"165":0,"170":0,"171":0,"174":0,"179":1,"180":0,"181":0,"182":0,"185":0,"193":0,"197":0,"198":0,"204":1,"205":0,"206":0,"207":0,"208":0,"212":0,"213":0,"217":0,"218":0,"220":0,"222":0,"226":0,"234":0,"238":0,"239":0,"244":0,"245":0,"252":1,"253":0,"255":0,"259":0,"266":0,"270":0,"271":0,"276":0,"277":0,"283":0,"284":0,"285":0,"288":0,"292":1,"297":0,"298":0,"302":0,"303":0,"304":0,"305":0,"307":0,"308":0,"321":1,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"345":1,"346":0,"349":0,"362":0,"365":0,"366":0,"368":0,"370":0,"371":0,"372":0,"373":0,"377":0,"378":0,"382":0,"383":0,"389":0,"390":0,"391":0,"392":0,"393":0,"397":1,"398":0,"399":0,"401":0,"402":0,"403":0,"405":0,"406":0,"408":0,"412":1,"413":0,"419":1,"420":0,"421":0,"423":0,"424":0,"426":0,"427":0,"429":0,"430":0,"432":0,"433":0,"435":0,"441":1,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"450":0,"455":1,"457":0,"458":0,"459":0,"462":0,"463":0,"466":1,"467":0,"468":0,"469":0,"471":0,"472":0,"473":0,"474":0,"476":0,"477":0,"478":0,"480":0,"481":0,"483":0,"484":0,"486":0,"487":0,"488":0,"489":0,"496":1,"497":0,"498":0,"499":0,"500":0,"502":0,"503":0,"505":0,"506":0,"516":1,"517":1,"518":0,"520":0,"523":1,"524":0,"525":0,"526":0,"527":0,"532":0,"533":0,"535":0,"538":1,"539":0,"540":0,"543":1,"546":1,"547":0,"548":0,"549":0,"550":0,"552":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueInputFieldNames.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/rules/UniqueInputFieldNames.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"duplicateInputFieldMessage","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":47}}},"2":{"name":"UniqueInputFieldNames","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":40}}},"3":{"name":"enter","line":36,"loc":{"start":{"line":36,"column":13},"end":{"line":36,"column":30}}},"4":{"name":"leave","line":40,"loc":{"start":{"line":40,"column":13},"end":{"line":40,"column":30}}},"5":{"name":"ObjectField","line":44,"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":64}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":54}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"5":{"start":{"line":20,"column":0},"end":{"line":22,"column":1}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":72}},"7":{"start":{"line":30,"column":0},"end":{"line":54,"column":1}},"8":{"start":{"line":31,"column":2},"end":{"line":31,"column":26}},"9":{"start":{"line":32,"column":2},"end":{"line":32,"column":39}},"10":{"start":{"line":34,"column":2},"end":{"line":53,"column":4}},"11":{"start":{"line":37,"column":8},"end":{"line":37,"column":40}},"12":{"start":{"line":38,"column":8},"end":{"line":38,"column":41}},"13":{"start":{"line":41,"column":8},"end":{"line":41,"column":42}},"14":{"start":{"line":45,"column":6},"end":{"line":45,"column":38}},"15":{"start":{"line":46,"column":6},"end":{"line":50,"column":7}},"16":{"start":{"line":47,"column":8},"end":{"line":47,"column":128}},"17":{"start":{"line":49,"column":8},"end":{"line":49,"column":42}},"18":{"start":{"line":51,"column":6},"end":{"line":51,"column":19}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.duplicateInputFieldMessage = duplicateInputFieldMessage;","exports.UniqueInputFieldNames = UniqueInputFieldNames;","","var _error = require('../../error');","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function duplicateInputFieldMessage(fieldName) {","  return 'There can be only one input field named \"' + fieldName + '\".';","}","","/**"," * Unique input field names"," *"," * A GraphQL input object value is only valid if all supplied fields are"," * uniquely named."," */","function UniqueInputFieldNames(context) {","  var knownNameStack = [];","  var knownNames = Object.create(null);","","  return {","    ObjectValue: {","      enter: function enter() {","        knownNameStack.push(knownNames);","        knownNames = Object.create(null);","      },","      leave: function leave() {","        knownNames = knownNameStack.pop();","      }","    },","    ObjectField: function ObjectField(node) {","      var fieldName = node.name.value;","      if (knownNames[fieldName]) {","        context.reportError(new _error.GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));","      } else {","        knownNames[fieldName] = node.name;","      }","      return false;","    }","  };","}"],"l":{"3":1,"6":1,"7":1,"9":1,"20":1,"21":0,"30":1,"31":0,"32":0,"34":0,"37":0,"38":0,"41":0,"45":0,"46":0,"47":0,"49":0,"51":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/execution/execute.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/execution/execute.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":3,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":1,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":1,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":1,"183":0,"184":1,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":0,"199":0,"200":0,"201":1,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":1,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":1,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":1,"259":0,"260":0,"261":0,"262":0,"263":0,"264":1,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":1,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":1,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":1,"291":0,"292":1,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":1,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":1,"318":0,"319":0,"320":0,"321":0,"322":0,"323":1,"324":0,"325":0,"326":1,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[3,0],"6":[3,3],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0]},"f":{"1":1,"2":3,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},"fnMap":{"1":{"name":"_interopRequireWildcard","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":38}}},"2":{"name":"_interopRequireDefault","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":37}}},"3":{"name":"execute","line":100,"loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":91}}},"4":{"name":"(anonymous_4)","line":119,"loc":{"start":{"line":119,"column":21},"end":{"line":119,"column":40}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":21},"end":{"line":121,"column":38}}},"6":{"name":"(anonymous_6)","line":127,"loc":{"start":{"line":127,"column":10},"end":{"line":127,"column":26}}},"7":{"name":"responsePathAsArray","line":139,"loc":{"start":{"line":139,"column":0},"end":{"line":139,"column":35}}},"8":{"name":"addPath","line":149,"loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":28}}},"9":{"name":"buildExecutionContext","line":159,"loc":{"start":{"line":159,"column":0},"end":{"line":159,"column":108}}},"10":{"name":"(anonymous_10)","line":163,"loc":{"start":{"line":163,"column":31},"end":{"line":163,"column":53}}},"11":{"name":"executeOperation","line":203,"loc":{"start":{"line":203,"column":0},"end":{"line":203,"column":60}}},"12":{"name":"getOperationRootType","line":218,"loc":{"start":{"line":218,"column":0},"end":{"line":218,"column":49}}},"13":{"name":"executeFieldsSerially","line":243,"loc":{"start":{"line":243,"column":0},"end":{"line":243,"column":82}}},"14":{"name":"(anonymous_14)","line":244,"loc":{"start":{"line":244,"column":36},"end":{"line":244,"column":73}}},"15":{"name":"(anonymous_15)","line":245,"loc":{"start":{"line":245,"column":28},"end":{"line":245,"column":47}}},"16":{"name":"(anonymous_16)","line":254,"loc":{"start":{"line":254,"column":28},"end":{"line":254,"column":54}}},"17":{"name":"executeFields","line":269,"loc":{"start":{"line":269,"column":0},"end":{"line":269,"column":74}}},"18":{"name":"(anonymous_18)","line":272,"loc":{"start":{"line":272,"column":48},"end":{"line":272,"column":81}}},"19":{"name":"collectFields","line":306,"loc":{"start":{"line":306,"column":0},"end":{"line":306,"column":92}}},"20":{"name":"shouldIncludeNode","line":347,"loc":{"start":{"line":347,"column":0},"end":{"line":347,"column":51}}},"21":{"name":"(anonymous_21)","line":348,"loc":{"start":{"line":348,"column":63},"end":{"line":348,"column":84}}},"22":{"name":"(anonymous_22)","line":360,"loc":{"start":{"line":360,"column":66},"end":{"line":360,"column":87}}},"23":{"name":"doesFragmentConditionMatch","line":378,"loc":{"start":{"line":378,"column":0},"end":{"line":378,"column":64}}},"24":{"name":"promiseForObject","line":401,"loc":{"start":{"line":401,"column":0},"end":{"line":401,"column":34}}},"25":{"name":"(anonymous_25)","line":403,"loc":{"start":{"line":403,"column":35},"end":{"line":403,"column":51}}},"26":{"name":"(anonymous_26)","line":406,"loc":{"start":{"line":406,"column":45},"end":{"line":406,"column":63}}},"27":{"name":"(anonymous_27)","line":407,"loc":{"start":{"line":407,"column":25},"end":{"line":407,"column":61}}},"28":{"name":"getFieldEntryKey","line":417,"loc":{"start":{"line":417,"column":0},"end":{"line":417,"column":32}}},"29":{"name":"resolveField","line":427,"loc":{"start":{"line":427,"column":0},"end":{"line":427,"column":72}}},"30":{"name":"resolveOrError","line":468,"loc":{"start":{"line":468,"column":0},"end":{"line":468,"column":91}}},"31":{"name":"completeValueCatchingError","line":485,"loc":{"start":{"line":485,"column":0},"end":{"line":485,"column":92}}},"32":{"name":"(anonymous_32)","line":502,"loc":{"start":{"line":502,"column":37},"end":{"line":502,"column":54}}},"33":{"name":"completeValueWithLocatedError","line":518,"loc":{"start":{"line":518,"column":0},"end":{"line":518,"column":95}}},"34":{"name":"(anonymous_34)","line":523,"loc":{"start":{"line":523,"column":37},"end":{"line":523,"column":54}}},"35":{"name":"completeValue","line":554,"loc":{"start":{"line":554,"column":0},"end":{"line":554,"column":79}}},"36":{"name":"(anonymous_36)","line":558,"loc":{"start":{"line":558,"column":24},"end":{"line":558,"column":44}}},"37":{"name":"completeListValue","line":613,"loc":{"start":{"line":613,"column":0},"end":{"line":613,"column":83}}},"38":{"name":"(anonymous_38)","line":621,"loc":{"start":{"line":621,"column":32},"end":{"line":621,"column":55}}},"39":{"name":"completeLeafValue","line":640,"loc":{"start":{"line":640,"column":0},"end":{"line":640,"column":47}}},"40":{"name":"completeAbstractValue","line":653,"loc":{"start":{"line":653,"column":0},"end":{"line":653,"column":87}}},"41":{"name":"(anonymous_41)","line":658,"loc":{"start":{"line":658,"column":24},"end":{"line":658,"column":55}}},"42":{"name":"ensureValidRuntimeType","line":666,"loc":{"start":{"line":666,"column":0},"end":{"line":666,"column":101}}},"43":{"name":"completeObjectValue","line":683,"loc":{"start":{"line":683,"column":0},"end":{"line":683,"column":85}}},"44":{"name":"(anonymous_44)","line":692,"loc":{"start":{"line":692,"column":26},"end":{"line":692,"column":52}}},"45":{"name":"invalidReturnTypeError","line":708,"loc":{"start":{"line":708,"column":0},"end":{"line":708,"column":64}}},"46":{"name":"collectAndExecuteSubfields","line":712,"loc":{"start":{"line":712,"column":0},"end":{"line":712,"column":92}}},"47":{"name":"defaultResolveTypeFn","line":731,"loc":{"start":{"line":731,"column":0},"end":{"line":731,"column":66}}},"48":{"name":"(anonymous_48)","line":751,"loc":{"start":{"line":751,"column":53},"end":{"line":751,"column":80}}},"49":{"name":"defaultFieldResolver","line":767,"loc":{"start":{"line":767,"column":58},"end":{"line":767,"column":117}}},"50":{"name":"getPromise","line":782,"loc":{"start":{"line":782,"column":0},"end":{"line":782,"column":27}}},"51":{"name":"getFieldDef","line":797,"loc":{"start":{"line":797,"column":0},"end":{"line":797,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":41}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":26}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":50}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":34}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":33}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":39}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":43}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":49}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":53}},"11":{"start":{"line":22,"column":0},"end":{"line":22,"column":49}},"12":{"start":{"line":24,"column":0},"end":{"line":24,"column":53}},"13":{"start":{"line":26,"column":0},"end":{"line":26,"column":55}},"14":{"start":{"line":28,"column":0},"end":{"line":28,"column":42}},"15":{"start":{"line":30,"column":0},"end":{"line":30,"column":43}},"16":{"start":{"line":32,"column":0},"end":{"line":32,"column":34}},"17":{"start":{"line":34,"column":0},"end":{"line":34,"column":48}},"18":{"start":{"line":36,"column":0},"end":{"line":36,"column":40}},"19":{"start":{"line":38,"column":0},"end":{"line":38,"column":54}},"20":{"start":{"line":40,"column":0},"end":{"line":40,"column":48}},"21":{"start":{"line":42,"column":0},"end":{"line":42,"column":269}},"22":{"start":{"line":42,"column":40},"end":{"line":42,"column":267}},"23":{"start":{"line":42,"column":69},"end":{"line":42,"column":80}},"24":{"start":{"line":42,"column":90},"end":{"line":42,"column":106}},"25":{"start":{"line":42,"column":107},"end":{"line":42,"column":228}},"26":{"start":{"line":42,"column":126},"end":{"line":42,"column":226}},"27":{"start":{"line":42,"column":149},"end":{"line":42,"column":224}},"28":{"start":{"line":42,"column":201},"end":{"line":42,"column":224}},"29":{"start":{"line":42,"column":229},"end":{"line":42,"column":250}},"30":{"start":{"line":42,"column":251},"end":{"line":42,"column":265}},"31":{"start":{"line":44,"column":0},"end":{"line":44,"column":97}},"32":{"start":{"line":44,"column":39},"end":{"line":44,"column":95}},"33":{"start":{"line":100,"column":0},"end":{"line":133,"column":1}},"34":{"start":{"line":101,"column":2},"end":{"line":101,"column":58}},"35":{"start":{"line":102,"column":2},"end":{"line":102,"column":62}},"36":{"start":{"line":103,"column":2},"end":{"line":103,"column":223}},"37":{"start":{"line":106,"column":2},"end":{"line":106,"column":237}},"38":{"start":{"line":110,"column":2},"end":{"line":110,"column":112}},"39":{"start":{"line":119,"column":2},"end":{"line":132,"column":5}},"40":{"start":{"line":120,"column":4},"end":{"line":120,"column":69}},"41":{"start":{"line":125,"column":4},"end":{"line":125,"column":31}},"42":{"start":{"line":126,"column":4},"end":{"line":126,"column":16}},"43":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"44":{"start":{"line":129,"column":6},"end":{"line":129,"column":28}},"45":{"start":{"line":131,"column":4},"end":{"line":131,"column":50}},"46":{"start":{"line":139,"column":0},"end":{"line":147,"column":1}},"47":{"start":{"line":140,"column":2},"end":{"line":140,"column":21}},"48":{"start":{"line":141,"column":2},"end":{"line":141,"column":18}},"49":{"start":{"line":142,"column":2},"end":{"line":145,"column":3}},"50":{"start":{"line":143,"column":4},"end":{"line":143,"column":29}},"51":{"start":{"line":144,"column":4},"end":{"line":144,"column":21}},"52":{"start":{"line":146,"column":2},"end":{"line":146,"column":29}},"53":{"start":{"line":149,"column":0},"end":{"line":151,"column":1}},"54":{"start":{"line":150,"column":2},"end":{"line":150,"column":34}},"55":{"start":{"line":159,"column":0},"end":{"line":198,"column":1}},"56":{"start":{"line":160,"column":2},"end":{"line":160,"column":18}},"57":{"start":{"line":161,"column":2},"end":{"line":161,"column":25}},"58":{"start":{"line":162,"column":2},"end":{"line":162,"column":38}},"59":{"start":{"line":163,"column":2},"end":{"line":179,"column":5}},"60":{"start":{"line":164,"column":4},"end":{"line":178,"column":5}},"61":{"start":{"line":166,"column":8},"end":{"line":168,"column":9}},"62":{"start":{"line":167,"column":10},"end":{"line":167,"column":110}},"63":{"start":{"line":169,"column":8},"end":{"line":171,"column":9}},"64":{"start":{"line":170,"column":10},"end":{"line":170,"column":33}},"65":{"start":{"line":172,"column":8},"end":{"line":172,"column":14}},"66":{"start":{"line":174,"column":8},"end":{"line":174,"column":54}},"67":{"start":{"line":175,"column":8},"end":{"line":175,"column":14}},"68":{"start":{"line":177,"column":8},"end":{"line":177,"column":126}},"69":{"start":{"line":180,"column":2},"end":{"line":186,"column":3}},"70":{"start":{"line":181,"column":4},"end":{"line":185,"column":5}},"71":{"start":{"line":182,"column":6},"end":{"line":182,"column":88}},"72":{"start":{"line":184,"column":6},"end":{"line":184,"column":66}},"73":{"start":{"line":187,"column":2},"end":{"line":187,"column":124}},"74":{"start":{"line":189,"column":2},"end":{"line":197,"column":4}},"75":{"start":{"line":203,"column":0},"end":{"line":213,"column":1}},"76":{"start":{"line":204,"column":2},"end":{"line":204,"column":64}},"77":{"start":{"line":205,"column":2},"end":{"line":205,"column":113}},"78":{"start":{"line":207,"column":2},"end":{"line":207,"column":23}},"79":{"start":{"line":209,"column":2},"end":{"line":211,"column":3}},"80":{"start":{"line":210,"column":4},"end":{"line":210,"column":76}},"81":{"start":{"line":212,"column":2},"end":{"line":212,"column":66}},"82":{"start":{"line":218,"column":0},"end":{"line":237,"column":1}},"83":{"start":{"line":219,"column":2},"end":{"line":236,"column":3}},"84":{"start":{"line":221,"column":6},"end":{"line":221,"column":35}},"85":{"start":{"line":223,"column":6},"end":{"line":223,"column":50}},"86":{"start":{"line":224,"column":6},"end":{"line":226,"column":7}},"87":{"start":{"line":225,"column":8},"end":{"line":225,"column":93}},"88":{"start":{"line":227,"column":6},"end":{"line":227,"column":26}},"89":{"start":{"line":229,"column":6},"end":{"line":229,"column":58}},"90":{"start":{"line":230,"column":6},"end":{"line":232,"column":7}},"91":{"start":{"line":231,"column":8},"end":{"line":231,"column":97}},"92":{"start":{"line":233,"column":6},"end":{"line":233,"column":30}},"93":{"start":{"line":235,"column":6},"end":{"line":235,"column":106}},"94":{"start":{"line":243,"column":0},"end":{"line":263,"column":1}},"95":{"start":{"line":244,"column":2},"end":{"line":262,"column":26}},"96":{"start":{"line":245,"column":4},"end":{"line":261,"column":7}},"97":{"start":{"line":246,"column":6},"end":{"line":246,"column":44}},"98":{"start":{"line":247,"column":6},"end":{"line":247,"column":50}},"99":{"start":{"line":248,"column":6},"end":{"line":248,"column":92}},"100":{"start":{"line":249,"column":6},"end":{"line":251,"column":7}},"101":{"start":{"line":250,"column":8},"end":{"line":250,"column":23}},"102":{"start":{"line":252,"column":6},"end":{"line":252,"column":39}},"103":{"start":{"line":253,"column":6},"end":{"line":258,"column":7}},"104":{"start":{"line":254,"column":8},"end":{"line":257,"column":11}},"105":{"start":{"line":255,"column":10},"end":{"line":255,"column":49}},"106":{"start":{"line":256,"column":10},"end":{"line":256,"column":25}},"107":{"start":{"line":259,"column":6},"end":{"line":259,"column":37}},"108":{"start":{"line":260,"column":6},"end":{"line":260,"column":21}},"109":{"start":{"line":269,"column":0},"end":{"line":296,"column":1}},"110":{"start":{"line":270,"column":2},"end":{"line":270,"column":30}},"111":{"start":{"line":272,"column":2},"end":{"line":284,"column":26}},"112":{"start":{"line":273,"column":4},"end":{"line":273,"column":42}},"113":{"start":{"line":274,"column":4},"end":{"line":274,"column":48}},"114":{"start":{"line":275,"column":4},"end":{"line":275,"column":90}},"115":{"start":{"line":276,"column":4},"end":{"line":278,"column":5}},"116":{"start":{"line":277,"column":6},"end":{"line":277,"column":21}},"117":{"start":{"line":279,"column":4},"end":{"line":279,"column":35}},"118":{"start":{"line":280,"column":4},"end":{"line":282,"column":5}},"119":{"start":{"line":281,"column":6},"end":{"line":281,"column":29}},"120":{"start":{"line":283,"column":4},"end":{"line":283,"column":19}},"121":{"start":{"line":287,"column":2},"end":{"line":289,"column":3}},"122":{"start":{"line":288,"column":4},"end":{"line":288,"column":24}},"123":{"start":{"line":295,"column":2},"end":{"line":295,"column":40}},"124":{"start":{"line":306,"column":0},"end":{"line":341,"column":1}},"125":{"start":{"line":307,"column":2},"end":{"line":339,"column":3}},"126":{"start":{"line":308,"column":4},"end":{"line":308,"column":47}},"127":{"start":{"line":309,"column":4},"end":{"line":338,"column":5}},"128":{"start":{"line":311,"column":8},"end":{"line":313,"column":9}},"129":{"start":{"line":312,"column":10},"end":{"line":312,"column":19}},"130":{"start":{"line":314,"column":8},"end":{"line":314,"column":48}},"131":{"start":{"line":315,"column":8},"end":{"line":317,"column":9}},"132":{"start":{"line":316,"column":10},"end":{"line":316,"column":29}},"133":{"start":{"line":318,"column":8},"end":{"line":318,"column":38}},"134":{"start":{"line":319,"column":8},"end":{"line":319,"column":14}},"135":{"start":{"line":321,"column":8},"end":{"line":323,"column":9}},"136":{"start":{"line":322,"column":10},"end":{"line":322,"column":19}},"137":{"start":{"line":324,"column":8},"end":{"line":324,"column":101}},"138":{"start":{"line":325,"column":8},"end":{"line":325,"column":14}},"139":{"start":{"line":327,"column":8},"end":{"line":327,"column":44}},"140":{"start":{"line":328,"column":8},"end":{"line":330,"column":9}},"141":{"start":{"line":329,"column":10},"end":{"line":329,"column":19}},"142":{"start":{"line":331,"column":8},"end":{"line":331,"column":46}},"143":{"start":{"line":332,"column":8},"end":{"line":332,"column":54}},"144":{"start":{"line":333,"column":8},"end":{"line":335,"column":9}},"145":{"start":{"line":334,"column":10},"end":{"line":334,"column":19}},"146":{"start":{"line":336,"column":8},"end":{"line":336,"column":100}},"147":{"start":{"line":337,"column":8},"end":{"line":337,"column":14}},"148":{"start":{"line":340,"column":2},"end":{"line":340,"column":16}},"149":{"start":{"line":347,"column":0},"end":{"line":373,"column":1}},"150":{"start":{"line":348,"column":2},"end":{"line":350,"column":5}},"151":{"start":{"line":349,"column":4},"end":{"line":349,"column":74}},"152":{"start":{"line":351,"column":2},"end":{"line":358,"column":3}},"153":{"start":{"line":352,"column":4},"end":{"line":353,"column":39}},"154":{"start":{"line":355,"column":4},"end":{"line":357,"column":5}},"155":{"start":{"line":356,"column":6},"end":{"line":356,"column":19}},"156":{"start":{"line":360,"column":2},"end":{"line":362,"column":5}},"157":{"start":{"line":361,"column":4},"end":{"line":361,"column":77}},"158":{"start":{"line":363,"column":2},"end":{"line":370,"column":3}},"159":{"start":{"line":364,"column":4},"end":{"line":365,"column":43}},"160":{"start":{"line":367,"column":4},"end":{"line":369,"column":5}},"161":{"start":{"line":368,"column":6},"end":{"line":368,"column":19}},"162":{"start":{"line":372,"column":2},"end":{"line":372,"column":14}},"163":{"start":{"line":378,"column":0},"end":{"line":392,"column":1}},"164":{"start":{"line":379,"column":2},"end":{"line":379,"column":49}},"165":{"start":{"line":380,"column":2},"end":{"line":382,"column":3}},"166":{"start":{"line":381,"column":4},"end":{"line":381,"column":16}},"167":{"start":{"line":383,"column":2},"end":{"line":383,"column":92}},"168":{"start":{"line":384,"column":2},"end":{"line":386,"column":3}},"169":{"start":{"line":385,"column":4},"end":{"line":385,"column":16}},"170":{"start":{"line":387,"column":2},"end":{"line":390,"column":3}},"171":{"start":{"line":388,"column":4},"end":{"line":388,"column":39}},"172":{"start":{"line":389,"column":4},"end":{"line":389,"column":64}},"173":{"start":{"line":391,"column":2},"end":{"line":391,"column":15}},"174":{"start":{"line":401,"column":0},"end":{"line":412,"column":1}},"175":{"start":{"line":402,"column":2},"end":{"line":402,"column":33}},"176":{"start":{"line":403,"column":2},"end":{"line":405,"column":5}},"177":{"start":{"line":404,"column":4},"end":{"line":404,"column":24}},"178":{"start":{"line":406,"column":2},"end":{"line":411,"column":5}},"179":{"start":{"line":407,"column":4},"end":{"line":410,"column":28}},"180":{"start":{"line":408,"column":6},"end":{"line":408,"column":38}},"181":{"start":{"line":409,"column":6},"end":{"line":409,"column":28}},"182":{"start":{"line":417,"column":0},"end":{"line":419,"column":1}},"183":{"start":{"line":418,"column":2},"end":{"line":418,"column":57}},"184":{"start":{"line":427,"column":0},"end":{"line":464,"column":1}},"185":{"start":{"line":428,"column":2},"end":{"line":428,"column":32}},"186":{"start":{"line":429,"column":2},"end":{"line":429,"column":39}},"187":{"start":{"line":431,"column":2},"end":{"line":431,"column":71}},"188":{"start":{"line":432,"column":2},"end":{"line":434,"column":3}},"189":{"start":{"line":433,"column":4},"end":{"line":433,"column":11}},"190":{"start":{"line":436,"column":2},"end":{"line":436,"column":33}},"191":{"start":{"line":437,"column":2},"end":{"line":437,"column":59}},"192":{"start":{"line":442,"column":2},"end":{"line":442,"column":40}},"193":{"start":{"line":446,"column":2},"end":{"line":457,"column":4}},"194":{"start":{"line":461,"column":2},"end":{"line":461,"column":97}},"195":{"start":{"line":463,"column":2},"end":{"line":463,"column":92}},"196":{"start":{"line":468,"column":0},"end":{"line":481,"column":1}},"197":{"start":{"line":469,"column":2},"end":{"line":480,"column":3}},"198":{"start":{"line":473,"column":4},"end":{"line":473,"column":94}},"199":{"start":{"line":475,"column":4},"end":{"line":475,"column":50}},"200":{"start":{"line":479,"column":4},"end":{"line":479,"column":61}},"201":{"start":{"line":485,"column":0},"end":{"line":514,"column":1}},"202":{"start":{"line":488,"column":2},"end":{"line":490,"column":3}},"203":{"start":{"line":489,"column":4},"end":{"line":489,"column":97}},"204":{"start":{"line":494,"column":2},"end":{"line":513,"column":3}},"205":{"start":{"line":495,"column":4},"end":{"line":495,"column":106}},"206":{"start":{"line":496,"column":4},"end":{"line":496,"column":40}},"207":{"start":{"line":497,"column":4},"end":{"line":506,"column":5}},"208":{"start":{"line":502,"column":6},"end":{"line":505,"column":9}},"209":{"start":{"line":503,"column":8},"end":{"line":503,"column":38}},"210":{"start":{"line":504,"column":8},"end":{"line":504,"column":37}},"211":{"start":{"line":507,"column":4},"end":{"line":507,"column":21}},"212":{"start":{"line":511,"column":4},"end":{"line":511,"column":34}},"213":{"start":{"line":512,"column":4},"end":{"line":512,"column":16}},"214":{"start":{"line":518,"column":0},"end":{"line":531,"column":1}},"215":{"start":{"line":519,"column":2},"end":{"line":530,"column":3}},"216":{"start":{"line":520,"column":4},"end":{"line":520,"column":90}},"217":{"start":{"line":521,"column":4},"end":{"line":521,"column":40}},"218":{"start":{"line":522,"column":4},"end":{"line":526,"column":5}},"219":{"start":{"line":523,"column":6},"end":{"line":525,"column":9}},"220":{"start":{"line":524,"column":8},"end":{"line":524,"column":102}},"221":{"start":{"line":527,"column":4},"end":{"line":527,"column":21}},"222":{"start":{"line":529,"column":4},"end":{"line":529,"column":81}},"223":{"start":{"line":554,"column":0},"end":{"line":607,"column":1}},"224":{"start":{"line":556,"column":2},"end":{"line":556,"column":35}},"225":{"start":{"line":557,"column":2},"end":{"line":561,"column":3}},"226":{"start":{"line":558,"column":4},"end":{"line":560,"column":7}},"227":{"start":{"line":559,"column":6},"end":{"line":559,"column":85}},"228":{"start":{"line":564,"column":2},"end":{"line":566,"column":3}},"229":{"start":{"line":565,"column":4},"end":{"line":565,"column":17}},"230":{"start":{"line":570,"column":2},"end":{"line":576,"column":3}},"231":{"start":{"line":571,"column":4},"end":{"line":571,"column":97}},"232":{"start":{"line":572,"column":4},"end":{"line":574,"column":5}},"233":{"start":{"line":573,"column":6},"end":{"line":573,"column":120}},"234":{"start":{"line":575,"column":4},"end":{"line":575,"column":21}},"235":{"start":{"line":579,"column":2},"end":{"line":581,"column":3}},"236":{"start":{"line":580,"column":4},"end":{"line":580,"column":16}},"237":{"start":{"line":584,"column":2},"end":{"line":586,"column":3}},"238":{"start":{"line":585,"column":4},"end":{"line":585,"column":85}},"239":{"start":{"line":590,"column":2},"end":{"line":592,"column":3}},"240":{"start":{"line":591,"column":4},"end":{"line":591,"column":49}},"241":{"start":{"line":596,"column":2},"end":{"line":598,"column":3}},"242":{"start":{"line":597,"column":4},"end":{"line":597,"column":89}},"243":{"start":{"line":601,"column":2},"end":{"line":603,"column":3}},"244":{"start":{"line":602,"column":4},"end":{"line":602,"column":87}},"245":{"start":{"line":606,"column":2},"end":{"line":606,"column":92}},"246":{"start":{"line":613,"column":0},"end":{"line":634,"column":1}},"247":{"start":{"line":614,"column":2},"end":{"line":614,"column":169}},"248":{"start":{"line":618,"column":2},"end":{"line":618,"column":35}},"249":{"start":{"line":619,"column":2},"end":{"line":619,"column":30}},"250":{"start":{"line":620,"column":2},"end":{"line":620,"column":28}},"251":{"start":{"line":621,"column":2},"end":{"line":631,"column":5}},"252":{"start":{"line":624,"column":4},"end":{"line":624,"column":41}},"253":{"start":{"line":625,"column":4},"end":{"line":625,"column":108}},"254":{"start":{"line":627,"column":4},"end":{"line":629,"column":5}},"255":{"start":{"line":628,"column":6},"end":{"line":628,"column":29}},"256":{"start":{"line":630,"column":4},"end":{"line":630,"column":41}},"257":{"start":{"line":633,"column":2},"end":{"line":633,"column":76}},"258":{"start":{"line":640,"column":0},"end":{"line":647,"column":1}},"259":{"start":{"line":641,"column":2},"end":{"line":641,"column":85}},"260":{"start":{"line":642,"column":2},"end":{"line":642,"column":54}},"261":{"start":{"line":643,"column":2},"end":{"line":645,"column":3}},"262":{"start":{"line":644,"column":4},"end":{"line":644,"column":116}},"263":{"start":{"line":646,"column":2},"end":{"line":646,"column":26}},"264":{"start":{"line":653,"column":0},"end":{"line":664,"column":1}},"265":{"start":{"line":654,"column":2},"end":{"line":654,"column":181}},"266":{"start":{"line":656,"column":2},"end":{"line":656,"column":40}},"267":{"start":{"line":657,"column":2},"end":{"line":661,"column":3}},"268":{"start":{"line":658,"column":4},"end":{"line":660,"column":7}},"269":{"start":{"line":659,"column":6},"end":{"line":659,"column":172}},"270":{"start":{"line":663,"column":2},"end":{"line":663,"column":160}},"271":{"start":{"line":666,"column":0},"end":{"line":678,"column":1}},"272":{"start":{"line":667,"column":2},"end":{"line":667,"column":125}},"273":{"start":{"line":669,"column":2},"end":{"line":671,"column":3}},"274":{"start":{"line":670,"column":4},"end":{"line":670,"column":282}},"275":{"start":{"line":673,"column":2},"end":{"line":675,"column":3}},"276":{"start":{"line":674,"column":4},"end":{"line":674,"column":157}},"277":{"start":{"line":677,"column":2},"end":{"line":677,"column":21}},"278":{"start":{"line":683,"column":0},"end":{"line":706,"column":1}},"279":{"start":{"line":687,"column":2},"end":{"line":703,"column":3}},"280":{"start":{"line":688,"column":4},"end":{"line":688,"column":78}},"281":{"start":{"line":690,"column":4},"end":{"line":690,"column":39}},"282":{"start":{"line":691,"column":4},"end":{"line":698,"column":5}},"283":{"start":{"line":692,"column":6},"end":{"line":697,"column":9}},"284":{"start":{"line":693,"column":8},"end":{"line":695,"column":9}},"285":{"start":{"line":694,"column":10},"end":{"line":694,"column":71}},"286":{"start":{"line":696,"column":8},"end":{"line":696,"column":98}},"287":{"start":{"line":700,"column":4},"end":{"line":702,"column":5}},"288":{"start":{"line":701,"column":6},"end":{"line":701,"column":67}},"289":{"start":{"line":705,"column":2},"end":{"line":705,"column":92}},"290":{"start":{"line":708,"column":0},"end":{"line":710,"column":1}},"291":{"start":{"line":709,"column":2},"end":{"line":709,"column":130}},"292":{"start":{"line":712,"column":0},"end":{"line":724,"column":1}},"293":{"start":{"line":714,"column":2},"end":{"line":714,"column":42}},"294":{"start":{"line":715,"column":2},"end":{"line":715,"column":49}},"295":{"start":{"line":716,"column":2},"end":{"line":721,"column":3}},"296":{"start":{"line":717,"column":4},"end":{"line":717,"column":50}},"297":{"start":{"line":718,"column":4},"end":{"line":720,"column":5}},"298":{"start":{"line":719,"column":6},"end":{"line":719,"column":111}},"299":{"start":{"line":723,"column":2},"end":{"line":723,"column":76}},"300":{"start":{"line":731,"column":0},"end":{"line":759,"column":1}},"301":{"start":{"line":732,"column":2},"end":{"line":732,"column":65}},"302":{"start":{"line":733,"column":2},"end":{"line":733,"column":35}},"303":{"start":{"line":735,"column":2},"end":{"line":748,"column":3}},"304":{"start":{"line":736,"column":4},"end":{"line":736,"column":32}},"305":{"start":{"line":738,"column":4},"end":{"line":747,"column":5}},"306":{"start":{"line":739,"column":6},"end":{"line":739,"column":63}},"307":{"start":{"line":741,"column":6},"end":{"line":741,"column":47}},"308":{"start":{"line":742,"column":6},"end":{"line":746,"column":7}},"309":{"start":{"line":743,"column":8},"end":{"line":743,"column":45}},"310":{"start":{"line":744,"column":13},"end":{"line":746,"column":7}},"311":{"start":{"line":745,"column":8},"end":{"line":745,"column":20}},"312":{"start":{"line":750,"column":2},"end":{"line":758,"column":3}},"313":{"start":{"line":751,"column":4},"end":{"line":757,"column":7}},"314":{"start":{"line":752,"column":6},"end":{"line":756,"column":7}},"315":{"start":{"line":753,"column":8},"end":{"line":755,"column":9}},"316":{"start":{"line":754,"column":10},"end":{"line":754,"column":35}},"317":{"start":{"line":767,"column":0},"end":{"line":776,"column":2}},"318":{"start":{"line":769,"column":2},"end":{"line":775,"column":3}},"319":{"start":{"line":770,"column":4},"end":{"line":770,"column":42}},"320":{"start":{"line":771,"column":4},"end":{"line":773,"column":5}},"321":{"start":{"line":772,"column":6},"end":{"line":772,"column":57}},"322":{"start":{"line":774,"column":4},"end":{"line":774,"column":20}},"323":{"start":{"line":782,"column":0},"end":{"line":786,"column":1}},"324":{"start":{"line":783,"column":2},"end":{"line":785,"column":3}},"325":{"start":{"line":784,"column":4},"end":{"line":784,"column":17}},"326":{"start":{"line":797,"column":0},"end":{"line":806,"column":1}},"327":{"start":{"line":798,"column":2},"end":{"line":804,"column":3}},"328":{"start":{"line":799,"column":4},"end":{"line":799,"column":45}},"329":{"start":{"line":800,"column":9},"end":{"line":804,"column":3}},"330":{"start":{"line":801,"column":4},"end":{"line":801,"column":43}},"331":{"start":{"line":802,"column":9},"end":{"line":804,"column":3}},"332":{"start":{"line":803,"column":4},"end":{"line":803,"column":47}},"333":{"start":{"line":805,"column":2},"end":{"line":805,"column":43}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":40},"end":{"line":42,"column":40}},{"start":{"line":42,"column":40},"end":{"line":42,"column":40}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":44},"end":{"line":42,"column":47}},{"start":{"line":42,"column":51},"end":{"line":42,"column":65}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":107},"end":{"line":42,"column":107}},{"start":{"line":42,"column":107},"end":{"line":42,"column":107}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":149},"end":{"line":42,"column":149}},{"start":{"line":42,"column":149},"end":{"line":42,"column":149}}]},"5":{"line":44,"type":"cond-expr","locations":[{"start":{"line":44,"column":70},"end":{"line":44,"column":73}},{"start":{"line":44,"column":76},"end":{"line":44,"column":94}}]},"6":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":46},"end":{"line":44,"column":49}},{"start":{"line":44,"column":53},"end":{"line":44,"column":67}}]},"7":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":27},"end":{"line":106,"column":42}},{"start":{"line":106,"column":46},"end":{"line":106,"column":80}}]},"8":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"9":{"line":164,"type":"switch","locations":[{"start":{"line":165,"column":6},"end":{"line":172,"column":14}},{"start":{"line":173,"column":6},"end":{"line":175,"column":14}},{"start":{"line":176,"column":6},"end":{"line":177,"column":126}}]},"10":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":8},"end":{"line":166,"column":8}},{"start":{"line":166,"column":8},"end":{"line":166,"column":8}}]},"11":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":12},"end":{"line":166,"column":26}},{"start":{"line":166,"column":30},"end":{"line":166,"column":39}}]},"12":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":8}},{"start":{"line":169,"column":8},"end":{"line":169,"column":8}}]},"13":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":26}},{"start":{"line":169,"column":30},"end":{"line":169,"column":45}},{"start":{"line":169,"column":49},"end":{"line":169,"column":88}}]},"14":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":2},"end":{"line":180,"column":2}},{"start":{"line":180,"column":2},"end":{"line":180,"column":2}}]},"15":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"16":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":62},"end":{"line":187,"column":91}},{"start":{"line":187,"column":95},"end":{"line":187,"column":97}}]},"17":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":99},"end":{"line":187,"column":116}},{"start":{"line":187,"column":120},"end":{"line":187,"column":122}}]},"18":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":2},"end":{"line":209,"column":2}},{"start":{"line":209,"column":2},"end":{"line":209,"column":2}}]},"19":{"line":219,"type":"switch","locations":[{"start":{"line":220,"column":4},"end":{"line":221,"column":35}},{"start":{"line":222,"column":4},"end":{"line":227,"column":26}},{"start":{"line":228,"column":4},"end":{"line":233,"column":30}},{"start":{"line":234,"column":4},"end":{"line":235,"column":106}}]},"20":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":6}},{"start":{"line":224,"column":6},"end":{"line":224,"column":6}}]},"21":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":6},"end":{"line":230,"column":6}},{"start":{"line":230,"column":6},"end":{"line":230,"column":6}}]},"22":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":6},"end":{"line":249,"column":6}},{"start":{"line":249,"column":6},"end":{"line":249,"column":6}}]},"23":{"line":253,"type":"if","locations":[{"start":{"line":253,"column":6},"end":{"line":253,"column":6}},{"start":{"line":253,"column":6},"end":{"line":253,"column":6}}]},"24":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"25":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":4},"end":{"line":280,"column":4}},{"start":{"line":280,"column":4},"end":{"line":280,"column":4}}]},"26":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":2},"end":{"line":287,"column":2}},{"start":{"line":287,"column":2},"end":{"line":287,"column":2}}]},"27":{"line":309,"type":"switch","locations":[{"start":{"line":310,"column":6},"end":{"line":319,"column":14}},{"start":{"line":320,"column":6},"end":{"line":325,"column":14}},{"start":{"line":326,"column":6},"end":{"line":337,"column":14}}]},"28":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":8},"end":{"line":311,"column":8}},{"start":{"line":311,"column":8},"end":{"line":311,"column":8}}]},"29":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":8},"end":{"line":315,"column":8}},{"start":{"line":315,"column":8},"end":{"line":315,"column":8}}]},"30":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":8},"end":{"line":321,"column":8}},{"start":{"line":321,"column":8},"end":{"line":321,"column":8}}]},"31":{"line":321,"type":"binary-expr","locations":[{"start":{"line":321,"column":12},"end":{"line":321,"column":64}},{"start":{"line":321,"column":68},"end":{"line":321,"column":131}}]},"32":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":8},"end":{"line":328,"column":8}},{"start":{"line":328,"column":8},"end":{"line":328,"column":8}}]},"33":{"line":328,"type":"binary-expr","locations":[{"start":{"line":328,"column":12},"end":{"line":328,"column":42}},{"start":{"line":328,"column":46},"end":{"line":328,"column":98}}]},"34":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":8},"end":{"line":333,"column":8}},{"start":{"line":333,"column":8},"end":{"line":333,"column":8}}]},"35":{"line":333,"type":"binary-expr","locations":[{"start":{"line":333,"column":12},"end":{"line":333,"column":21}},{"start":{"line":333,"column":25},"end":{"line":333,"column":87}}]},"36":{"line":348,"type":"binary-expr","locations":[{"start":{"line":348,"column":17},"end":{"line":348,"column":27}},{"start":{"line":348,"column":31},"end":{"line":350,"column":4}}]},"37":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":2},"end":{"line":351,"column":2}},{"start":{"line":351,"column":2},"end":{"line":351,"column":2}}]},"38":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":4},"end":{"line":355,"column":4}},{"start":{"line":355,"column":4},"end":{"line":355,"column":4}}]},"39":{"line":360,"type":"binary-expr","locations":[{"start":{"line":360,"column":20},"end":{"line":360,"column":30}},{"start":{"line":360,"column":34},"end":{"line":362,"column":4}}]},"40":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":2},"end":{"line":363,"column":2}},{"start":{"line":363,"column":2},"end":{"line":363,"column":2}}]},"41":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":4},"end":{"line":367,"column":4}},{"start":{"line":367,"column":4},"end":{"line":367,"column":4}}]},"42":{"line":380,"type":"if","locations":[{"start":{"line":380,"column":2},"end":{"line":380,"column":2}},{"start":{"line":380,"column":2},"end":{"line":380,"column":2}}]},"43":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":2},"end":{"line":384,"column":2}},{"start":{"line":384,"column":2},"end":{"line":384,"column":2}}]},"44":{"line":387,"type":"if","locations":[{"start":{"line":387,"column":2},"end":{"line":387,"column":2}},{"start":{"line":387,"column":2},"end":{"line":387,"column":2}}]},"45":{"line":418,"type":"cond-expr","locations":[{"start":{"line":418,"column":22},"end":{"line":418,"column":38}},{"start":{"line":418,"column":41},"end":{"line":418,"column":56}}]},"46":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":2},"end":{"line":432,"column":2}},{"start":{"line":432,"column":2},"end":{"line":432,"column":2}}]},"47":{"line":437,"type":"binary-expr","locations":[{"start":{"line":437,"column":18},"end":{"line":437,"column":34}},{"start":{"line":437,"column":38},"end":{"line":437,"column":58}}]},"48":{"line":479,"type":"cond-expr","locations":[{"start":{"line":479,"column":36},"end":{"line":479,"column":41}},{"start":{"line":479,"column":44},"end":{"line":479,"column":60}}]},"49":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":2},"end":{"line":488,"column":2}},{"start":{"line":488,"column":2},"end":{"line":488,"column":2}}]},"50":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":4},"end":{"line":497,"column":4}},{"start":{"line":497,"column":4},"end":{"line":497,"column":4}}]},"51":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":4},"end":{"line":522,"column":4}},{"start":{"line":522,"column":4},"end":{"line":522,"column":4}}]},"52":{"line":557,"type":"if","locations":[{"start":{"line":557,"column":2},"end":{"line":557,"column":2}},{"start":{"line":557,"column":2},"end":{"line":557,"column":2}}]},"53":{"line":564,"type":"if","locations":[{"start":{"line":564,"column":2},"end":{"line":564,"column":2}},{"start":{"line":564,"column":2},"end":{"line":564,"column":2}}]},"54":{"line":570,"type":"if","locations":[{"start":{"line":570,"column":2},"end":{"line":570,"column":2}},{"start":{"line":570,"column":2},"end":{"line":570,"column":2}}]},"55":{"line":572,"type":"if","locations":[{"start":{"line":572,"column":4},"end":{"line":572,"column":4}},{"start":{"line":572,"column":4},"end":{"line":572,"column":4}}]},"56":{"line":579,"type":"if","locations":[{"start":{"line":579,"column":2},"end":{"line":579,"column":2}},{"start":{"line":579,"column":2},"end":{"line":579,"column":2}}]},"57":{"line":584,"type":"if","locations":[{"start":{"line":584,"column":2},"end":{"line":584,"column":2}},{"start":{"line":584,"column":2},"end":{"line":584,"column":2}}]},"58":{"line":590,"type":"if","locations":[{"start":{"line":590,"column":2},"end":{"line":590,"column":2}},{"start":{"line":590,"column":2},"end":{"line":590,"column":2}}]},"59":{"line":590,"type":"binary-expr","locations":[{"start":{"line":590,"column":6},"end":{"line":590,"column":57}},{"start":{"line":590,"column":61},"end":{"line":590,"column":110}}]},"60":{"line":596,"type":"if","locations":[{"start":{"line":596,"column":2},"end":{"line":596,"column":2}},{"start":{"line":596,"column":2},"end":{"line":596,"column":2}}]},"61":{"line":596,"type":"binary-expr","locations":[{"start":{"line":596,"column":6},"end":{"line":596,"column":60}},{"start":{"line":596,"column":64},"end":{"line":596,"column":114}}]},"62":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":2},"end":{"line":601,"column":2}},{"start":{"line":601,"column":2},"end":{"line":601,"column":2}}]},"63":{"line":627,"type":"if","locations":[{"start":{"line":627,"column":4},"end":{"line":627,"column":4}},{"start":{"line":627,"column":4},"end":{"line":627,"column":4}}]},"64":{"line":627,"type":"binary-expr","locations":[{"start":{"line":627,"column":8},"end":{"line":627,"column":24}},{"start":{"line":627,"column":28},"end":{"line":627,"column":53}}]},"65":{"line":633,"type":"cond-expr","locations":[{"start":{"line":633,"column":27},"end":{"line":633,"column":56}},{"start":{"line":633,"column":59},"end":{"line":633,"column":75}}]},"66":{"line":643,"type":"if","locations":[{"start":{"line":643,"column":2},"end":{"line":643,"column":2}},{"start":{"line":643,"column":2},"end":{"line":643,"column":2}}]},"67":{"line":654,"type":"cond-expr","locations":[{"start":{"line":654,"column":45},"end":{"line":654,"column":106}},{"start":{"line":654,"column":109},"end":{"line":654,"column":180}}]},"68":{"line":657,"type":"if","locations":[{"start":{"line":657,"column":2},"end":{"line":657,"column":2}},{"start":{"line":657,"column":2},"end":{"line":657,"column":2}}]},"69":{"line":667,"type":"cond-expr","locations":[{"start":{"line":667,"column":60},"end":{"line":667,"column":104}},{"start":{"line":667,"column":107},"end":{"line":667,"column":124}}]},"70":{"line":669,"type":"if","locations":[{"start":{"line":669,"column":2},"end":{"line":669,"column":2}},{"start":{"line":669,"column":2},"end":{"line":669,"column":2}}]},"71":{"line":673,"type":"if","locations":[{"start":{"line":673,"column":2},"end":{"line":673,"column":2}},{"start":{"line":673,"column":2},"end":{"line":673,"column":2}}]},"72":{"line":687,"type":"if","locations":[{"start":{"line":687,"column":2},"end":{"line":687,"column":2}},{"start":{"line":687,"column":2},"end":{"line":687,"column":2}}]},"73":{"line":691,"type":"if","locations":[{"start":{"line":691,"column":4},"end":{"line":691,"column":4}},{"start":{"line":691,"column":4},"end":{"line":691,"column":4}}]},"74":{"line":693,"type":"if","locations":[{"start":{"line":693,"column":8},"end":{"line":693,"column":8}},{"start":{"line":693,"column":8},"end":{"line":693,"column":8}}]},"75":{"line":700,"type":"if","locations":[{"start":{"line":700,"column":4},"end":{"line":700,"column":4}},{"start":{"line":700,"column":4},"end":{"line":700,"column":4}}]},"76":{"line":718,"type":"if","locations":[{"start":{"line":718,"column":4},"end":{"line":718,"column":4}},{"start":{"line":718,"column":4},"end":{"line":718,"column":4}}]},"77":{"line":738,"type":"if","locations":[{"start":{"line":738,"column":4},"end":{"line":738,"column":4}},{"start":{"line":738,"column":4},"end":{"line":738,"column":4}}]},"78":{"line":742,"type":"if","locations":[{"start":{"line":742,"column":6},"end":{"line":742,"column":6}},{"start":{"line":742,"column":6},"end":{"line":742,"column":6}}]},"79":{"line":744,"type":"if","locations":[{"start":{"line":744,"column":13},"end":{"line":744,"column":13}},{"start":{"line":744,"column":13},"end":{"line":744,"column":13}}]},"80":{"line":750,"type":"if","locations":[{"start":{"line":750,"column":2},"end":{"line":750,"column":2}},{"start":{"line":750,"column":2},"end":{"line":750,"column":2}}]},"81":{"line":753,"type":"if","locations":[{"start":{"line":753,"column":8},"end":{"line":753,"column":8}},{"start":{"line":753,"column":8},"end":{"line":753,"column":8}}]},"82":{"line":769,"type":"if","locations":[{"start":{"line":769,"column":2},"end":{"line":769,"column":2}},{"start":{"line":769,"column":2},"end":{"line":769,"column":2}}]},"83":{"line":769,"type":"binary-expr","locations":[{"start":{"line":769,"column":6},"end":{"line":769,"column":32}},{"start":{"line":769,"column":36},"end":{"line":769,"column":64}}]},"84":{"line":771,"type":"if","locations":[{"start":{"line":771,"column":4},"end":{"line":771,"column":4}},{"start":{"line":771,"column":4},"end":{"line":771,"column":4}}]},"85":{"line":783,"type":"if","locations":[{"start":{"line":783,"column":2},"end":{"line":783,"column":2}},{"start":{"line":783,"column":2},"end":{"line":783,"column":2}}]},"86":{"line":783,"type":"binary-expr","locations":[{"start":{"line":783,"column":6},"end":{"line":783,"column":31}},{"start":{"line":783,"column":35},"end":{"line":783,"column":49}},{"start":{"line":783,"column":53},"end":{"line":783,"column":85}}]},"87":{"line":798,"type":"if","locations":[{"start":{"line":798,"column":2},"end":{"line":798,"column":2}},{"start":{"line":798,"column":2},"end":{"line":798,"column":2}}]},"88":{"line":798,"type":"binary-expr","locations":[{"start":{"line":798,"column":6},"end":{"line":798,"column":58}},{"start":{"line":798,"column":62},"end":{"line":798,"column":98}}]},"89":{"line":800,"type":"if","locations":[{"start":{"line":800,"column":9},"end":{"line":800,"column":9}},{"start":{"line":800,"column":9},"end":{"line":800,"column":9}}]},"90":{"line":800,"type":"binary-expr","locations":[{"start":{"line":800,"column":13},"end":{"line":800,"column":63}},{"start":{"line":800,"column":67},"end":{"line":800,"column":103}}]},"91":{"line":802,"type":"if","locations":[{"start":{"line":802,"column":9},"end":{"line":802,"column":9}},{"start":{"line":802,"column":9},"end":{"line":802,"column":9}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.defaultFieldResolver = undefined;","exports.execute = execute;","exports.responsePathAsArray = responsePathAsArray;","","var _iterall = require('iterall');","","var _error = require('../error');","","var _find = require('../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _typeFromAST = require('../utilities/typeFromAST');","","var _kinds = require('../language/kinds');","","var Kind = _interopRequireWildcard(_kinds);","","var _values = require('./values');","","var _definition = require('../type/definition');","","var _schema = require('../type/schema');","","var _introspection = require('../type/introspection');","","var _directives = require('../type/directives');","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Implements the \"Evaluating requests\" section of the GraphQL specification."," *"," * Returns a Promise that will eventually be resolved and never rejected."," *"," * If the arguments to this function do not result in a legal execution context,"," * a GraphQLError will be thrown immediately explaining the invalid input."," */","","","/**"," * Terminology"," *"," * \"Definitions\" are the generic name for top-level statements in the document."," * Examples of this include:"," * 1) Operations (such as a query)"," * 2) Fragments"," *"," * \"Operations\" are a generic name for requests in the document."," * Examples of this include:"," * 1) query,"," * 2) mutation"," *"," * \"Selections\" are the definitions that can appear legally and at"," * single level of the query. These include:"," * 1) field references e.g \"a\""," * 2) fragment \"spreads\" e.g. \"...c\""," * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\""," */","","/**"," * Data that must be available at all points during query execution."," *"," * Namely, schema of the type system that is currently executing,"," * and the fragments defined in the query document"," */","","","/**"," * The result of GraphQL execution."," *"," *   - `data` is the result of a successful execution of the query."," *   - `errors` is included when any errors occurred as a non-empty array."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function execute(schema, document, rootValue, contextValue, variableValues, operationName) {","  (0, _invariant2.default)(schema, 'Must provide schema');","  (0, _invariant2.default)(document, 'Must provide document');","  (0, _invariant2.default)(schema instanceof _schema.GraphQLSchema, 'Schema must be an instance of GraphQLSchema. Also ensure that there are ' + 'not multiple versions of GraphQL installed in your node_modules directory.');","","  // Variables, if provided, must be an object.","  (0, _invariant2.default)(!variableValues || typeof variableValues === 'object', 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.');","","  // If a valid context cannot be created due to incorrect arguments,","  // this will throw an error.","  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName);","","  // Return a Promise that will eventually resolve to the data described by","  // The \"Response\" section of the GraphQL specification.","  //","  // If errors are encountered while executing a GraphQL field, only that","  // field and its descendants will be omitted, and sibling fields will still","  // be executed. An execution which encounters errors will still result in a","  // resolved Promise.","  return new Promise(function (resolve) {","    resolve(executeOperation(context, context.operation, rootValue));","  }).then(undefined, function (error) {","    // Errors from sub-fields of a NonNull type may propagate to the top level,","    // at which point we still log the error and null the parent field, which","    // in this case is the entire response.","    context.errors.push(error);","    return null;","  }).then(function (data) {","    if (!context.errors.length) {","      return { data: data };","    }","    return { data: data, errors: context.errors };","  });","}","","/**"," * Given a ResponsePath (found in the `path` entry in the information provided"," * as the last argument to a field resolver), return an Array of the path keys."," */","function responsePathAsArray(path) {","  var flattened = [];","  var curr = path;","  while (curr) {","    flattened.push(curr.key);","    curr = curr.prev;","  }","  return flattened.reverse();","}","","function addPath(prev, key) {","  return { prev: prev, key: key };","}","","/**"," * Constructs a ExecutionContext object from the arguments passed to"," * execute, which we will pass throughout the other execution methods."," *"," * Throws a GraphQLError if a valid execution context cannot be created."," */","function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName) {","  var errors = [];","  var operation = void 0;","  var fragments = Object.create(null);","  document.definitions.forEach(function (definition) {","    switch (definition.kind) {","      case Kind.OPERATION_DEFINITION:","        if (!operationName && operation) {","          throw new _error.GraphQLError('Must provide operation name if query contains multiple operations.');","        }","        if (!operationName || definition.name && definition.name.value === operationName) {","          operation = definition;","        }","        break;","      case Kind.FRAGMENT_DEFINITION:","        fragments[definition.name.value] = definition;","        break;","      default:","        throw new _error.GraphQLError('GraphQL cannot execute a request containing a ' + definition.kind + '.', [definition]);","    }","  });","  if (!operation) {","    if (operationName) {","      throw new _error.GraphQLError('Unknown operation named \"' + operationName + '\".');","    } else {","      throw new _error.GraphQLError('Must provide an operation.');","    }","  }","  var variableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});","","  return {","    schema: schema,","    fragments: fragments,","    rootValue: rootValue,","    contextValue: contextValue,","    operation: operation,","    variableValues: variableValues,","    errors: errors","  };","}","","/**"," * Implements the \"Evaluating operations\" section of the spec."," */","function executeOperation(exeContext, operation, rootValue) {","  var type = getOperationRootType(exeContext.schema, operation);","  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));","","  var path = undefined;","","  if (operation.operation === 'mutation') {","    return executeFieldsSerially(exeContext, type, rootValue, path, fields);","  }","  return executeFields(exeContext, type, rootValue, path, fields);","}","","/**"," * Extracts the root type of the operation from the schema."," */","function getOperationRootType(schema, operation) {","  switch (operation.operation) {","    case 'query':","      return schema.getQueryType();","    case 'mutation':","      var mutationType = schema.getMutationType();","      if (!mutationType) {","        throw new _error.GraphQLError('Schema is not configured for mutations', [operation]);","      }","      return mutationType;","    case 'subscription':","      var subscriptionType = schema.getSubscriptionType();","      if (!subscriptionType) {","        throw new _error.GraphQLError('Schema is not configured for subscriptions', [operation]);","      }","      return subscriptionType;","    default:","      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions', [operation]);","  }","}","","/**"," * Implements the \"Evaluating selection sets\" section of the spec"," * for \"write\" mode."," */","function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {","  return Object.keys(fields).reduce(function (prevPromise, responseName) {","    return prevPromise.then(function (results) {","      var fieldNodes = fields[responseName];","      var fieldPath = addPath(path, responseName);","      var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);","      if (result === undefined) {","        return results;","      }","      var promise = getPromise(result);","      if (promise) {","        return promise.then(function (resolvedResult) {","          results[responseName] = resolvedResult;","          return results;","        });","      }","      results[responseName] = result;","      return results;","    });","  }, Promise.resolve({}));","}","","/**"," * Implements the \"Evaluating selection sets\" section of the spec"," * for \"read\" mode."," */","function executeFields(exeContext, parentType, sourceValue, path, fields) {","  var containsPromise = false;","","  var finalResults = Object.keys(fields).reduce(function (results, responseName) {","    var fieldNodes = fields[responseName];","    var fieldPath = addPath(path, responseName);","    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);","    if (result === undefined) {","      return results;","    }","    results[responseName] = result;","    if (getPromise(result)) {","      containsPromise = true;","    }","    return results;","  }, Object.create(null));","","  // If there are no promises, we can just return the object","  if (!containsPromise) {","    return finalResults;","  }","","  // Otherwise, results is a map from field name to the result","  // of resolving that field, which is possibly a promise. Return","  // a promise that will return this same map, but with any","  // promises replaced with the values they resolved to.","  return promiseForObject(finalResults);","}","","/**"," * Given a selectionSet, adds all of the fields in that selection to"," * the passed in map of fields, and returns it at the end."," *"," * CollectFields requires the \"runtime type\" of an object. For a field which"," * returns and Interface or Union type, the \"runtime type\" will be the actual"," * Object type returned by that field."," */","function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {","  for (var i = 0; i < selectionSet.selections.length; i++) {","    var selection = selectionSet.selections[i];","    switch (selection.kind) {","      case Kind.FIELD:","        if (!shouldIncludeNode(exeContext, selection.directives)) {","          continue;","        }","        var _name = getFieldEntryKey(selection);","        if (!fields[_name]) {","          fields[_name] = [];","        }","        fields[_name].push(selection);","        break;","      case Kind.INLINE_FRAGMENT:","        if (!shouldIncludeNode(exeContext, selection.directives) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {","          continue;","        }","        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);","        break;","      case Kind.FRAGMENT_SPREAD:","        var fragName = selection.name.value;","        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection.directives)) {","          continue;","        }","        visitedFragmentNames[fragName] = true;","        var fragment = exeContext.fragments[fragName];","        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {","          continue;","        }","        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);","        break;","    }","  }","  return fields;","}","","/**"," * Determines if a field should be included based on the @include and @skip"," * directives, where @skip has higher precidence than @include."," */","function shouldIncludeNode(exeContext, directives) {","  var skipNode = directives && (0, _find2.default)(directives, function (directive) {","    return directive.name.value === _directives.GraphQLSkipDirective.name;","  });","  if (skipNode) {","    var _getArgumentValues = (0, _values.getArgumentValues)(_directives.GraphQLSkipDirective, skipNode, exeContext.variableValues),","        skipIf = _getArgumentValues.if;","","    if (skipIf === true) {","      return false;","    }","  }","","  var includeNode = directives && (0, _find2.default)(directives, function (directive) {","    return directive.name.value === _directives.GraphQLIncludeDirective.name;","  });","  if (includeNode) {","    var _getArgumentValues2 = (0, _values.getArgumentValues)(_directives.GraphQLIncludeDirective, includeNode, exeContext.variableValues),","        includeIf = _getArgumentValues2.if;","","    if (includeIf === false) {","      return false;","    }","  }","","  return true;","}","","/**"," * Determines if a fragment is applicable to the given type."," */","function doesFragmentConditionMatch(exeContext, fragment, type) {","  var typeConditionNode = fragment.typeCondition;","  if (!typeConditionNode) {","    return true;","  }","  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);","  if (conditionalType === type) {","    return true;","  }","  if ((0, _definition.isAbstractType)(conditionalType)) {","    var abstractType = conditionalType;","    return exeContext.schema.isPossibleType(abstractType, type);","  }","  return false;","}","","/**"," * This function transforms a JS object `{[key: string]: Promise<T>}` into"," * a `Promise<{[key: string]: T}>`"," *"," * This is akin to bluebird's `Promise.props`, but implemented only using"," * `Promise.all` so it will work with any implementation of ES6 promises."," */","function promiseForObject(object) {","  var keys = Object.keys(object);","  var valuesAndPromises = keys.map(function (name) {","    return object[name];","  });","  return Promise.all(valuesAndPromises).then(function (values) {","    return values.reduce(function (resolvedObject, value, i) {","      resolvedObject[keys[i]] = value;","      return resolvedObject;","    }, Object.create(null));","  });","}","","/**"," * Implements the logic to compute the key of a given field's entry"," */","function getFieldEntryKey(node) {","  return node.alias ? node.alias.value : node.name.value;","}","","/**"," * Resolves the field on the given source object. In particular, this"," * figures out the value that the field returns by calling its resolve function,"," * then calls completeValue to complete promises, serialize scalars, or execute"," * the sub-selection-set for objects."," */","function resolveField(exeContext, parentType, source, fieldNodes, path) {","  var fieldNode = fieldNodes[0];","  var fieldName = fieldNode.name.value;","","  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);","  if (!fieldDef) {","    return;","  }","","  var returnType = fieldDef.type;","  var resolveFn = fieldDef.resolve || defaultFieldResolver;","","  // The resolve function's optional third argument is a context value that","  // is provided to every resolve function within an execution. It is commonly","  // used to represent an authenticated user, or request-specific caches.","  var context = exeContext.contextValue;","","  // The resolve function's optional fourth argument is a collection of","  // information about the current execution state.","  var info = {","    fieldName: fieldName,","    fieldNodes: fieldNodes,","    returnType: returnType,","    parentType: parentType,","    path: path,","    schema: exeContext.schema,","    fragments: exeContext.fragments,","    rootValue: exeContext.rootValue,","    operation: exeContext.operation,","    variableValues: exeContext.variableValues","  };","","  // Get the resolve function, regardless of if its result is normal","  // or abrupt (error).","  var result = resolveOrError(exeContext, fieldDef, fieldNode, resolveFn, source, context, info);","","  return completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result);","}","","// Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`","// function. Returns the result of resolveFn or the abrupt-return Error object.","function resolveOrError(exeContext, fieldDef, fieldNode, resolveFn, source, context, info) {","  try {","    // Build a JS object of arguments from the field.arguments AST, using the","    // variables scope to fulfill any variable references.","    // TODO: find a way to memoize, in case this field is within a List type.","    var args = (0, _values.getArgumentValues)(fieldDef, fieldNode, exeContext.variableValues);","","    return resolveFn(source, args, context, info);","  } catch (error) {","    // Sometimes a non-error is thrown, wrap it as an Error for a","    // consistent interface.","    return error instanceof Error ? error : new Error(error);","  }","}","","// This is a small wrapper around completeValue which detects and logs errors","// in the execution context.","function completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {","  // If the field type is non-nullable, then it is resolved without any","  // protection from errors, however it still properly locates the error.","  if (returnType instanceof _definition.GraphQLNonNull) {","    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);","  }","","  // Otherwise, error protection is applied, logging the error and resolving","  // a null value for this field if one is encountered.","  try {","    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);","    var promise = getPromise(completed);","    if (promise) {","      // If `completeValueWithLocatedError` returned a rejected promise, log","      // the rejection error and resolve to null.","      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"","      // to take a second callback for the error case.","      return promise.then(undefined, function (error) {","        exeContext.errors.push(error);","        return Promise.resolve(null);","      });","    }","    return completed;","  } catch (error) {","    // If `completeValueWithLocatedError` returned abruptly (threw an error),","    // log the error and return null.","    exeContext.errors.push(error);","    return null;","  }","}","","// This is a small wrapper around completeValue which annotates errors with","// location information.","function completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {","  try {","    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);","    var promise = getPromise(completed);","    if (promise) {","      return promise.then(undefined, function (error) {","        return Promise.reject((0, _error.locatedError)(error, fieldNodes, responsePathAsArray(path)));","      });","    }","    return completed;","  } catch (error) {","    throw (0, _error.locatedError)(error, fieldNodes, responsePathAsArray(path));","  }","}","","/**"," * Implements the instructions for completeValue as defined in the"," * \"Field entries\" section of the spec."," *"," * If the field type is Non-Null, then this recursively completes the value"," * for the inner type. It throws a field error if that completion returns null,"," * as per the \"Nullability\" section of the spec."," *"," * If the field type is a List, then this recursively completes the value"," * for the inner type on each item in the list."," *"," * If the field type is a Scalar or Enum, ensures the completed value is a legal"," * value of the type by calling the `serialize` method of GraphQL type"," * definition."," *"," * If the field is an abstract type, determine the runtime type of the value"," * and then complete based on that type"," *"," * Otherwise, the field type expects a sub-selection set, and will complete the"," * value by evaluating all sub-selections."," */","function completeValue(exeContext, returnType, fieldNodes, info, path, result) {","  // If result is a Promise, apply-lift over completeValue.","  var promise = getPromise(result);","  if (promise) {","    return promise.then(function (resolved) {","      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);","    });","  }","","  // If result is an Error, throw a located error.","  if (result instanceof Error) {","    throw result;","  }","","  // If field type is NonNull, complete for inner type, and throw field error","  // if result is null.","  if (returnType instanceof _definition.GraphQLNonNull) {","    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);","    if (completed === null) {","      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');","    }","    return completed;","  }","","  // If result value is null-ish (null, undefined, or NaN) then return null.","  if ((0, _isNullish2.default)(result)) {","    return null;","  }","","  // If field type is List, complete each item in the list with the inner type","  if (returnType instanceof _definition.GraphQLList) {","    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);","  }","","  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,","  // returning null if serialization is not possible.","  if (returnType instanceof _definition.GraphQLScalarType || returnType instanceof _definition.GraphQLEnumType) {","    return completeLeafValue(returnType, result);","  }","","  // If field type is an abstract type, Interface or Union, determine the","  // runtime Object type and complete for that type.","  if (returnType instanceof _definition.GraphQLInterfaceType || returnType instanceof _definition.GraphQLUnionType) {","    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);","  }","","  // If field type is Object, execute and complete all sub-selections.","  if (returnType instanceof _definition.GraphQLObjectType) {","    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);","  }","","  // Not reachable. All possible output types have been considered.","  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');","}","","/**"," * Complete a list value by completing each item in the list with the"," * inner type"," */","function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {","  (0, _invariant2.default)((0, _iterall.isCollection)(result), 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.');","","  // This is specified as a simple map, however we're optimizing the path","  // where the list contains no Promises by avoiding creating another Promise.","  var itemType = returnType.ofType;","  var containsPromise = false;","  var completedResults = [];","  (0, _iterall.forEach)(result, function (item, index) {","    // No need to modify the info object containing the path,","    // since from here on it is not ever accessed by resolver functions.","    var fieldPath = addPath(path, index);","    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);","","    if (!containsPromise && getPromise(completedItem)) {","      containsPromise = true;","    }","    completedResults.push(completedItem);","  });","","  return containsPromise ? Promise.all(completedResults) : completedResults;","}","","/**"," * Complete a Scalar or Enum by serializing to a valid value, returning"," * null if serialization is not possible."," */","function completeLeafValue(returnType, result) {","  (0, _invariant2.default)(returnType.serialize, 'Missing serialize method on type');","  var serializedResult = returnType.serialize(result);","  if ((0, _isNullish2.default)(serializedResult)) {","    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));","  }","  return serializedResult;","}","","/**"," * Complete a value of an abstract type by determining the runtime object type"," * of that value, then complete the value for that type."," */","function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {","  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);","","  var promise = getPromise(runtimeType);","  if (promise) {","    return promise.then(function (resolvedRuntimeType) {","      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);","    });","  }","","  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);","}","","function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {","  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;","","  if (!(runtimeType instanceof _definition.GraphQLObjectType)) {","    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\".'), fieldNodes);","  }","","  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {","    throw new _error.GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);","  }","","  return runtimeType;","}","","/**"," * Complete an Object value by executing all sub-selections."," */","function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {","  // If there is an isTypeOf predicate function, call it with the","  // current result. If isTypeOf returns false, then raise an error rather","  // than continuing execution.","  if (returnType.isTypeOf) {","    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);","","    var promise = getPromise(isTypeOf);","    if (promise) {","      return promise.then(function (isTypeOfResult) {","        if (!isTypeOfResult) {","          throw invalidReturnTypeError(returnType, result, fieldNodes);","        }","        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);","      });","    }","","    if (!isTypeOf) {","      throw invalidReturnTypeError(returnType, result, fieldNodes);","    }","  }","","  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);","}","","function invalidReturnTypeError(returnType, result, fieldNodes) {","  return new _error.GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);","}","","function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {","  // Collect sub-fields to execute to complete this value.","  var subFieldNodes = Object.create(null);","  var visitedFragmentNames = Object.create(null);","  for (var i = 0; i < fieldNodes.length; i++) {","    var selectionSet = fieldNodes[i].selectionSet;","    if (selectionSet) {","      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);","    }","  }","","  return executeFields(exeContext, returnType, result, path, subFieldNodes);","}","","/**"," * If a resolveType function is not given, then a default resolve behavior is"," * used which tests each possible type for the abstract type by calling"," * isTypeOf for the object being coerced, returning the first type that matches."," */","function defaultResolveTypeFn(value, context, info, abstractType) {","  var possibleTypes = info.schema.getPossibleTypes(abstractType);","  var promisedIsTypeOfResults = [];","","  for (var i = 0; i < possibleTypes.length; i++) {","    var type = possibleTypes[i];","","    if (type.isTypeOf) {","      var isTypeOfResult = type.isTypeOf(value, context, info);","","      var promise = getPromise(isTypeOfResult);","      if (promise) {","        promisedIsTypeOfResults[i] = promise;","      } else if (isTypeOfResult) {","        return type;","      }","    }","  }","","  if (promisedIsTypeOfResults.length) {","    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {","      for (var _i = 0; _i < isTypeOfResults.length; _i++) {","        if (isTypeOfResults[_i]) {","          return possibleTypes[_i];","        }","      }","    });","  }","}","","/**"," * If a resolve function is not given, then a default resolve behavior is used"," * which takes the property of the source object of the same name as the field"," * and returns it as the result, or if it's a function, returns the result"," * of calling that function while passing along args and context."," */","var defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {","  // ensure source is a value for which property access is acceptable.","  if (typeof source === 'object' || typeof source === 'function') {","    var property = source[info.fieldName];","    if (typeof property === 'function') {","      return source[info.fieldName](args, context, info);","    }","    return property;","  }","};","","/**"," * Only returns the value if it acts like a Promise, i.e. has a \"then\" function,"," * otherwise returns void."," */","function getPromise(value) {","  if (typeof value === 'object' && value !== null && typeof value.then === 'function') {","    return value;","  }","}","","/**"," * This method looks up the field on the given type defintion."," * It has special casing for the two introspection fields, __schema"," * and __typename. __typename is special because it can always be"," * queried as a field, even in situations where no other fields"," * are allowed, like on a Union. __schema could get automatically"," * added to the query type, but that would require mutating type"," * definitions, which would cause issues."," */","function getFieldDef(schema, parentType, fieldName) {","  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {","    return _introspection.SchemaMetaFieldDef;","  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {","    return _introspection.TypeMetaFieldDef;","  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {","    return _introspection.TypeNameMetaFieldDef;","  }","  return parentType.getFields()[fieldName];","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":1,"34":1,"36":1,"38":1,"40":1,"42":1,"44":3,"100":1,"101":0,"102":0,"103":0,"106":0,"110":0,"119":0,"120":0,"125":0,"126":0,"128":0,"129":0,"131":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"146":0,"149":1,"150":0,"159":1,"160":0,"161":0,"162":0,"163":0,"164":0,"166":0,"167":0,"169":0,"170":0,"172":0,"174":0,"175":0,"177":0,"180":0,"181":0,"182":0,"184":0,"187":0,"189":0,"203":1,"204":0,"205":0,"207":0,"209":0,"210":0,"212":0,"218":1,"219":0,"221":0,"223":0,"224":0,"225":0,"227":0,"229":0,"230":0,"231":0,"233":0,"235":0,"243":1,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"252":0,"253":0,"254":0,"255":0,"256":0,"259":0,"260":0,"269":1,"270":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"279":0,"280":0,"281":0,"283":0,"287":0,"288":0,"295":0,"306":1,"307":0,"308":0,"309":0,"311":0,"312":0,"314":0,"315":0,"316":0,"318":0,"319":0,"321":0,"322":0,"324":0,"325":0,"327":0,"328":0,"329":0,"331":0,"332":0,"333":0,"334":0,"336":0,"337":0,"340":0,"347":1,"348":0,"349":0,"351":0,"352":0,"355":0,"356":0,"360":0,"361":0,"363":0,"364":0,"367":0,"368":0,"372":0,"378":1,"379":0,"380":0,"381":0,"383":0,"384":0,"385":0,"387":0,"388":0,"389":0,"391":0,"401":1,"402":0,"403":0,"404":0,"406":0,"407":0,"408":0,"409":0,"417":1,"418":0,"427":1,"428":0,"429":0,"431":0,"432":0,"433":0,"436":0,"437":0,"442":0,"446":0,"461":0,"463":0,"468":1,"469":0,"473":0,"475":0,"479":0,"485":1,"488":0,"489":0,"494":0,"495":0,"496":0,"497":0,"502":0,"503":0,"504":0,"507":0,"511":0,"512":0,"518":1,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"527":0,"529":0,"554":1,"556":0,"557":0,"558":0,"559":0,"564":0,"565":0,"570":0,"571":0,"572":0,"573":0,"575":0,"579":0,"580":0,"584":0,"585":0,"590":0,"591":0,"596":0,"597":0,"601":0,"602":0,"606":0,"613":1,"614":0,"618":0,"619":0,"620":0,"621":0,"624":0,"625":0,"627":0,"628":0,"630":0,"633":0,"640":1,"641":0,"642":0,"643":0,"644":0,"646":0,"653":1,"654":0,"656":0,"657":0,"658":0,"659":0,"663":0,"666":1,"667":0,"669":0,"670":0,"673":0,"674":0,"677":0,"683":1,"687":0,"688":0,"690":0,"691":0,"692":0,"693":0,"694":0,"696":0,"700":0,"701":0,"705":0,"708":1,"709":0,"712":1,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"723":0,"731":1,"732":0,"733":0,"735":0,"736":0,"738":0,"739":0,"741":0,"742":0,"743":0,"744":0,"745":0,"750":0,"751":0,"752":0,"753":0,"754":0,"767":1,"769":0,"770":0,"771":0,"772":0,"774":0,"782":1,"783":0,"784":0,"797":1,"798":0,"799":0,"800":0,"801":0,"802":0,"803":0,"805":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/execution/values.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/execution/values.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":4,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[4,0],"6":[4,4],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0]},"f":{"1":1,"2":4,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"_interopRequireWildcard","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":38}}},"2":{"name":"_interopRequireDefault","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":37}}},"3":{"name":"getVariableValues","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":56}}},"4":{"name":"getArgumentValues","line":103,"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":54}}},"5":{"name":"(anonymous_5)","line":110,"loc":{"start":{"line":110,"column":51},"end":{"line":110,"column":66}}},"6":{"name":"coerceValue","line":154,"loc":{"start":{"line":154,"column":0},"end":{"line":154,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":46}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":34}},"5":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":49}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":53}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":49}},"9":{"start":{"line":19,"column":0},"end":{"line":19,"column":53}},"10":{"start":{"line":21,"column":0},"end":{"line":21,"column":49}},"11":{"start":{"line":23,"column":0},"end":{"line":23,"column":53}},"12":{"start":{"line":25,"column":0},"end":{"line":25,"column":43}},"13":{"start":{"line":27,"column":0},"end":{"line":27,"column":47}},"14":{"start":{"line":29,"column":0},"end":{"line":29,"column":55}},"15":{"start":{"line":31,"column":0},"end":{"line":31,"column":57}},"16":{"start":{"line":33,"column":0},"end":{"line":33,"column":61}},"17":{"start":{"line":35,"column":0},"end":{"line":35,"column":71}},"18":{"start":{"line":37,"column":0},"end":{"line":37,"column":42}},"19":{"start":{"line":39,"column":0},"end":{"line":39,"column":43}},"20":{"start":{"line":41,"column":0},"end":{"line":41,"column":46}},"21":{"start":{"line":43,"column":0},"end":{"line":43,"column":48}},"22":{"start":{"line":45,"column":0},"end":{"line":45,"column":269}},"23":{"start":{"line":45,"column":40},"end":{"line":45,"column":267}},"24":{"start":{"line":45,"column":69},"end":{"line":45,"column":80}},"25":{"start":{"line":45,"column":90},"end":{"line":45,"column":106}},"26":{"start":{"line":45,"column":107},"end":{"line":45,"column":228}},"27":{"start":{"line":45,"column":126},"end":{"line":45,"column":226}},"28":{"start":{"line":45,"column":149},"end":{"line":45,"column":224}},"29":{"start":{"line":45,"column":201},"end":{"line":45,"column":224}},"30":{"start":{"line":45,"column":229},"end":{"line":45,"column":250}},"31":{"start":{"line":45,"column":251},"end":{"line":45,"column":265}},"32":{"start":{"line":47,"column":0},"end":{"line":47,"column":97}},"33":{"start":{"line":47,"column":39},"end":{"line":47,"column":95}},"34":{"start":{"line":54,"column":0},"end":{"line":87,"column":1}},"35":{"start":{"line":55,"column":2},"end":{"line":55,"column":42}},"36":{"start":{"line":56,"column":2},"end":{"line":85,"column":3}},"37":{"start":{"line":57,"column":4},"end":{"line":57,"column":36}},"38":{"start":{"line":58,"column":4},"end":{"line":58,"column":49}},"39":{"start":{"line":59,"column":4},"end":{"line":59,"column":73}},"40":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"41":{"start":{"line":61,"column":6},"end":{"line":61,"column":202}},"42":{"start":{"line":63,"column":4},"end":{"line":63,"column":22}},"43":{"start":{"line":65,"column":4},"end":{"line":65,"column":32}},"44":{"start":{"line":66,"column":4},"end":{"line":84,"column":5}},"45":{"start":{"line":67,"column":6},"end":{"line":67,"column":49}},"46":{"start":{"line":68,"column":6},"end":{"line":70,"column":7}},"47":{"start":{"line":69,"column":8},"end":{"line":69,"column":88}},"48":{"start":{"line":71,"column":6},"end":{"line":73,"column":7}},"49":{"start":{"line":72,"column":8},"end":{"line":72,"column":151}},"50":{"start":{"line":75,"column":6},"end":{"line":75,"column":71}},"51":{"start":{"line":76,"column":6},"end":{"line":79,"column":7}},"52":{"start":{"line":77,"column":8},"end":{"line":77,"column":61}},"53":{"start":{"line":78,"column":8},"end":{"line":78,"column":144}},"54":{"start":{"line":81,"column":6},"end":{"line":81,"column":53}},"55":{"start":{"line":82,"column":6},"end":{"line":82,"column":103}},"56":{"start":{"line":83,"column":6},"end":{"line":83,"column":44}},"57":{"start":{"line":86,"column":2},"end":{"line":86,"column":23}},"58":{"start":{"line":103,"column":0},"end":{"line":149,"column":1}},"59":{"start":{"line":104,"column":2},"end":{"line":104,"column":25}},"60":{"start":{"line":105,"column":2},"end":{"line":105,"column":32}},"61":{"start":{"line":106,"column":2},"end":{"line":108,"column":3}},"62":{"start":{"line":107,"column":4},"end":{"line":107,"column":14}},"63":{"start":{"line":109,"column":2},"end":{"line":109,"column":42}},"64":{"start":{"line":110,"column":2},"end":{"line":112,"column":5}},"65":{"start":{"line":111,"column":4},"end":{"line":111,"column":26}},"66":{"start":{"line":113,"column":2},"end":{"line":147,"column":3}},"67":{"start":{"line":114,"column":4},"end":{"line":114,"column":28}},"68":{"start":{"line":115,"column":4},"end":{"line":115,"column":27}},"69":{"start":{"line":116,"column":4},"end":{"line":116,"column":30}},"70":{"start":{"line":117,"column":4},"end":{"line":117,"column":40}},"71":{"start":{"line":118,"column":4},"end":{"line":118,"column":43}},"72":{"start":{"line":119,"column":4},"end":{"line":146,"column":5}},"73":{"start":{"line":120,"column":6},"end":{"line":124,"column":7}},"74":{"start":{"line":121,"column":8},"end":{"line":121,"column":43}},"75":{"start":{"line":122,"column":13},"end":{"line":124,"column":7}},"76":{"start":{"line":123,"column":8},"end":{"line":123,"column":141}},"77":{"start":{"line":125,"column":11},"end":{"line":146,"column":5}},"78":{"start":{"line":126,"column":6},"end":{"line":126,"column":55}},"79":{"start":{"line":127,"column":6},"end":{"line":136,"column":7}},"80":{"start":{"line":131,"column":8},"end":{"line":131,"column":59}},"81":{"start":{"line":132,"column":13},"end":{"line":136,"column":7}},"82":{"start":{"line":133,"column":8},"end":{"line":133,"column":43}},"83":{"start":{"line":134,"column":13},"end":{"line":136,"column":7}},"84":{"start":{"line":135,"column":8},"end":{"line":135,"column":232}},"85":{"start":{"line":138,"column":6},"end":{"line":138,"column":41}},"86":{"start":{"line":139,"column":6},"end":{"line":139,"column":93}},"87":{"start":{"line":140,"column":6},"end":{"line":144,"column":7}},"88":{"start":{"line":141,"column":8},"end":{"line":141,"column":87}},"89":{"start":{"line":142,"column":8},"end":{"line":142,"column":61}},"90":{"start":{"line":143,"column":8},"end":{"line":143,"column":155}},"91":{"start":{"line":145,"column":6},"end":{"line":145,"column":41}},"92":{"start":{"line":148,"column":2},"end":{"line":148,"column":23}},"93":{"start":{"line":154,"column":0},"end":{"line":236,"column":1}},"94":{"start":{"line":156,"column":2},"end":{"line":156,"column":21}},"95":{"start":{"line":158,"column":2},"end":{"line":160,"column":3}},"96":{"start":{"line":159,"column":4},"end":{"line":159,"column":11}},"97":{"start":{"line":162,"column":2},"end":{"line":167,"column":3}},"98":{"start":{"line":163,"column":4},"end":{"line":165,"column":5}},"99":{"start":{"line":164,"column":6},"end":{"line":164,"column":13}},"100":{"start":{"line":166,"column":4},"end":{"line":166,"column":44}},"101":{"start":{"line":169,"column":2},"end":{"line":172,"column":3}},"102":{"start":{"line":171,"column":4},"end":{"line":171,"column":16}},"103":{"start":{"line":174,"column":2},"end":{"line":197,"column":3}},"104":{"start":{"line":175,"column":4},"end":{"line":175,"column":31}},"105":{"start":{"line":176,"column":4},"end":{"line":191,"column":5}},"106":{"start":{"line":177,"column":6},"end":{"line":177,"column":29}},"107":{"start":{"line":178,"column":6},"end":{"line":178,"column":59}},"108":{"start":{"line":179,"column":6},"end":{"line":181,"column":7}},"109":{"start":{"line":180,"column":8},"end":{"line":180,"column":15}},"110":{"start":{"line":182,"column":6},"end":{"line":182,"column":24}},"111":{"start":{"line":183,"column":6},"end":{"line":189,"column":7}},"112":{"start":{"line":184,"column":8},"end":{"line":184,"column":58}},"113":{"start":{"line":185,"column":8},"end":{"line":187,"column":9}},"114":{"start":{"line":186,"column":10},"end":{"line":186,"column":17}},"115":{"start":{"line":188,"column":8},"end":{"line":188,"column":38}},"116":{"start":{"line":190,"column":6},"end":{"line":190,"column":27}},"117":{"start":{"line":192,"column":4},"end":{"line":192,"column":53}},"118":{"start":{"line":193,"column":4},"end":{"line":195,"column":5}},"119":{"start":{"line":194,"column":6},"end":{"line":194,"column":13}},"120":{"start":{"line":196,"column":4},"end":{"line":196,"column":43}},"121":{"start":{"line":199,"column":2},"end":{"line":224,"column":3}},"122":{"start":{"line":200,"column":4},"end":{"line":202,"column":5}},"123":{"start":{"line":201,"column":6},"end":{"line":201,"column":13}},"124":{"start":{"line":203,"column":4},"end":{"line":203,"column":41}},"125":{"start":{"line":204,"column":4},"end":{"line":204,"column":34}},"126":{"start":{"line":205,"column":4},"end":{"line":205,"column":41}},"127":{"start":{"line":206,"column":4},"end":{"line":222,"column":5}},"128":{"start":{"line":207,"column":6},"end":{"line":207,"column":36}},"129":{"start":{"line":208,"column":6},"end":{"line":208,"column":36}},"130":{"start":{"line":209,"column":6},"end":{"line":216,"column":7}},"131":{"start":{"line":210,"column":8},"end":{"line":214,"column":9}},"132":{"start":{"line":211,"column":10},"end":{"line":211,"column":53}},"133":{"start":{"line":212,"column":15},"end":{"line":214,"column":9}},"134":{"start":{"line":213,"column":10},"end":{"line":213,"column":17}},"135":{"start":{"line":215,"column":8},"end":{"line":215,"column":17}},"136":{"start":{"line":217,"column":6},"end":{"line":217,"column":66}},"137":{"start":{"line":218,"column":6},"end":{"line":220,"column":7}},"138":{"start":{"line":219,"column":8},"end":{"line":219,"column":15}},"139":{"start":{"line":221,"column":6},"end":{"line":221,"column":41}},"140":{"start":{"line":223,"column":4},"end":{"line":223,"column":22}},"141":{"start":{"line":226,"column":2},"end":{"line":226,"column":143}},"142":{"start":{"line":228,"column":2},"end":{"line":228,"column":39}},"143":{"start":{"line":229,"column":2},"end":{"line":233,"column":3}},"144":{"start":{"line":232,"column":4},"end":{"line":232,"column":11}},"145":{"start":{"line":235,"column":2},"end":{"line":235,"column":16}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":40},"end":{"line":45,"column":40}},{"start":{"line":45,"column":40},"end":{"line":45,"column":40}}]},"2":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":44},"end":{"line":45,"column":47}},{"start":{"line":45,"column":51},"end":{"line":45,"column":65}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":107},"end":{"line":45,"column":107}},{"start":{"line":45,"column":107},"end":{"line":45,"column":107}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":149},"end":{"line":45,"column":149}},{"start":{"line":45,"column":149},"end":{"line":45,"column":149}}]},"5":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":70},"end":{"line":47,"column":73}},{"start":{"line":47,"column":76},"end":{"line":47,"column":94}}]},"6":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":46},"end":{"line":47,"column":49}},{"start":{"line":47,"column":53},"end":{"line":47,"column":67}}]},"7":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"8":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"9":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"10":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"11":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":76,"column":6}},{"start":{"line":76,"column":6},"end":{"line":76,"column":6}}]},"12":{"line":77,"type":"cond-expr","locations":[{"start":{"line":77,"column":31},"end":{"line":77,"column":55}},{"start":{"line":77,"column":58},"end":{"line":77,"column":60}}]},"13":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"14":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":14}},{"start":{"line":106,"column":18},"end":{"line":106,"column":27}}]},"15":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"16":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":6},"end":{"line":120,"column":6}},{"start":{"line":120,"column":6},"end":{"line":120,"column":6}}]},"17":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":13},"end":{"line":122,"column":13}},{"start":{"line":122,"column":13},"end":{"line":122,"column":13}}]},"18":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":11},"end":{"line":125,"column":11}},{"start":{"line":125,"column":11},"end":{"line":125,"column":11}}]},"19":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":6},"end":{"line":127,"column":6}},{"start":{"line":127,"column":6},"end":{"line":127,"column":6}}]},"20":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":10},"end":{"line":127,"column":24}},{"start":{"line":127,"column":28},"end":{"line":127,"column":83}}]},"21":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":13},"end":{"line":132,"column":13}},{"start":{"line":132,"column":13},"end":{"line":132,"column":13}}]},"22":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":13},"end":{"line":134,"column":13}},{"start":{"line":134,"column":13},"end":{"line":134,"column":13}}]},"23":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":6},"end":{"line":140,"column":6}},{"start":{"line":140,"column":6},"end":{"line":140,"column":6}}]},"24":{"line":142,"type":"cond-expr","locations":[{"start":{"line":142,"column":31},"end":{"line":142,"column":55}},{"start":{"line":142,"column":58},"end":{"line":142,"column":60}}]},"25":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":2},"end":{"line":158,"column":2}},{"start":{"line":158,"column":2},"end":{"line":158,"column":2}}]},"26":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":2},"end":{"line":162,"column":2}},{"start":{"line":162,"column":2},"end":{"line":162,"column":2}}]},"27":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]},"28":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":2},"end":{"line":169,"column":2}},{"start":{"line":169,"column":2},"end":{"line":169,"column":2}}]},"29":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":2},"end":{"line":174,"column":2}},{"start":{"line":174,"column":2},"end":{"line":174,"column":2}}]},"30":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":176,"column":4}},{"start":{"line":176,"column":4},"end":{"line":176,"column":4}}]},"31":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":6},"end":{"line":179,"column":6}},{"start":{"line":179,"column":6},"end":{"line":179,"column":6}}]},"32":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":8},"end":{"line":185,"column":8}},{"start":{"line":185,"column":8},"end":{"line":185,"column":8}}]},"33":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":4}},{"start":{"line":193,"column":4},"end":{"line":193,"column":4}}]},"34":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":2},"end":{"line":199,"column":2}},{"start":{"line":199,"column":2},"end":{"line":199,"column":2}}]},"35":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":4},"end":{"line":200,"column":4}},{"start":{"line":200,"column":4},"end":{"line":200,"column":4}}]},"36":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":6},"end":{"line":209,"column":6}},{"start":{"line":209,"column":6},"end":{"line":209,"column":6}}]},"37":{"line":210,"type":"if","locations":[{"start":{"line":210,"column":8},"end":{"line":210,"column":8}},{"start":{"line":210,"column":8},"end":{"line":210,"column":8}}]},"38":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":15},"end":{"line":212,"column":15}},{"start":{"line":212,"column":15},"end":{"line":212,"column":15}}]},"39":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":6},"end":{"line":218,"column":6}},{"start":{"line":218,"column":6},"end":{"line":218,"column":6}}]},"40":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":27},"end":{"line":226,"column":72}},{"start":{"line":226,"column":76},"end":{"line":226,"column":119}}]},"41":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":2},"end":{"line":229,"column":2}},{"start":{"line":229,"column":2},"end":{"line":229,"column":2}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.getVariableValues = getVariableValues;","exports.getArgumentValues = getArgumentValues;","","var _iterall = require('iterall');","","var _error = require('../error');","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _isInvalid = require('../jsutils/isInvalid');","","var _isInvalid2 = _interopRequireDefault(_isInvalid);","","var _keyMap = require('../jsutils/keyMap');","","var _keyMap2 = _interopRequireDefault(_keyMap);","","var _typeFromAST = require('../utilities/typeFromAST');","","var _valueFromAST = require('../utilities/valueFromAST');","","var _isValidJSValue = require('../utilities/isValidJSValue');","","var _isValidLiteralValue = require('../utilities/isValidLiteralValue');","","var _kinds = require('../language/kinds');","","var Kind = _interopRequireWildcard(_kinds);","","var _printer = require('../language/printer');","","var _definition = require('../type/definition');","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Prepares an object map of variableValues of the correct type based on the"," * provided variable definitions and arbitrary input. If the input cannot be"," * parsed to match the variable definitions, a GraphQLError will be thrown."," */","function getVariableValues(schema, varDefNodes, inputs) {","  var coercedValues = Object.create(null);","  for (var i = 0; i < varDefNodes.length; i++) {","    var varDefNode = varDefNodes[i];","    var varName = varDefNode.variable.name.value;","    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);","    if (!(0, _definition.isInputType)(varType)) {","      throw new _error.GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + (0, _printer.print)(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]);","    }","    varType = varType;","","    var value = inputs[varName];","    if ((0, _isInvalid2.default)(value)) {","      var defaultValue = varDefNode.defaultValue;","      if (defaultValue) {","        coercedValues[varName] = (0, _valueFromAST.valueFromAST)(defaultValue, varType);","      }","      if (varType instanceof _definition.GraphQLNonNull) {","        throw new _error.GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]);","      }","    } else {","      var errors = (0, _isValidJSValue.isValidJSValue)(value, varType);","      if (errors.length) {","        var message = errors ? '\\n' + errors.join('\\n') : '';","        throw new _error.GraphQLError('Variable \"$' + varName + '\" got invalid value ' + (JSON.stringify(value) + '.' + message), [varDefNode]);","      }","","      var coercedValue = coerceValue(varType, value);","      (0, _invariant2.default)(!(0, _isInvalid2.default)(coercedValue), 'Should have reported error.');","      coercedValues[varName] = coercedValue;","    }","  }","  return coercedValues;","}","","/**"," * Prepares an object map of argument values given a list of argument"," * definitions and list of argument AST nodes."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function getArgumentValues(def, node, variableValues) {","  var argDefs = def.args;","  var argNodes = node.arguments;","  if (!argDefs || !argNodes) {","    return {};","  }","  var coercedValues = Object.create(null);","  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {","    return arg.name.value;","  });","  for (var i = 0; i < argDefs.length; i++) {","    var argDef = argDefs[i];","    var name = argDef.name;","    var argType = argDef.type;","    var argumentNode = argNodeMap[name];","    var defaultValue = argDef.defaultValue;","    if (!argumentNode) {","      if (!(0, _isInvalid2.default)(defaultValue)) {","        coercedValues[name] = defaultValue;","      } else if (argType instanceof _definition.GraphQLNonNull) {","        throw new _error.GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);","      }","    } else if (argumentNode.value.kind === Kind.VARIABLE) {","      var variableName = argumentNode.value.name.value;","      if (variableValues && !(0, _isInvalid2.default)(variableValues[variableName])) {","        // Note: this does not check that this variable value is correct.","        // This assumes that this query has been validated and the variable","        // usage here is of the correct type.","        coercedValues[name] = variableValues[variableName];","      } else if (!(0, _isInvalid2.default)(defaultValue)) {","        coercedValues[name] = defaultValue;","      } else if (argType instanceof _definition.GraphQLNonNull) {","        throw new _error.GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);","      }","    } else {","      var valueNode = argumentNode.value;","      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);","      if ((0, _isInvalid2.default)(coercedValue)) {","        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argType, valueNode);","        var message = errors ? '\\n' + errors.join('\\n') : '';","        throw new _error.GraphQLError('Argument \"' + name + '\" got invalid value ' + (0, _printer.print)(valueNode) + '.' + message, [argumentNode.value]);","      }","      coercedValues[name] = coercedValue;","    }","  }","  return coercedValues;","}","","/**"," * Given a type and any value, return a runtime value coerced to match the type."," */","function coerceValue(type, value) {","  // Ensure flow knows that we treat function params as const.","  var _value = value;","","  if ((0, _isInvalid2.default)(_value)) {","    return; // Intentionally return no value.","  }","","  if (type instanceof _definition.GraphQLNonNull) {","    if (_value === null) {","      return; // Intentionally return no value.","    }","    return coerceValue(type.ofType, _value);","  }","","  if (_value === null) {","    // Intentionally return the value null.","    return null;","  }","","  if (type instanceof _definition.GraphQLList) {","    var itemType = type.ofType;","    if ((0, _iterall.isCollection)(_value)) {","      var coercedValues = [];","      var valueIter = (0, _iterall.createIterator)(_value);","      if (!valueIter) {","        return; // Intentionally return no value.","      }","      var step = void 0;","      while (!(step = valueIter.next()).done) {","        var itemValue = coerceValue(itemType, step.value);","        if ((0, _isInvalid2.default)(itemValue)) {","          return; // Intentionally return no value.","        }","        coercedValues.push(itemValue);","      }","      return coercedValues;","    }","    var coercedValue = coerceValue(itemType, _value);","    if ((0, _isInvalid2.default)(coercedValue)) {","      return; // Intentionally return no value.","    }","    return [coerceValue(itemType, _value)];","  }","","  if (type instanceof _definition.GraphQLInputObjectType) {","    if (typeof _value !== 'object') {","      return; // Intentionally return no value.","    }","    var coercedObj = Object.create(null);","    var fields = type.getFields();","    var fieldNames = Object.keys(fields);","    for (var i = 0; i < fieldNames.length; i++) {","      var fieldName = fieldNames[i];","      var field = fields[fieldName];","      if ((0, _isInvalid2.default)(_value[fieldName])) {","        if (!(0, _isInvalid2.default)(field.defaultValue)) {","          coercedObj[fieldName] = field.defaultValue;","        } else if (field.type instanceof _definition.GraphQLNonNull) {","          return; // Intentionally return no value.","        }","        continue;","      }","      var fieldValue = coerceValue(field.type, _value[fieldName]);","      if ((0, _isInvalid2.default)(fieldValue)) {","        return; // Intentionally return no value.","      }","      coercedObj[fieldName] = fieldValue;","    }","    return coercedObj;","  }","","  (0, _invariant2.default)(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType, 'Must be input type');","","  var parsed = type.parseValue(_value);","  if ((0, _isNullish2.default)(parsed)) {","    // null or invalid values represent a failure to parse correctly,","    // in which case no value is returned.","    return;","  }","","  return parsed;","}"],"l":{"3":1,"6":1,"7":1,"9":1,"11":1,"13":1,"15":1,"17":1,"19":1,"21":1,"23":1,"25":1,"27":1,"29":1,"31":1,"33":1,"35":1,"37":1,"39":1,"41":1,"43":1,"45":1,"47":4,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"63":0,"65":0,"66":0,"67":0,"68":0,"69":0,"71":0,"72":0,"75":0,"76":0,"77":0,"78":0,"81":0,"82":0,"83":0,"86":0,"103":1,"104":0,"105":0,"106":0,"107":0,"109":0,"110":0,"111":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"125":0,"126":0,"127":0,"131":0,"132":0,"133":0,"134":0,"135":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"145":0,"148":0,"154":1,"156":0,"158":0,"159":0,"162":0,"163":0,"164":0,"166":0,"169":0,"171":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"182":0,"183":0,"184":0,"185":0,"186":0,"188":0,"190":0,"192":0,"193":0,"194":0,"196":0,"199":0,"200":0,"201":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"215":0,"217":0,"218":0,"219":0,"221":0,"223":0,"226":0,"228":0,"229":0,"232":0,"235":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/valueFromAST.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/valueFromAST.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":4,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1,"88":0},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[4,0],"6":[4,4],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0]},"f":{"1":1,"2":4,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"_interopRequireWildcard","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":38}}},"2":{"name":"_interopRequireDefault","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":37}}},"3":{"name":"valueFromAST","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":50}}},"4":{"name":"(anonymous_4)","line":131,"loc":{"start":{"line":131,"column":61},"end":{"line":131,"column":78}}},"5":{"name":"isMissingVariable","line":170,"loc":{"start":{"line":170,"column":0},"end":{"line":170,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":43}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":47}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":49}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":53}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":49}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":53}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":49}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":53}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":42}},"12":{"start":{"line":26,"column":0},"end":{"line":26,"column":43}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":48}},"14":{"start":{"line":30,"column":0},"end":{"line":30,"column":269}},"15":{"start":{"line":30,"column":40},"end":{"line":30,"column":267}},"16":{"start":{"line":30,"column":69},"end":{"line":30,"column":80}},"17":{"start":{"line":30,"column":90},"end":{"line":30,"column":106}},"18":{"start":{"line":30,"column":107},"end":{"line":30,"column":228}},"19":{"start":{"line":30,"column":126},"end":{"line":30,"column":226}},"20":{"start":{"line":30,"column":149},"end":{"line":30,"column":224}},"21":{"start":{"line":30,"column":201},"end":{"line":30,"column":224}},"22":{"start":{"line":30,"column":229},"end":{"line":30,"column":250}},"23":{"start":{"line":30,"column":251},"end":{"line":30,"column":265}},"24":{"start":{"line":32,"column":0},"end":{"line":32,"column":97}},"25":{"start":{"line":32,"column":39},"end":{"line":32,"column":95}},"26":{"start":{"line":64,"column":0},"end":{"line":166,"column":1}},"27":{"start":{"line":65,"column":2},"end":{"line":69,"column":3}},"28":{"start":{"line":68,"column":4},"end":{"line":68,"column":11}},"29":{"start":{"line":71,"column":2},"end":{"line":76,"column":3}},"30":{"start":{"line":72,"column":4},"end":{"line":74,"column":5}},"31":{"start":{"line":73,"column":6},"end":{"line":73,"column":13}},"32":{"start":{"line":75,"column":4},"end":{"line":75,"column":59}},"33":{"start":{"line":78,"column":2},"end":{"line":81,"column":3}},"34":{"start":{"line":80,"column":4},"end":{"line":80,"column":16}},"35":{"start":{"line":83,"column":2},"end":{"line":93,"column":3}},"36":{"start":{"line":84,"column":4},"end":{"line":84,"column":44}},"37":{"start":{"line":85,"column":4},"end":{"line":88,"column":5}},"38":{"start":{"line":87,"column":6},"end":{"line":87,"column":13}},"39":{"start":{"line":92,"column":4},"end":{"line":92,"column":35}},"40":{"start":{"line":95,"column":2},"end":{"line":123,"column":3}},"41":{"start":{"line":96,"column":4},"end":{"line":96,"column":31}},"42":{"start":{"line":97,"column":4},"end":{"line":117,"column":5}},"43":{"start":{"line":98,"column":6},"end":{"line":98,"column":29}},"44":{"start":{"line":99,"column":6},"end":{"line":99,"column":39}},"45":{"start":{"line":100,"column":6},"end":{"line":115,"column":7}},"46":{"start":{"line":101,"column":8},"end":{"line":114,"column":9}},"47":{"start":{"line":104,"column":10},"end":{"line":106,"column":11}},"48":{"start":{"line":105,"column":12},"end":{"line":105,"column":19}},"49":{"start":{"line":107,"column":10},"end":{"line":107,"column":35}},"50":{"start":{"line":109,"column":10},"end":{"line":109,"column":74}},"51":{"start":{"line":110,"column":10},"end":{"line":112,"column":11}},"52":{"start":{"line":111,"column":12},"end":{"line":111,"column":19}},"53":{"start":{"line":113,"column":10},"end":{"line":113,"column":40}},"54":{"start":{"line":116,"column":6},"end":{"line":116,"column":27}},"55":{"start":{"line":118,"column":4},"end":{"line":118,"column":68}},"56":{"start":{"line":119,"column":4},"end":{"line":121,"column":5}},"57":{"start":{"line":120,"column":6},"end":{"line":120,"column":13}},"58":{"start":{"line":122,"column":4},"end":{"line":122,"column":26}},"59":{"start":{"line":125,"column":2},"end":{"line":154,"column":3}},"60":{"start":{"line":126,"column":4},"end":{"line":128,"column":5}},"61":{"start":{"line":127,"column":6},"end":{"line":127,"column":13}},"62":{"start":{"line":129,"column":4},"end":{"line":129,"column":41}},"63":{"start":{"line":130,"column":4},"end":{"line":130,"column":34}},"64":{"start":{"line":131,"column":4},"end":{"line":133,"column":7}},"65":{"start":{"line":132,"column":6},"end":{"line":132,"column":30}},"66":{"start":{"line":134,"column":4},"end":{"line":134,"column":41}},"67":{"start":{"line":135,"column":4},"end":{"line":152,"column":5}},"68":{"start":{"line":136,"column":6},"end":{"line":136,"column":37}},"69":{"start":{"line":137,"column":6},"end":{"line":137,"column":36}},"70":{"start":{"line":138,"column":6},"end":{"line":138,"column":44}},"71":{"start":{"line":139,"column":6},"end":{"line":146,"column":7}},"72":{"start":{"line":140,"column":8},"end":{"line":144,"column":9}},"73":{"start":{"line":141,"column":10},"end":{"line":141,"column":53}},"74":{"start":{"line":142,"column":15},"end":{"line":144,"column":9}},"75":{"start":{"line":143,"column":10},"end":{"line":143,"column":17}},"76":{"start":{"line":145,"column":8},"end":{"line":145,"column":17}},"77":{"start":{"line":147,"column":6},"end":{"line":147,"column":76}},"78":{"start":{"line":148,"column":6},"end":{"line":150,"column":7}},"79":{"start":{"line":149,"column":8},"end":{"line":149,"column":15}},"80":{"start":{"line":151,"column":6},"end":{"line":151,"column":41}},"81":{"start":{"line":153,"column":4},"end":{"line":153,"column":22}},"82":{"start":{"line":156,"column":2},"end":{"line":156,"column":143}},"83":{"start":{"line":158,"column":2},"end":{"line":158,"column":44}},"84":{"start":{"line":159,"column":2},"end":{"line":163,"column":3}},"85":{"start":{"line":162,"column":4},"end":{"line":162,"column":11}},"86":{"start":{"line":165,"column":2},"end":{"line":165,"column":16}},"87":{"start":{"line":170,"column":0},"end":{"line":172,"column":1}},"88":{"start":{"line":171,"column":2},"end":{"line":171,"column":119}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":40},"end":{"line":30,"column":40}},{"start":{"line":30,"column":40},"end":{"line":30,"column":40}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":44},"end":{"line":30,"column":47}},{"start":{"line":30,"column":51},"end":{"line":30,"column":65}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":107},"end":{"line":30,"column":107}},{"start":{"line":30,"column":107},"end":{"line":30,"column":107}}]},"4":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":149},"end":{"line":30,"column":149}},{"start":{"line":30,"column":149},"end":{"line":30,"column":149}}]},"5":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":70},"end":{"line":32,"column":73}},{"start":{"line":32,"column":76},"end":{"line":32,"column":94}}]},"6":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":46},"end":{"line":32,"column":49}},{"start":{"line":32,"column":53},"end":{"line":32,"column":67}}]},"7":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"10":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"11":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":2},"end":{"line":83,"column":2}},{"start":{"line":83,"column":2},"end":{"line":83,"column":2}}]},"12":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":85,"column":4}},{"start":{"line":85,"column":4},"end":{"line":85,"column":4}}]},"13":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":18}},{"start":{"line":85,"column":22},"end":{"line":85,"column":71}}]},"14":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":2},"end":{"line":95,"column":2}},{"start":{"line":95,"column":2},"end":{"line":95,"column":2}}]},"15":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"16":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]},"17":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":10},"end":{"line":104,"column":10}},{"start":{"line":104,"column":10},"end":{"line":104,"column":10}}]},"18":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":10},"end":{"line":110,"column":10}},{"start":{"line":110,"column":10},"end":{"line":110,"column":10}}]},"19":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"20":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"21":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"22":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]},"23":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":10},"end":{"line":139,"column":20}},{"start":{"line":139,"column":24},"end":{"line":139,"column":69}}]},"24":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"25":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":15},"end":{"line":142,"column":15}},{"start":{"line":142,"column":15},"end":{"line":142,"column":15}}]},"26":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":6}},{"start":{"line":148,"column":6},"end":{"line":148,"column":6}}]},"27":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":27},"end":{"line":156,"column":72}},{"start":{"line":156,"column":76},"end":{"line":156,"column":119}}]},"28":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":2},"end":{"line":159,"column":2}},{"start":{"line":159,"column":2},"end":{"line":159,"column":2}}]},"29":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":9},"end":{"line":171,"column":41}},{"start":{"line":171,"column":46},"end":{"line":171,"column":56}},{"start":{"line":171,"column":60},"end":{"line":171,"column":117}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.valueFromAST = valueFromAST;","","var _keyMap = require('../jsutils/keyMap');","","var _keyMap2 = _interopRequireDefault(_keyMap);","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _isInvalid = require('../jsutils/isInvalid');","","var _isInvalid2 = _interopRequireDefault(_isInvalid);","","var _kinds = require('../language/kinds');","","var Kind = _interopRequireWildcard(_kinds);","","var _definition = require('../type/definition');","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Produces a JavaScript value given a GraphQL Value AST."," *"," * A GraphQL type must be provided, which will be used to interpret different"," * GraphQL Value literals."," *"," * Returns `undefined` when the value could not be validly coerced according to"," * the provided type."," *"," * | GraphQL Value        | JSON Value    |"," * | -------------------- | ------------- |"," * | Input Object         | Object        |"," * | List                 | Array         |"," * | Boolean              | Boolean       |"," * | String               | String        |"," * | Int / Float          | Number        |"," * | Enum Value           | Mixed         |"," * | NullValue            | null          |"," *"," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function valueFromAST(valueNode, type, variables) {","  if (!valueNode) {","    // When there is no node, then there is also no value.","    // Importantly, this is different from returning the value null.","    return;","  }","","  if (type instanceof _definition.GraphQLNonNull) {","    if (valueNode.kind === Kind.NULL) {","      return; // Invalid: intentionally return no value.","    }","    return valueFromAST(valueNode, type.ofType, variables);","  }","","  if (valueNode.kind === Kind.NULL) {","    // This is explicitly returning the value null.","    return null;","  }","","  if (valueNode.kind === Kind.VARIABLE) {","    var variableName = valueNode.name.value;","    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {","      // No valid return value.","      return;","    }","    // Note: we're not doing any checking that this variable is correct. We're","    // assuming that this query has been validated and the variable usage here","    // is of the correct type.","    return variables[variableName];","  }","","  if (type instanceof _definition.GraphQLList) {","    var itemType = type.ofType;","    if (valueNode.kind === Kind.LIST) {","      var coercedValues = [];","      var itemNodes = valueNode.values;","      for (var i = 0; i < itemNodes.length; i++) {","        if (isMissingVariable(itemNodes[i], variables)) {","          // If an array contains a missing variable, it is either coerced to","          // null or if the item type is non-null, it considered invalid.","          if (itemType instanceof _definition.GraphQLNonNull) {","            return; // Invalid: intentionally return no value.","          }","          coercedValues.push(null);","        } else {","          var itemValue = valueFromAST(itemNodes[i], itemType, variables);","          if ((0, _isInvalid2.default)(itemValue)) {","            return; // Invalid: intentionally return no value.","          }","          coercedValues.push(itemValue);","        }","      }","      return coercedValues;","    }","    var coercedValue = valueFromAST(valueNode, itemType, variables);","    if ((0, _isInvalid2.default)(coercedValue)) {","      return; // Invalid: intentionally return no value.","    }","    return [coercedValue];","  }","","  if (type instanceof _definition.GraphQLInputObjectType) {","    if (valueNode.kind !== Kind.OBJECT) {","      return; // Invalid: intentionally return no value.","    }","    var coercedObj = Object.create(null);","    var fields = type.getFields();","    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {","      return field.name.value;","    });","    var fieldNames = Object.keys(fields);","    for (var _i = 0; _i < fieldNames.length; _i++) {","      var fieldName = fieldNames[_i];","      var field = fields[fieldName];","      var fieldNode = fieldNodes[fieldName];","      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {","        if (!(0, _isInvalid2.default)(field.defaultValue)) {","          coercedObj[fieldName] = field.defaultValue;","        } else if (field.type instanceof _definition.GraphQLNonNull) {","          return; // Invalid: intentionally return no value.","        }","        continue;","      }","      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);","      if ((0, _isInvalid2.default)(fieldValue)) {","        return; // Invalid: intentionally return no value.","      }","      coercedObj[fieldName] = fieldValue;","    }","    return coercedObj;","  }","","  (0, _invariant2.default)(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType, 'Must be input type');","","  var parsed = type.parseLiteral(valueNode);","  if ((0, _isNullish2.default)(parsed)) {","    // null or invalid values represent a failure to parse correctly,","    // in which case no value is returned.","    return;","  }","","  return parsed;","}","","// Returns true if the provided valueNode is a variable which is not defined","// in the set of variables.","function isMissingVariable(valueNode, variables) {","  return valueNode.kind === Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":4,"64":1,"65":0,"68":0,"71":0,"72":0,"73":0,"75":0,"78":0,"80":0,"83":0,"84":0,"85":0,"87":0,"92":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"104":0,"105":0,"107":0,"109":0,"110":0,"111":0,"113":0,"116":0,"118":0,"119":0,"120":0,"122":0,"125":0,"126":0,"127":0,"129":0,"130":0,"131":0,"132":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"145":0,"147":0,"148":0,"149":0,"151":0,"153":0,"156":0,"158":0,"159":0,"162":0,"165":0,"170":1,"171":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/isValidJSValue.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/isValidJSValue.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":2,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"b":{"1":[2,0],"2":[2,2],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":20,"column":37}}},"2":{"name":"isValidJSValue","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":37}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":35},"end":{"line":55,"column":58}}},"4":{"name":"(anonymous_4)","line":56,"loc":{"start":{"line":56,"column":69},"end":{"line":56,"column":86}}},"5":{"name":"(anonymous_5)","line":75,"loc":{"start":{"line":75,"column":31},"end":{"line":75,"column":56}}},"6":{"name":"(anonymous_6)","line":82,"loc":{"start":{"line":82,"column":32},"end":{"line":82,"column":53}}},"7":{"name":"(anonymous_7)","line":84,"loc":{"start":{"line":84,"column":48},"end":{"line":84,"column":65}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":34}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":53}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":48}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":97}},"10":{"start":{"line":20,"column":39},"end":{"line":20,"column":95}},"11":{"start":{"line":37,"column":0},"end":{"line":106,"column":1}},"12":{"start":{"line":39,"column":2},"end":{"line":44,"column":3}},"13":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"14":{"start":{"line":41,"column":6},"end":{"line":41,"column":62}},"15":{"start":{"line":43,"column":4},"end":{"line":43,"column":46}},"16":{"start":{"line":46,"column":2},"end":{"line":48,"column":3}},"17":{"start":{"line":47,"column":4},"end":{"line":47,"column":14}},"18":{"start":{"line":51,"column":2},"end":{"line":63,"column":3}},"19":{"start":{"line":52,"column":4},"end":{"line":52,"column":31}},"20":{"start":{"line":53,"column":4},"end":{"line":61,"column":5}},"21":{"start":{"line":54,"column":6},"end":{"line":54,"column":22}},"22":{"start":{"line":55,"column":6},"end":{"line":59,"column":9}},"23":{"start":{"line":56,"column":8},"end":{"line":58,"column":12}},"24":{"start":{"line":57,"column":10},"end":{"line":57,"column":55}},"25":{"start":{"line":60,"column":6},"end":{"line":60,"column":20}},"26":{"start":{"line":62,"column":4},"end":{"line":62,"column":43}},"27":{"start":{"line":66,"column":2},"end":{"line":90,"column":3}},"28":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"29":{"start":{"line":68,"column":6},"end":{"line":68,"column":68}},"30":{"start":{"line":70,"column":4},"end":{"line":70,"column":34}},"31":{"start":{"line":72,"column":4},"end":{"line":72,"column":21}},"32":{"start":{"line":75,"column":4},"end":{"line":79,"column":7}},"33":{"start":{"line":76,"column":6},"end":{"line":78,"column":7}},"34":{"start":{"line":77,"column":8},"end":{"line":77,"column":73}},"35":{"start":{"line":82,"column":4},"end":{"line":87,"column":7}},"36":{"start":{"line":83,"column":6},"end":{"line":83,"column":79}},"37":{"start":{"line":84,"column":6},"end":{"line":86,"column":10}},"38":{"start":{"line":85,"column":8},"end":{"line":85,"column":56}},"39":{"start":{"line":89,"column":4},"end":{"line":89,"column":19}},"40":{"start":{"line":92,"column":2},"end":{"line":92,"column":143}},"41":{"start":{"line":96,"column":2},"end":{"line":103,"column":3}},"42":{"start":{"line":97,"column":4},"end":{"line":97,"column":45}},"43":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"44":{"start":{"line":99,"column":6},"end":{"line":99,"column":89}},"45":{"start":{"line":102,"column":4},"end":{"line":102,"column":104}},"46":{"start":{"line":105,"column":2},"end":{"line":105,"column":12}}},"branchMap":{"1":{"line":20,"type":"cond-expr","locations":[{"start":{"line":20,"column":70},"end":{"line":20,"column":73}},{"start":{"line":20,"column":76},"end":{"line":20,"column":94}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":46},"end":{"line":20,"column":49}},{"start":{"line":20,"column":53},"end":{"line":20,"column":67}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"7":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"8":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"9":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"10":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":33}},{"start":{"line":67,"column":37},"end":{"line":67,"column":51}}]},"11":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":76,"column":6}},{"start":{"line":76,"column":6},"end":{"line":76,"column":6}}]},"12":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":27},"end":{"line":92,"column":72}},{"start":{"line":92,"column":76},"end":{"line":92,"column":119}}]},"13":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.isValidJSValue = isValidJSValue;","","var _iterall = require('iterall');","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _definition = require('../type/definition');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Given a JavaScript value and a GraphQL type, determine if the value will be"," * accepted for that type. This is primarily useful for validating the"," * runtime values of query variables."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function isValidJSValue(value, type) {","  // A value must be provided if the type is non-null.","  if (type instanceof _definition.GraphQLNonNull) {","    if ((0, _isNullish2.default)(value)) {","      return ['Expected \"' + String(type) + '\", found null.'];","    }","    return isValidJSValue(value, type.ofType);","  }","","  if ((0, _isNullish2.default)(value)) {","    return [];","  }","","  // Lists accept a non-list value as a list of one.","  if (type instanceof _definition.GraphQLList) {","    var itemType = type.ofType;","    if ((0, _iterall.isCollection)(value)) {","      var errors = [];","      (0, _iterall.forEach)(value, function (item, index) {","        errors.push.apply(errors, isValidJSValue(item, itemType).map(function (error) {","          return 'In element #' + index + ': ' + error;","        }));","      });","      return errors;","    }","    return isValidJSValue(value, itemType);","  }","","  // Input objects check each defined field.","  if (type instanceof _definition.GraphQLInputObjectType) {","    if (typeof value !== 'object' || value === null) {","      return ['Expected \"' + type.name + '\", found not an object.'];","    }","    var fields = type.getFields();","","    var _errors = [];","","    // Ensure every provided field is defined.","    Object.keys(value).forEach(function (providedField) {","      if (!fields[providedField]) {","        _errors.push('In field \"' + providedField + '\": Unknown field.');","      }","    });","","    // Ensure every defined field is valid.","    Object.keys(fields).forEach(function (fieldName) {","      var newErrors = isValidJSValue(value[fieldName], fields[fieldName].type);","      _errors.push.apply(_errors, newErrors.map(function (error) {","        return 'In field \"' + fieldName + '\": ' + error;","      }));","    });","","    return _errors;","  }","","  (0, _invariant2.default)(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType, 'Must be input type');","","  // Scalar/Enum input checks to ensure the type can parse the value to","  // a non-null value.","  try {","    var parseResult = type.parseValue(value);","    if ((0, _isNullish2.default)(parseResult)) {","      return ['Expected type \"' + type.name + '\", found ' + JSON.stringify(value) + '.'];","    }","  } catch (error) {","    return ['Expected type \"' + type.name + '\", found ' + JSON.stringify(value) + ': ' + error.message];","  }","","  return [];","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":2,"37":1,"39":0,"40":0,"41":0,"43":0,"46":0,"47":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"60":0,"62":0,"66":0,"67":0,"68":0,"70":0,"72":0,"75":0,"76":0,"77":0,"82":0,"83":0,"84":0,"85":0,"89":0,"92":0,"96":0,"97":0,"98":0,"99":0,"102":0,"105":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/type/index.js","s":{"1":1,"2":1,"3":1,"4":2,"5":1,"6":1,"7":2,"8":1,"9":2,"10":1,"11":2,"12":1,"13":2,"14":1,"15":2,"16":1,"17":2,"18":1,"19":2,"20":1,"21":2,"22":1,"23":2,"24":1,"25":2,"26":1,"27":2,"28":1,"29":2,"30":1,"31":2,"32":1,"33":2,"34":1,"35":2,"36":1,"37":2,"38":1,"39":2,"40":1,"41":2,"42":1,"43":2,"44":1,"45":2,"46":1,"47":2,"48":1,"49":2,"50":1,"51":2,"52":1,"53":2,"54":1,"55":1,"56":2,"57":1,"58":2,"59":1,"60":2,"61":1,"62":2,"63":1,"64":2,"65":1,"66":2,"67":1,"68":2,"69":1,"70":1,"71":2,"72":1,"73":2,"74":1,"75":2,"76":1,"77":2,"78":1,"79":2,"80":1,"81":1,"82":2,"83":1,"84":2,"85":1,"86":2,"87":1,"88":2,"89":1,"90":2,"91":1,"92":2,"93":1,"94":2,"95":1,"96":2,"97":1,"98":2,"99":1,"100":2,"101":1,"102":2,"103":1,"104":2},"b":{},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2,"19":2,"20":2,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":2,"33":2,"34":2,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":2,"42":2,"43":2,"44":2,"45":2,"46":2,"47":2,"48":2,"49":2},"fnMap":{"1":{"name":"get","line":11,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":22}}},"2":{"name":"get","line":20,"loc":{"start":{"line":20,"column":7},"end":{"line":20,"column":22}}},"3":{"name":"get","line":26,"loc":{"start":{"line":26,"column":7},"end":{"line":26,"column":22}}},"4":{"name":"get","line":32,"loc":{"start":{"line":32,"column":7},"end":{"line":32,"column":22}}},"5":{"name":"get","line":38,"loc":{"start":{"line":38,"column":7},"end":{"line":38,"column":22}}},"6":{"name":"get","line":44,"loc":{"start":{"line":44,"column":7},"end":{"line":44,"column":22}}},"7":{"name":"get","line":50,"loc":{"start":{"line":50,"column":7},"end":{"line":50,"column":22}}},"8":{"name":"get","line":56,"loc":{"start":{"line":56,"column":7},"end":{"line":56,"column":22}}},"9":{"name":"get","line":62,"loc":{"start":{"line":62,"column":7},"end":{"line":62,"column":22}}},"10":{"name":"get","line":68,"loc":{"start":{"line":68,"column":7},"end":{"line":68,"column":22}}},"11":{"name":"get","line":74,"loc":{"start":{"line":74,"column":7},"end":{"line":74,"column":22}}},"12":{"name":"get","line":80,"loc":{"start":{"line":80,"column":7},"end":{"line":80,"column":22}}},"13":{"name":"get","line":86,"loc":{"start":{"line":86,"column":7},"end":{"line":86,"column":22}}},"14":{"name":"get","line":92,"loc":{"start":{"line":92,"column":7},"end":{"line":92,"column":22}}},"15":{"name":"get","line":98,"loc":{"start":{"line":98,"column":7},"end":{"line":98,"column":22}}},"16":{"name":"get","line":104,"loc":{"start":{"line":104,"column":7},"end":{"line":104,"column":22}}},"17":{"name":"get","line":110,"loc":{"start":{"line":110,"column":7},"end":{"line":110,"column":22}}},"18":{"name":"get","line":116,"loc":{"start":{"line":116,"column":7},"end":{"line":116,"column":22}}},"19":{"name":"get","line":122,"loc":{"start":{"line":122,"column":7},"end":{"line":122,"column":22}}},"20":{"name":"get","line":128,"loc":{"start":{"line":128,"column":7},"end":{"line":128,"column":22}}},"21":{"name":"get","line":134,"loc":{"start":{"line":134,"column":7},"end":{"line":134,"column":22}}},"22":{"name":"get","line":140,"loc":{"start":{"line":140,"column":7},"end":{"line":140,"column":22}}},"23":{"name":"get","line":146,"loc":{"start":{"line":146,"column":7},"end":{"line":146,"column":22}}},"24":{"name":"get","line":152,"loc":{"start":{"line":152,"column":7},"end":{"line":152,"column":22}}},"25":{"name":"get","line":158,"loc":{"start":{"line":158,"column":7},"end":{"line":158,"column":22}}},"26":{"name":"get","line":167,"loc":{"start":{"line":167,"column":7},"end":{"line":167,"column":22}}},"27":{"name":"get","line":173,"loc":{"start":{"line":173,"column":7},"end":{"line":173,"column":22}}},"28":{"name":"get","line":179,"loc":{"start":{"line":179,"column":7},"end":{"line":179,"column":22}}},"29":{"name":"get","line":185,"loc":{"start":{"line":185,"column":7},"end":{"line":185,"column":22}}},"30":{"name":"get","line":191,"loc":{"start":{"line":191,"column":7},"end":{"line":191,"column":22}}},"31":{"name":"get","line":197,"loc":{"start":{"line":197,"column":7},"end":{"line":197,"column":22}}},"32":{"name":"get","line":203,"loc":{"start":{"line":203,"column":7},"end":{"line":203,"column":22}}},"33":{"name":"get","line":212,"loc":{"start":{"line":212,"column":7},"end":{"line":212,"column":22}}},"34":{"name":"get","line":218,"loc":{"start":{"line":218,"column":7},"end":{"line":218,"column":22}}},"35":{"name":"get","line":224,"loc":{"start":{"line":224,"column":7},"end":{"line":224,"column":22}}},"36":{"name":"get","line":230,"loc":{"start":{"line":230,"column":7},"end":{"line":230,"column":22}}},"37":{"name":"get","line":236,"loc":{"start":{"line":236,"column":7},"end":{"line":236,"column":22}}},"38":{"name":"get","line":245,"loc":{"start":{"line":245,"column":7},"end":{"line":245,"column":22}}},"39":{"name":"get","line":251,"loc":{"start":{"line":251,"column":7},"end":{"line":251,"column":22}}},"40":{"name":"get","line":257,"loc":{"start":{"line":257,"column":7},"end":{"line":257,"column":22}}},"41":{"name":"get","line":263,"loc":{"start":{"line":263,"column":7},"end":{"line":263,"column":22}}},"42":{"name":"get","line":269,"loc":{"start":{"line":269,"column":7},"end":{"line":269,"column":22}}},"43":{"name":"get","line":275,"loc":{"start":{"line":275,"column":7},"end":{"line":275,"column":22}}},"44":{"name":"get","line":281,"loc":{"start":{"line":281,"column":7},"end":{"line":281,"column":22}}},"45":{"name":"get","line":287,"loc":{"start":{"line":287,"column":7},"end":{"line":287,"column":22}}},"46":{"name":"get","line":293,"loc":{"start":{"line":293,"column":7},"end":{"line":293,"column":22}}},"47":{"name":"get","line":299,"loc":{"start":{"line":299,"column":7},"end":{"line":299,"column":22}}},"48":{"name":"get","line":305,"loc":{"start":{"line":305,"column":7},"end":{"line":305,"column":22}}},"49":{"name":"get","line":311,"loc":{"start":{"line":311,"column":7},"end":{"line":311,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":34}},"3":{"start":{"line":9,"column":0},"end":{"line":14,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":42}},"6":{"start":{"line":18,"column":0},"end":{"line":23,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":30}},"8":{"start":{"line":24,"column":0},"end":{"line":29,"column":3}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":35}},"10":{"start":{"line":30,"column":0},"end":{"line":35,"column":3}},"11":{"start":{"line":33,"column":4},"end":{"line":33,"column":36}},"12":{"start":{"line":36,"column":0},"end":{"line":41,"column":3}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":34}},"14":{"start":{"line":42,"column":0},"end":{"line":47,"column":3}},"15":{"start":{"line":45,"column":4},"end":{"line":45,"column":39}},"16":{"start":{"line":48,"column":0},"end":{"line":53,"column":3}},"17":{"start":{"line":51,"column":4},"end":{"line":51,"column":38}},"18":{"start":{"line":54,"column":0},"end":{"line":59,"column":3}},"19":{"start":{"line":57,"column":4},"end":{"line":57,"column":35}},"20":{"start":{"line":60,"column":0},"end":{"line":65,"column":3}},"21":{"start":{"line":63,"column":4},"end":{"line":63,"column":34}},"22":{"start":{"line":66,"column":0},"end":{"line":71,"column":3}},"23":{"start":{"line":69,"column":4},"end":{"line":69,"column":39}},"24":{"start":{"line":72,"column":0},"end":{"line":77,"column":3}},"25":{"start":{"line":75,"column":4},"end":{"line":75,"column":40}},"26":{"start":{"line":78,"column":0},"end":{"line":83,"column":3}},"27":{"start":{"line":81,"column":4},"end":{"line":81,"column":38}},"28":{"start":{"line":84,"column":0},"end":{"line":89,"column":3}},"29":{"start":{"line":87,"column":4},"end":{"line":87,"column":43}},"30":{"start":{"line":90,"column":0},"end":{"line":95,"column":3}},"31":{"start":{"line":93,"column":4},"end":{"line":93,"column":42}},"32":{"start":{"line":96,"column":0},"end":{"line":101,"column":3}},"33":{"start":{"line":99,"column":4},"end":{"line":99,"column":39}},"34":{"start":{"line":102,"column":0},"end":{"line":107,"column":3}},"35":{"start":{"line":105,"column":4},"end":{"line":105,"column":39}},"36":{"start":{"line":108,"column":0},"end":{"line":113,"column":3}},"37":{"start":{"line":111,"column":4},"end":{"line":111,"column":36}},"38":{"start":{"line":114,"column":0},"end":{"line":119,"column":3}},"39":{"start":{"line":117,"column":4},"end":{"line":117,"column":41}},"40":{"start":{"line":120,"column":0},"end":{"line":125,"column":3}},"41":{"start":{"line":123,"column":4},"end":{"line":123,"column":41}},"42":{"start":{"line":126,"column":0},"end":{"line":131,"column":3}},"43":{"start":{"line":129,"column":4},"end":{"line":129,"column":44}},"44":{"start":{"line":132,"column":0},"end":{"line":137,"column":3}},"45":{"start":{"line":135,"column":4},"end":{"line":135,"column":40}},"46":{"start":{"line":138,"column":0},"end":{"line":143,"column":3}},"47":{"start":{"line":141,"column":4},"end":{"line":141,"column":39}},"48":{"start":{"line":144,"column":0},"end":{"line":149,"column":3}},"49":{"start":{"line":147,"column":4},"end":{"line":147,"column":46}},"50":{"start":{"line":150,"column":0},"end":{"line":155,"column":3}},"51":{"start":{"line":153,"column":4},"end":{"line":153,"column":35}},"52":{"start":{"line":156,"column":0},"end":{"line":161,"column":3}},"53":{"start":{"line":159,"column":4},"end":{"line":159,"column":38}},"54":{"start":{"line":163,"column":0},"end":{"line":163,"column":42}},"55":{"start":{"line":165,"column":0},"end":{"line":170,"column":3}},"56":{"start":{"line":168,"column":4},"end":{"line":168,"column":41}},"57":{"start":{"line":171,"column":0},"end":{"line":176,"column":3}},"58":{"start":{"line":174,"column":4},"end":{"line":174,"column":40}},"59":{"start":{"line":177,"column":0},"end":{"line":182,"column":3}},"60":{"start":{"line":180,"column":4},"end":{"line":180,"column":43}},"61":{"start":{"line":183,"column":0},"end":{"line":188,"column":3}},"62":{"start":{"line":186,"column":4},"end":{"line":186,"column":47}},"63":{"start":{"line":189,"column":0},"end":{"line":194,"column":3}},"64":{"start":{"line":192,"column":4},"end":{"line":192,"column":44}},"65":{"start":{"line":195,"column":0},"end":{"line":200,"column":3}},"66":{"start":{"line":198,"column":4},"end":{"line":198,"column":50}},"67":{"start":{"line":201,"column":0},"end":{"line":206,"column":3}},"68":{"start":{"line":204,"column":4},"end":{"line":204,"column":50}},"69":{"start":{"line":208,"column":0},"end":{"line":208,"column":36}},"70":{"start":{"line":210,"column":0},"end":{"line":215,"column":3}},"71":{"start":{"line":213,"column":4},"end":{"line":213,"column":31}},"72":{"start":{"line":216,"column":0},"end":{"line":221,"column":3}},"73":{"start":{"line":219,"column":4},"end":{"line":219,"column":33}},"74":{"start":{"line":222,"column":0},"end":{"line":227,"column":3}},"75":{"start":{"line":225,"column":4},"end":{"line":225,"column":34}},"76":{"start":{"line":228,"column":0},"end":{"line":233,"column":3}},"77":{"start":{"line":231,"column":4},"end":{"line":231,"column":35}},"78":{"start":{"line":234,"column":0},"end":{"line":239,"column":3}},"79":{"start":{"line":237,"column":4},"end":{"line":237,"column":30}},"80":{"start":{"line":241,"column":0},"end":{"line":241,"column":48}},"81":{"start":{"line":243,"column":0},"end":{"line":248,"column":3}},"82":{"start":{"line":246,"column":4},"end":{"line":246,"column":35}},"83":{"start":{"line":249,"column":0},"end":{"line":254,"column":3}},"84":{"start":{"line":252,"column":4},"end":{"line":252,"column":35}},"85":{"start":{"line":255,"column":0},"end":{"line":260,"column":3}},"86":{"start":{"line":258,"column":4},"end":{"line":258,"column":38}},"87":{"start":{"line":261,"column":0},"end":{"line":266,"column":3}},"88":{"start":{"line":264,"column":4},"end":{"line":264,"column":46}},"89":{"start":{"line":267,"column":0},"end":{"line":272,"column":3}},"90":{"start":{"line":270,"column":4},"end":{"line":270,"column":33}},"91":{"start":{"line":273,"column":0},"end":{"line":278,"column":3}},"92":{"start":{"line":276,"column":4},"end":{"line":276,"column":34}},"93":{"start":{"line":279,"column":0},"end":{"line":284,"column":3}},"94":{"start":{"line":282,"column":4},"end":{"line":282,"column":39}},"95":{"start":{"line":285,"column":0},"end":{"line":290,"column":3}},"96":{"start":{"line":288,"column":4},"end":{"line":288,"column":38}},"97":{"start":{"line":291,"column":0},"end":{"line":296,"column":3}},"98":{"start":{"line":294,"column":4},"end":{"line":294,"column":37}},"99":{"start":{"line":297,"column":0},"end":{"line":302,"column":3}},"100":{"start":{"line":300,"column":4},"end":{"line":300,"column":45}},"101":{"start":{"line":303,"column":0},"end":{"line":308,"column":3}},"102":{"start":{"line":306,"column":4},"end":{"line":306,"column":43}},"103":{"start":{"line":309,"column":0},"end":{"line":314,"column":3}},"104":{"start":{"line":312,"column":4},"end":{"line":312,"column":47}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","var _schema = require('./schema');","","Object.defineProperty(exports, 'GraphQLSchema', {","  enumerable: true,","  get: function get() {","    return _schema.GraphQLSchema;","  }","});","","var _definition = require('./definition');","","Object.defineProperty(exports, 'isType', {","  enumerable: true,","  get: function get() {","    return _definition.isType;","  }","});","Object.defineProperty(exports, 'isInputType', {","  enumerable: true,","  get: function get() {","    return _definition.isInputType;","  }","});","Object.defineProperty(exports, 'isOutputType', {","  enumerable: true,","  get: function get() {","    return _definition.isOutputType;","  }","});","Object.defineProperty(exports, 'isLeafType', {","  enumerable: true,","  get: function get() {","    return _definition.isLeafType;","  }","});","Object.defineProperty(exports, 'isCompositeType', {","  enumerable: true,","  get: function get() {","    return _definition.isCompositeType;","  }","});","Object.defineProperty(exports, 'isAbstractType', {","  enumerable: true,","  get: function get() {","    return _definition.isAbstractType;","  }","});","Object.defineProperty(exports, 'isNamedType', {","  enumerable: true,","  get: function get() {","    return _definition.isNamedType;","  }","});","Object.defineProperty(exports, 'assertType', {","  enumerable: true,","  get: function get() {","    return _definition.assertType;","  }","});","Object.defineProperty(exports, 'assertInputType', {","  enumerable: true,","  get: function get() {","    return _definition.assertInputType;","  }","});","Object.defineProperty(exports, 'assertOutputType', {","  enumerable: true,","  get: function get() {","    return _definition.assertOutputType;","  }","});","Object.defineProperty(exports, 'assertLeafType', {","  enumerable: true,","  get: function get() {","    return _definition.assertLeafType;","  }","});","Object.defineProperty(exports, 'assertCompositeType', {","  enumerable: true,","  get: function get() {","    return _definition.assertCompositeType;","  }","});","Object.defineProperty(exports, 'assertAbstractType', {","  enumerable: true,","  get: function get() {","    return _definition.assertAbstractType;","  }","});","Object.defineProperty(exports, 'assertNamedType', {","  enumerable: true,","  get: function get() {","    return _definition.assertNamedType;","  }","});","Object.defineProperty(exports, 'getNullableType', {","  enumerable: true,","  get: function get() {","    return _definition.getNullableType;","  }","});","Object.defineProperty(exports, 'getNamedType', {","  enumerable: true,","  get: function get() {","    return _definition.getNamedType;","  }","});","Object.defineProperty(exports, 'GraphQLScalarType', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLScalarType;","  }","});","Object.defineProperty(exports, 'GraphQLObjectType', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLObjectType;","  }","});","Object.defineProperty(exports, 'GraphQLInterfaceType', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLInterfaceType;","  }","});","Object.defineProperty(exports, 'GraphQLUnionType', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLUnionType;","  }","});","Object.defineProperty(exports, 'GraphQLEnumType', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLEnumType;","  }","});","Object.defineProperty(exports, 'GraphQLInputObjectType', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLInputObjectType;","  }","});","Object.defineProperty(exports, 'GraphQLList', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLList;","  }","});","Object.defineProperty(exports, 'GraphQLNonNull', {","  enumerable: true,","  get: function get() {","    return _definition.GraphQLNonNull;","  }","});","","var _directives = require('./directives');","","Object.defineProperty(exports, 'DirectiveLocation', {","  enumerable: true,","  get: function get() {","    return _directives.DirectiveLocation;","  }","});","Object.defineProperty(exports, 'GraphQLDirective', {","  enumerable: true,","  get: function get() {","    return _directives.GraphQLDirective;","  }","});","Object.defineProperty(exports, 'specifiedDirectives', {","  enumerable: true,","  get: function get() {","    return _directives.specifiedDirectives;","  }","});","Object.defineProperty(exports, 'GraphQLIncludeDirective', {","  enumerable: true,","  get: function get() {","    return _directives.GraphQLIncludeDirective;","  }","});","Object.defineProperty(exports, 'GraphQLSkipDirective', {","  enumerable: true,","  get: function get() {","    return _directives.GraphQLSkipDirective;","  }","});","Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {","  enumerable: true,","  get: function get() {","    return _directives.GraphQLDeprecatedDirective;","  }","});","Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {","  enumerable: true,","  get: function get() {","    return _directives.DEFAULT_DEPRECATION_REASON;","  }","});","","var _scalars = require('./scalars');","","Object.defineProperty(exports, 'GraphQLInt', {","  enumerable: true,","  get: function get() {","    return _scalars.GraphQLInt;","  }","});","Object.defineProperty(exports, 'GraphQLFloat', {","  enumerable: true,","  get: function get() {","    return _scalars.GraphQLFloat;","  }","});","Object.defineProperty(exports, 'GraphQLString', {","  enumerable: true,","  get: function get() {","    return _scalars.GraphQLString;","  }","});","Object.defineProperty(exports, 'GraphQLBoolean', {","  enumerable: true,","  get: function get() {","    return _scalars.GraphQLBoolean;","  }","});","Object.defineProperty(exports, 'GraphQLID', {","  enumerable: true,","  get: function get() {","    return _scalars.GraphQLID;","  }","});","","var _introspection = require('./introspection');","","Object.defineProperty(exports, 'TypeKind', {","  enumerable: true,","  get: function get() {","    return _introspection.TypeKind;","  }","});","Object.defineProperty(exports, '__Schema', {","  enumerable: true,","  get: function get() {","    return _introspection.__Schema;","  }","});","Object.defineProperty(exports, '__Directive', {","  enumerable: true,","  get: function get() {","    return _introspection.__Directive;","  }","});","Object.defineProperty(exports, '__DirectiveLocation', {","  enumerable: true,","  get: function get() {","    return _introspection.__DirectiveLocation;","  }","});","Object.defineProperty(exports, '__Type', {","  enumerable: true,","  get: function get() {","    return _introspection.__Type;","  }","});","Object.defineProperty(exports, '__Field', {","  enumerable: true,","  get: function get() {","    return _introspection.__Field;","  }","});","Object.defineProperty(exports, '__InputValue', {","  enumerable: true,","  get: function get() {","    return _introspection.__InputValue;","  }","});","Object.defineProperty(exports, '__EnumValue', {","  enumerable: true,","  get: function get() {","    return _introspection.__EnumValue;","  }","});","Object.defineProperty(exports, '__TypeKind', {","  enumerable: true,","  get: function get() {","    return _introspection.__TypeKind;","  }","});","Object.defineProperty(exports, 'SchemaMetaFieldDef', {","  enumerable: true,","  get: function get() {","    return _introspection.SchemaMetaFieldDef;","  }","});","Object.defineProperty(exports, 'TypeMetaFieldDef', {","  enumerable: true,","  get: function get() {","    return _introspection.TypeMetaFieldDef;","  }","});","Object.defineProperty(exports, 'TypeNameMetaFieldDef', {","  enumerable: true,","  get: function get() {","    return _introspection.TypeNameMetaFieldDef;","  }","});"],"l":{"3":1,"7":1,"9":1,"12":2,"16":1,"18":1,"21":2,"24":1,"27":2,"30":1,"33":2,"36":1,"39":2,"42":1,"45":2,"48":1,"51":2,"54":1,"57":2,"60":1,"63":2,"66":1,"69":2,"72":1,"75":2,"78":1,"81":2,"84":1,"87":2,"90":1,"93":2,"96":1,"99":2,"102":1,"105":2,"108":1,"111":2,"114":1,"117":2,"120":1,"123":2,"126":1,"129":2,"132":1,"135":2,"138":1,"141":2,"144":1,"147":2,"150":1,"153":2,"156":1,"159":2,"163":1,"165":1,"168":2,"171":1,"174":2,"177":1,"180":2,"183":1,"186":2,"189":1,"192":2,"195":1,"198":2,"201":1,"204":2,"208":1,"210":1,"213":2,"216":1,"219":2,"222":1,"225":2,"228":1,"231":2,"234":1,"237":2,"241":1,"243":1,"246":2,"249":1,"252":2,"255":1,"258":2,"261":1,"264":2,"267":1,"270":2,"273":1,"276":2,"279":1,"282":2,"285":1,"288":2,"291":1,"294":2,"297":1,"300":2,"303":1,"306":2,"309":1,"312":2}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":2,"6":1,"7":1,"8":0,"9":1,"10":2,"11":1,"12":1,"13":2,"14":1,"15":2,"16":1,"17":2,"18":1,"19":1,"20":2,"21":1,"22":1,"23":2,"24":1,"25":1,"26":2,"27":1,"28":2,"29":1,"30":2,"31":1,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0]},"f":{"1":2,"2":0,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"get","line":12,"loc":{"start":{"line":12,"column":7},"end":{"line":12,"column":22}}},"2":{"name":"get","line":21,"loc":{"start":{"line":21,"column":7},"end":{"line":21,"column":22}}},"3":{"name":"get","line":27,"loc":{"start":{"line":27,"column":7},"end":{"line":27,"column":22}}},"4":{"name":"get","line":36,"loc":{"start":{"line":36,"column":7},"end":{"line":36,"column":22}}},"5":{"name":"get","line":42,"loc":{"start":{"line":42,"column":7},"end":{"line":42,"column":22}}},"6":{"name":"get","line":48,"loc":{"start":{"line":48,"column":7},"end":{"line":48,"column":22}}},"7":{"name":"get","line":57,"loc":{"start":{"line":57,"column":7},"end":{"line":57,"column":22}}},"8":{"name":"get","line":66,"loc":{"start":{"line":66,"column":7},"end":{"line":66,"column":22}}},"9":{"name":"get","line":75,"loc":{"start":{"line":75,"column":7},"end":{"line":75,"column":22}}},"10":{"name":"get","line":81,"loc":{"start":{"line":81,"column":7},"end":{"line":81,"column":22}}},"11":{"name":"get","line":87,"loc":{"start":{"line":87,"column":7},"end":{"line":87,"column":22}}},"12":{"name":"get","line":93,"loc":{"start":{"line":93,"column":7},"end":{"line":93,"column":22}}},"13":{"name":"_interopRequireWildcard","line":102,"loc":{"start":{"line":102,"column":0},"end":{"line":102,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":265}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":38}},"4":{"start":{"line":10,"column":0},"end":{"line":15,"column":3}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"6":{"start":{"line":17,"column":0},"end":{"line":17,"column":32}},"7":{"start":{"line":19,"column":0},"end":{"line":24,"column":3}},"8":{"start":{"line":22,"column":4},"end":{"line":22,"column":30}},"9":{"start":{"line":25,"column":0},"end":{"line":30,"column":3}},"10":{"start":{"line":28,"column":4},"end":{"line":28,"column":28}},"11":{"start":{"line":32,"column":0},"end":{"line":32,"column":34}},"12":{"start":{"line":34,"column":0},"end":{"line":39,"column":3}},"13":{"start":{"line":37,"column":4},"end":{"line":37,"column":25}},"14":{"start":{"line":40,"column":0},"end":{"line":45,"column":3}},"15":{"start":{"line":43,"column":4},"end":{"line":43,"column":30}},"16":{"start":{"line":46,"column":0},"end":{"line":51,"column":3}},"17":{"start":{"line":49,"column":4},"end":{"line":49,"column":29}},"18":{"start":{"line":53,"column":0},"end":{"line":53,"column":36}},"19":{"start":{"line":55,"column":0},"end":{"line":60,"column":3}},"20":{"start":{"line":58,"column":4},"end":{"line":58,"column":26}},"21":{"start":{"line":62,"column":0},"end":{"line":62,"column":34}},"22":{"start":{"line":64,"column":0},"end":{"line":69,"column":3}},"23":{"start":{"line":67,"column":4},"end":{"line":67,"column":26}},"24":{"start":{"line":71,"column":0},"end":{"line":71,"column":36}},"25":{"start":{"line":73,"column":0},"end":{"line":78,"column":3}},"26":{"start":{"line":76,"column":4},"end":{"line":76,"column":26}},"27":{"start":{"line":79,"column":0},"end":{"line":84,"column":3}},"28":{"start":{"line":82,"column":4},"end":{"line":82,"column":36}},"29":{"start":{"line":85,"column":0},"end":{"line":90,"column":3}},"30":{"start":{"line":88,"column":4},"end":{"line":88,"column":38}},"31":{"start":{"line":91,"column":0},"end":{"line":96,"column":3}},"32":{"start":{"line":94,"column":4},"end":{"line":94,"column":26}},"33":{"start":{"line":98,"column":0},"end":{"line":98,"column":32}},"34":{"start":{"line":100,"column":0},"end":{"line":100,"column":43}},"35":{"start":{"line":102,"column":0},"end":{"line":102,"column":269}},"36":{"start":{"line":102,"column":40},"end":{"line":102,"column":267}},"37":{"start":{"line":102,"column":69},"end":{"line":102,"column":80}},"38":{"start":{"line":102,"column":90},"end":{"line":102,"column":106}},"39":{"start":{"line":102,"column":107},"end":{"line":102,"column":228}},"40":{"start":{"line":102,"column":126},"end":{"line":102,"column":226}},"41":{"start":{"line":102,"column":149},"end":{"line":102,"column":224}},"42":{"start":{"line":102,"column":201},"end":{"line":102,"column":224}},"43":{"start":{"line":102,"column":229},"end":{"line":102,"column":250}},"44":{"start":{"line":102,"column":251},"end":{"line":102,"column":265}},"45":{"start":{"line":104,"column":0},"end":{"line":104,"column":20}}},"branchMap":{"1":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":40},"end":{"line":102,"column":40}},{"start":{"line":102,"column":40},"end":{"line":102,"column":40}}]},"2":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":44},"end":{"line":102,"column":47}},{"start":{"line":102,"column":51},"end":{"line":102,"column":65}}]},"3":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":107},"end":{"line":102,"column":107}},{"start":{"line":102,"column":107},"end":{"line":102,"column":107}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":149},"end":{"line":102,"column":149}},{"start":{"line":102,"column":149},"end":{"line":102,"column":149}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.BREAK = exports.visitWithTypeInfo = exports.visitInParallel = exports.visit = exports.Source = exports.print = exports.parseType = exports.parseValue = exports.parse = exports.TokenKind = exports.createLexer = exports.Kind = exports.getLocation = undefined;","","var _location = require('./location');","","Object.defineProperty(exports, 'getLocation', {","  enumerable: true,","  get: function get() {","    return _location.getLocation;","  }","});","","var _lexer = require('./lexer');","","Object.defineProperty(exports, 'createLexer', {","  enumerable: true,","  get: function get() {","    return _lexer.createLexer;","  }","});","Object.defineProperty(exports, 'TokenKind', {","  enumerable: true,","  get: function get() {","    return _lexer.TokenKind;","  }","});","","var _parser = require('./parser');","","Object.defineProperty(exports, 'parse', {","  enumerable: true,","  get: function get() {","    return _parser.parse;","  }","});","Object.defineProperty(exports, 'parseValue', {","  enumerable: true,","  get: function get() {","    return _parser.parseValue;","  }","});","Object.defineProperty(exports, 'parseType', {","  enumerable: true,","  get: function get() {","    return _parser.parseType;","  }","});","","var _printer = require('./printer');","","Object.defineProperty(exports, 'print', {","  enumerable: true,","  get: function get() {","    return _printer.print;","  }","});","","var _source = require('./source');","","Object.defineProperty(exports, 'Source', {","  enumerable: true,","  get: function get() {","    return _source.Source;","  }","});","","var _visitor = require('./visitor');","","Object.defineProperty(exports, 'visit', {","  enumerable: true,","  get: function get() {","    return _visitor.visit;","  }","});","Object.defineProperty(exports, 'visitInParallel', {","  enumerable: true,","  get: function get() {","    return _visitor.visitInParallel;","  }","});","Object.defineProperty(exports, 'visitWithTypeInfo', {","  enumerable: true,","  get: function get() {","    return _visitor.visitWithTypeInfo;","  }","});","Object.defineProperty(exports, 'BREAK', {","  enumerable: true,","  get: function get() {","    return _visitor.BREAK;","  }","});","","var _kinds = require('./kinds');","","var Kind = _interopRequireWildcard(_kinds);","","function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }","","exports.Kind = Kind;"],"l":{"3":1,"6":1,"8":1,"10":1,"13":2,"17":1,"19":1,"22":0,"25":1,"28":2,"32":1,"34":1,"37":2,"40":1,"43":2,"46":1,"49":2,"53":1,"55":1,"58":2,"62":1,"64":1,"67":2,"71":1,"73":1,"76":2,"79":1,"82":2,"85":1,"88":2,"91":1,"94":2,"98":1,"100":1,"102":1,"104":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/execution/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/execution/index.js","s":{"1":1,"2":1,"3":1,"4":2,"5":1,"6":2,"7":1,"8":2},"b":{},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"get","line":11,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":22}}},"2":{"name":"get","line":17,"loc":{"start":{"line":17,"column":7},"end":{"line":17,"column":22}}},"3":{"name":"get","line":23,"loc":{"start":{"line":23,"column":7},"end":{"line":23,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"3":{"start":{"line":9,"column":0},"end":{"line":14,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":28}},"5":{"start":{"line":15,"column":0},"end":{"line":20,"column":3}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":41}},"7":{"start":{"line":21,"column":0},"end":{"line":26,"column":3}},"8":{"start":{"line":24,"column":4},"end":{"line":24,"column":40}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","var _execute = require('./execute');","","Object.defineProperty(exports, 'execute', {","  enumerable: true,","  get: function get() {","    return _execute.execute;","  }","});","Object.defineProperty(exports, 'defaultFieldResolver', {","  enumerable: true,","  get: function get() {","    return _execute.defaultFieldResolver;","  }","});","Object.defineProperty(exports, 'responsePathAsArray', {","  enumerable: true,","  get: function get() {","    return _execute.responsePathAsArray;","  }","});"],"l":{"3":1,"7":1,"9":1,"12":2,"15":1,"18":2,"21":1,"24":2}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/validation/index.js","s":{"1":1,"2":1,"3":1,"4":2,"5":1,"6":2,"7":1,"8":1,"9":2},"b":{},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"get","line":11,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":22}}},"2":{"name":"get","line":17,"loc":{"start":{"line":17,"column":7},"end":{"line":17,"column":22}}},"3":{"name":"get","line":26,"loc":{"start":{"line":26,"column":7},"end":{"line":26,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":38}},"3":{"start":{"line":9,"column":0},"end":{"line":14,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":30}},"5":{"start":{"line":15,"column":0},"end":{"line":20,"column":3}},"6":{"start":{"line":18,"column":4},"end":{"line":18,"column":39}},"7":{"start":{"line":22,"column":0},"end":{"line":22,"column":50}},"8":{"start":{"line":24,"column":0},"end":{"line":29,"column":3}},"9":{"start":{"line":27,"column":4},"end":{"line":27,"column":42}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","var _validate = require('./validate');","","Object.defineProperty(exports, 'validate', {","  enumerable: true,","  get: function get() {","    return _validate.validate;","  }","});","Object.defineProperty(exports, 'ValidationContext', {","  enumerable: true,","  get: function get() {","    return _validate.ValidationContext;","  }","});","","var _specifiedRules = require('./specifiedRules');","","Object.defineProperty(exports, 'specifiedRules', {","  enumerable: true,","  get: function get() {","    return _specifiedRules.specifiedRules;","  }","});"],"l":{"3":1,"7":1,"9":1,"12":2,"15":1,"18":2,"22":1,"24":1,"27":2}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/index.js","s":{"1":1,"2":1,"3":1,"4":2,"5":1,"6":1,"7":2,"8":1,"9":1,"10":2,"11":1,"12":1,"13":2,"14":1,"15":2,"16":1,"17":1,"18":2,"19":1,"20":1,"21":2,"22":1,"23":2,"24":1,"25":0,"26":1,"27":1,"28":2,"29":1,"30":1,"31":2,"32":1,"33":1,"34":2,"35":1,"36":1,"37":2,"38":1,"39":1,"40":2,"41":1,"42":1,"43":2,"44":1,"45":1,"46":2,"47":1,"48":1,"49":2,"50":1,"51":1,"52":2,"53":1,"54":2,"55":1,"56":2,"57":1,"58":1,"59":2,"60":1,"61":1,"62":2,"63":1,"64":1,"65":2},"b":{},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":0,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2,"19":2,"20":2,"21":2,"22":2,"23":2},"fnMap":{"1":{"name":"get","line":11,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":22}}},"2":{"name":"get","line":20,"loc":{"start":{"line":20,"column":7},"end":{"line":20,"column":22}}},"3":{"name":"get","line":29,"loc":{"start":{"line":29,"column":7},"end":{"line":29,"column":22}}},"4":{"name":"get","line":38,"loc":{"start":{"line":38,"column":7},"end":{"line":38,"column":22}}},"5":{"name":"get","line":44,"loc":{"start":{"line":44,"column":7},"end":{"line":44,"column":22}}},"6":{"name":"get","line":53,"loc":{"start":{"line":53,"column":7},"end":{"line":53,"column":22}}},"7":{"name":"get","line":62,"loc":{"start":{"line":62,"column":7},"end":{"line":62,"column":22}}},"8":{"name":"get","line":68,"loc":{"start":{"line":68,"column":7},"end":{"line":68,"column":22}}},"9":{"name":"get","line":74,"loc":{"start":{"line":74,"column":7},"end":{"line":74,"column":22}}},"10":{"name":"get","line":83,"loc":{"start":{"line":83,"column":7},"end":{"line":83,"column":22}}},"11":{"name":"get","line":92,"loc":{"start":{"line":92,"column":7},"end":{"line":92,"column":22}}},"12":{"name":"get","line":101,"loc":{"start":{"line":101,"column":7},"end":{"line":101,"column":22}}},"13":{"name":"get","line":110,"loc":{"start":{"line":110,"column":7},"end":{"line":110,"column":22}}},"14":{"name":"get","line":119,"loc":{"start":{"line":119,"column":7},"end":{"line":119,"column":22}}},"15":{"name":"get","line":128,"loc":{"start":{"line":128,"column":7},"end":{"line":128,"column":22}}},"16":{"name":"get","line":137,"loc":{"start":{"line":137,"column":7},"end":{"line":137,"column":22}}},"17":{"name":"get","line":146,"loc":{"start":{"line":146,"column":7},"end":{"line":146,"column":22}}},"18":{"name":"get","line":155,"loc":{"start":{"line":155,"column":7},"end":{"line":155,"column":22}}},"19":{"name":"get","line":161,"loc":{"start":{"line":161,"column":7},"end":{"line":161,"column":22}}},"20":{"name":"get","line":167,"loc":{"start":{"line":167,"column":7},"end":{"line":167,"column":22}}},"21":{"name":"get","line":176,"loc":{"start":{"line":176,"column":7},"end":{"line":176,"column":22}}},"22":{"name":"get","line":185,"loc":{"start":{"line":185,"column":7},"end":{"line":185,"column":22}}},"23":{"name":"get","line":194,"loc":{"start":{"line":194,"column":7},"end":{"line":194,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":58}},"3":{"start":{"line":9,"column":0},"end":{"line":14,"column":3}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":50}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":52}},"6":{"start":{"line":18,"column":0},"end":{"line":23,"column":3}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":44}},"8":{"start":{"line":25,"column":0},"end":{"line":25,"column":56}},"9":{"start":{"line":27,"column":0},"end":{"line":32,"column":3}},"10":{"start":{"line":30,"column":4},"end":{"line":30,"column":48}},"11":{"start":{"line":34,"column":0},"end":{"line":34,"column":50}},"12":{"start":{"line":36,"column":0},"end":{"line":41,"column":3}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":42}},"14":{"start":{"line":42,"column":0},"end":{"line":47,"column":3}},"15":{"start":{"line":45,"column":4},"end":{"line":45,"column":39}},"16":{"start":{"line":49,"column":0},"end":{"line":49,"column":46}},"17":{"start":{"line":51,"column":0},"end":{"line":56,"column":3}},"18":{"start":{"line":54,"column":4},"end":{"line":54,"column":38}},"19":{"start":{"line":58,"column":0},"end":{"line":58,"column":48}},"20":{"start":{"line":60,"column":0},"end":{"line":65,"column":3}},"21":{"start":{"line":63,"column":4},"end":{"line":63,"column":38}},"22":{"start":{"line":66,"column":0},"end":{"line":71,"column":3}},"23":{"start":{"line":69,"column":4},"end":{"line":69,"column":36}},"24":{"start":{"line":72,"column":0},"end":{"line":77,"column":3}},"25":{"start":{"line":75,"column":4},"end":{"line":75,"column":51}},"26":{"start":{"line":79,"column":0},"end":{"line":79,"column":44}},"27":{"start":{"line":81,"column":0},"end":{"line":86,"column":3}},"28":{"start":{"line":84,"column":4},"end":{"line":84,"column":36}},"29":{"start":{"line":88,"column":0},"end":{"line":88,"column":46}},"30":{"start":{"line":90,"column":0},"end":{"line":95,"column":3}},"31":{"start":{"line":93,"column":4},"end":{"line":93,"column":38}},"32":{"start":{"line":97,"column":0},"end":{"line":97,"column":46}},"33":{"start":{"line":99,"column":0},"end":{"line":104,"column":3}},"34":{"start":{"line":102,"column":4},"end":{"line":102,"column":38}},"35":{"start":{"line":106,"column":0},"end":{"line":106,"column":38}},"36":{"start":{"line":108,"column":0},"end":{"line":113,"column":3}},"37":{"start":{"line":111,"column":4},"end":{"line":111,"column":30}},"38":{"start":{"line":115,"column":0},"end":{"line":115,"column":50}},"39":{"start":{"line":117,"column":0},"end":{"line":122,"column":3}},"40":{"start":{"line":120,"column":4},"end":{"line":120,"column":42}},"41":{"start":{"line":124,"column":0},"end":{"line":124,"column":60}},"42":{"start":{"line":126,"column":0},"end":{"line":131,"column":3}},"43":{"start":{"line":129,"column":4},"end":{"line":129,"column":52}},"44":{"start":{"line":133,"column":0},"end":{"line":133,"column":40}},"45":{"start":{"line":135,"column":0},"end":{"line":140,"column":3}},"46":{"start":{"line":138,"column":4},"end":{"line":138,"column":32}},"47":{"start":{"line":142,"column":0},"end":{"line":142,"column":58}},"48":{"start":{"line":144,"column":0},"end":{"line":149,"column":3}},"49":{"start":{"line":147,"column":4},"end":{"line":147,"column":50}},"50":{"start":{"line":151,"column":0},"end":{"line":151,"column":52}},"51":{"start":{"line":153,"column":0},"end":{"line":158,"column":3}},"52":{"start":{"line":156,"column":4},"end":{"line":156,"column":40}},"53":{"start":{"line":159,"column":0},"end":{"line":164,"column":3}},"54":{"start":{"line":162,"column":4},"end":{"line":162,"column":44}},"55":{"start":{"line":165,"column":0},"end":{"line":170,"column":3}},"56":{"start":{"line":168,"column":4},"end":{"line":168,"column":43}},"57":{"start":{"line":172,"column":0},"end":{"line":172,"column":52}},"58":{"start":{"line":174,"column":0},"end":{"line":179,"column":3}},"59":{"start":{"line":177,"column":4},"end":{"line":177,"column":44}},"60":{"start":{"line":181,"column":0},"end":{"line":181,"column":60}},"61":{"start":{"line":183,"column":0},"end":{"line":188,"column":3}},"62":{"start":{"line":186,"column":4},"end":{"line":186,"column":52}},"63":{"start":{"line":190,"column":0},"end":{"line":190,"column":62}},"64":{"start":{"line":192,"column":0},"end":{"line":197,"column":3}},"65":{"start":{"line":195,"column":4},"end":{"line":195,"column":54}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","","var _introspectionQuery = require('./introspectionQuery');","","Object.defineProperty(exports, 'introspectionQuery', {","  enumerable: true,","  get: function get() {","    return _introspectionQuery.introspectionQuery;","  }","});","","var _getOperationAST = require('./getOperationAST');","","Object.defineProperty(exports, 'getOperationAST', {","  enumerable: true,","  get: function get() {","    return _getOperationAST.getOperationAST;","  }","});","","var _buildClientSchema = require('./buildClientSchema');","","Object.defineProperty(exports, 'buildClientSchema', {","  enumerable: true,","  get: function get() {","    return _buildClientSchema.buildClientSchema;","  }","});","","var _buildASTSchema = require('./buildASTSchema');","","Object.defineProperty(exports, 'buildASTSchema', {","  enumerable: true,","  get: function get() {","    return _buildASTSchema.buildASTSchema;","  }","});","Object.defineProperty(exports, 'buildSchema', {","  enumerable: true,","  get: function get() {","    return _buildASTSchema.buildSchema;","  }","});","","var _extendSchema = require('./extendSchema');","","Object.defineProperty(exports, 'extendSchema', {","  enumerable: true,","  get: function get() {","    return _extendSchema.extendSchema;","  }","});","","var _schemaPrinter = require('./schemaPrinter');","","Object.defineProperty(exports, 'printSchema', {","  enumerable: true,","  get: function get() {","    return _schemaPrinter.printSchema;","  }","});","Object.defineProperty(exports, 'printType', {","  enumerable: true,","  get: function get() {","    return _schemaPrinter.printType;","  }","});","Object.defineProperty(exports, 'printIntrospectionSchema', {","  enumerable: true,","  get: function get() {","    return _schemaPrinter.printIntrospectionSchema;","  }","});","","var _typeFromAST = require('./typeFromAST');","","Object.defineProperty(exports, 'typeFromAST', {","  enumerable: true,","  get: function get() {","    return _typeFromAST.typeFromAST;","  }","});","","var _valueFromAST = require('./valueFromAST');","","Object.defineProperty(exports, 'valueFromAST', {","  enumerable: true,","  get: function get() {","    return _valueFromAST.valueFromAST;","  }","});","","var _astFromValue = require('./astFromValue');","","Object.defineProperty(exports, 'astFromValue', {","  enumerable: true,","  get: function get() {","    return _astFromValue.astFromValue;","  }","});","","var _TypeInfo = require('./TypeInfo');","","Object.defineProperty(exports, 'TypeInfo', {","  enumerable: true,","  get: function get() {","    return _TypeInfo.TypeInfo;","  }","});","","var _isValidJSValue = require('./isValidJSValue');","","Object.defineProperty(exports, 'isValidJSValue', {","  enumerable: true,","  get: function get() {","    return _isValidJSValue.isValidJSValue;","  }","});","","var _isValidLiteralValue = require('./isValidLiteralValue');","","Object.defineProperty(exports, 'isValidLiteralValue', {","  enumerable: true,","  get: function get() {","    return _isValidLiteralValue.isValidLiteralValue;","  }","});","","var _concatAST = require('./concatAST');","","Object.defineProperty(exports, 'concatAST', {","  enumerable: true,","  get: function get() {","    return _concatAST.concatAST;","  }","});","","var _separateOperations = require('./separateOperations');","","Object.defineProperty(exports, 'separateOperations', {","  enumerable: true,","  get: function get() {","    return _separateOperations.separateOperations;","  }","});","","var _typeComparators = require('./typeComparators');","","Object.defineProperty(exports, 'isEqualType', {","  enumerable: true,","  get: function get() {","    return _typeComparators.isEqualType;","  }","});","Object.defineProperty(exports, 'isTypeSubTypeOf', {","  enumerable: true,","  get: function get() {","    return _typeComparators.isTypeSubTypeOf;","  }","});","Object.defineProperty(exports, 'doTypesOverlap', {","  enumerable: true,","  get: function get() {","    return _typeComparators.doTypesOverlap;","  }","});","","var _assertValidName = require('./assertValidName');","","Object.defineProperty(exports, 'assertValidName', {","  enumerable: true,","  get: function get() {","    return _assertValidName.assertValidName;","  }","});","","var _findBreakingChanges = require('./findBreakingChanges');","","Object.defineProperty(exports, 'findBreakingChanges', {","  enumerable: true,","  get: function get() {","    return _findBreakingChanges.findBreakingChanges;","  }","});","","var _findDeprecatedUsages = require('./findDeprecatedUsages');","","Object.defineProperty(exports, 'findDeprecatedUsages', {","  enumerable: true,","  get: function get() {","    return _findDeprecatedUsages.findDeprecatedUsages;","  }","});"],"l":{"3":1,"7":1,"9":1,"12":2,"16":1,"18":1,"21":2,"25":1,"27":1,"30":2,"34":1,"36":1,"39":2,"42":1,"45":2,"49":1,"51":1,"54":2,"58":1,"60":1,"63":2,"66":1,"69":2,"72":1,"75":0,"79":1,"81":1,"84":2,"88":1,"90":1,"93":2,"97":1,"99":1,"102":2,"106":1,"108":1,"111":2,"115":1,"117":1,"120":2,"124":1,"126":1,"129":2,"133":1,"135":1,"138":2,"142":1,"144":1,"147":2,"151":1,"153":1,"156":2,"159":1,"162":2,"165":1,"168":2,"172":1,"174":1,"177":2,"181":1,"183":1,"186":2,"190":1,"192":1,"195":2}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/introspectionQuery.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/introspectionQuery.js","s":{"1":1,"2":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":1595}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","var introspectionQuery = exports.introspectionQuery = '\\n  query IntrospectionQuery {\\n    __schema {\\n      queryType { name }\\n      mutationType { name }\\n      subscriptionType { name }\\n      types {\\n        ...FullType\\n      }\\n      directives {\\n        name\\n        description\\n        locations\\n        args {\\n          ...InputValue\\n        }\\n      }\\n    }\\n  }\\n\\n  fragment FullType on __Type {\\n    kind\\n    name\\n    description\\n    fields(includeDeprecated: true) {\\n      name\\n      description\\n      args {\\n        ...InputValue\\n      }\\n      type {\\n        ...TypeRef\\n      }\\n      isDeprecated\\n      deprecationReason\\n    }\\n    inputFields {\\n      ...InputValue\\n    }\\n    interfaces {\\n      ...TypeRef\\n    }\\n    enumValues(includeDeprecated: true) {\\n      name\\n      description\\n      isDeprecated\\n      deprecationReason\\n    }\\n    possibleTypes {\\n      ...TypeRef\\n    }\\n  }\\n\\n  fragment InputValue on __InputValue {\\n    name\\n    description\\n    type { ...TypeRef }\\n    defaultValue\\n  }\\n\\n  fragment TypeRef on __Type {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n                ofType {\\n                  kind\\n                  name\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n';","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/getOperationAST.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/getOperationAST.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"getOperationAST","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":15,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":42}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":42}},"4":{"start":{"line":15,"column":0},"end":{"line":34,"column":1}},"5":{"start":{"line":16,"column":2},"end":{"line":16,"column":23}},"6":{"start":{"line":17,"column":2},"end":{"line":32,"column":3}},"7":{"start":{"line":18,"column":4},"end":{"line":18,"column":48}},"8":{"start":{"line":19,"column":4},"end":{"line":31,"column":5}},"9":{"start":{"line":20,"column":6},"end":{"line":30,"column":7}},"10":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"11":{"start":{"line":25,"column":10},"end":{"line":25,"column":22}},"12":{"start":{"line":27,"column":8},"end":{"line":27,"column":31}},"13":{"start":{"line":28,"column":13},"end":{"line":30,"column":7}},"14":{"start":{"line":29,"column":8},"end":{"line":29,"column":26}},"15":{"start":{"line":33,"column":2},"end":{"line":33,"column":19}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":6},"end":{"line":20,"column":6}},{"start":{"line":20,"column":6},"end":{"line":20,"column":6}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":8}},{"start":{"line":24,"column":8},"end":{"line":24,"column":8}}]},"4":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":13},"end":{"line":28,"column":13}},{"start":{"line":28,"column":13},"end":{"line":28,"column":13}}]},"5":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":17},"end":{"line":28,"column":32}},{"start":{"line":28,"column":36},"end":{"line":28,"column":75}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.getOperationAST = getOperationAST;","","var _kinds = require('../language/kinds');","","/**"," * Returns an operation AST given a document AST and optionally an operation"," * name. If a name is not provided, an operation is only returned if only one is"," * provided in the document."," */","function getOperationAST(documentAST, operationName) {","  var operation = null;","  for (var i = 0; i < documentAST.definitions.length; i++) {","    var definition = documentAST.definitions[i];","    if (definition.kind === _kinds.OPERATION_DEFINITION) {","      if (!operationName) {","        // If no operation name was provided, only return an Operation if there","        // is one defined in the document. Upon encountering the second, return","        // null.","        if (operation) {","          return null;","        }","        operation = definition;","      } else if (definition.name && definition.name.value === operationName) {","        return definition;","      }","    }","  }","  return operation;","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"8":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"24":0,"25":0,"27":0,"28":0,"29":0,"33":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/buildClientSchema.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/buildClientSchema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":3,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":1,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":1,"80":0,"81":0,"82":1,"83":0,"84":1,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0},"b":{"1":[3,0],"2":[3,3],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":37}}},"2":{"name":"buildClientSchema","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":42}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":78},"end":{"line":51,"column":94}}},"4":{"name":"getType","line":76,"loc":{"start":{"line":76,"column":2},"end":{"line":76,"column":28}}},"5":{"name":"getNamedType","line":96,"loc":{"start":{"line":96,"column":2},"end":{"line":96,"column":34}}},"6":{"name":"getInputType","line":109,"loc":{"start":{"line":109,"column":2},"end":{"line":109,"column":33}}},"7":{"name":"getOutputType","line":115,"loc":{"start":{"line":115,"column":2},"end":{"line":115,"column":34}}},"8":{"name":"getObjectType","line":121,"loc":{"start":{"line":121,"column":2},"end":{"line":121,"column":34}}},"9":{"name":"getInterfaceType","line":127,"loc":{"start":{"line":127,"column":2},"end":{"line":127,"column":37}}},"10":{"name":"buildType","line":135,"loc":{"start":{"line":135,"column":2},"end":{"line":135,"column":27}}},"11":{"name":"buildScalarDef","line":154,"loc":{"start":{"line":154,"column":2},"end":{"line":154,"column":47}}},"12":{"name":"serialize","line":158,"loc":{"start":{"line":158,"column":17},"end":{"line":158,"column":40}}},"13":{"name":"parseValue","line":165,"loc":{"start":{"line":165,"column":18},"end":{"line":165,"column":40}}},"14":{"name":"parseLiteral","line":168,"loc":{"start":{"line":168,"column":20},"end":{"line":168,"column":44}}},"15":{"name":"buildObjectDef","line":174,"loc":{"start":{"line":174,"column":2},"end":{"line":174,"column":47}}},"16":{"name":"fields","line":179,"loc":{"start":{"line":179,"column":14},"end":{"line":179,"column":32}}},"17":{"name":"buildInterfaceDef","line":185,"loc":{"start":{"line":185,"column":2},"end":{"line":185,"column":53}}},"18":{"name":"fields","line":189,"loc":{"start":{"line":189,"column":14},"end":{"line":189,"column":32}}},"19":{"name":"buildUnionDef","line":196,"loc":{"start":{"line":196,"column":2},"end":{"line":196,"column":45}}},"20":{"name":"buildEnumDef","line":205,"loc":{"start":{"line":205,"column":2},"end":{"line":205,"column":43}}},"21":{"name":"(anonymous_21)","line":209,"loc":{"start":{"line":209,"column":69},"end":{"line":209,"column":99}}},"22":{"name":"(anonymous_22)","line":211,"loc":{"start":{"line":211,"column":9},"end":{"line":211,"column":39}}},"23":{"name":"buildInputObjectDef","line":220,"loc":{"start":{"line":220,"column":2},"end":{"line":220,"column":57}}},"24":{"name":"fields","line":224,"loc":{"start":{"line":224,"column":14},"end":{"line":224,"column":32}}},"25":{"name":"buildFieldDefMap","line":230,"loc":{"start":{"line":230,"column":2},"end":{"line":230,"column":47}}},"26":{"name":"(anonymous_26)","line":231,"loc":{"start":{"line":231,"column":62},"end":{"line":231,"column":92}}},"27":{"name":"(anonymous_27)","line":233,"loc":{"start":{"line":233,"column":7},"end":{"line":233,"column":37}}},"28":{"name":"buildInputValueDefMap","line":243,"loc":{"start":{"line":243,"column":2},"end":{"line":243,"column":59}}},"29":{"name":"(anonymous_29)","line":244,"loc":{"start":{"line":244,"column":62},"end":{"line":244,"column":84}}},"30":{"name":"buildInputValue","line":249,"loc":{"start":{"line":249,"column":2},"end":{"line":249,"column":52}}},"31":{"name":"buildDirective","line":260,"loc":{"start":{"line":260,"column":2},"end":{"line":260,"column":50}}},"32":{"name":"(anonymous_32)","line":274,"loc":{"start":{"line":274,"column":44},"end":{"line":274,"column":73}}},"33":{"name":"cannotExecuteClientSchema","line":307,"loc":{"start":{"line":307,"column":0},"end":{"line":307,"column":37}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":46}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":53}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":43}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":47}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":49}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":53}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":46}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":44}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":40}},"12":{"start":{"line":26,"column":0},"end":{"line":26,"column":48}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":54}},"14":{"start":{"line":30,"column":0},"end":{"line":30,"column":42}},"15":{"start":{"line":32,"column":0},"end":{"line":32,"column":48}},"16":{"start":{"line":34,"column":0},"end":{"line":34,"column":97}},"17":{"start":{"line":34,"column":39},"end":{"line":34,"column":95}},"18":{"start":{"line":45,"column":0},"end":{"line":297,"column":1}},"19":{"start":{"line":48,"column":2},"end":{"line":48,"column":51}},"20":{"start":{"line":51,"column":2},"end":{"line":53,"column":5}},"21":{"start":{"line":52,"column":4},"end":{"line":52,"column":21}},"22":{"start":{"line":58,"column":2},"end":{"line":72,"column":4}},"23":{"start":{"line":76,"column":2},"end":{"line":94,"column":3}},"24":{"start":{"line":77,"column":4},"end":{"line":83,"column":5}},"25":{"start":{"line":78,"column":6},"end":{"line":78,"column":35}},"26":{"start":{"line":79,"column":6},"end":{"line":81,"column":7}},"27":{"start":{"line":80,"column":8},"end":{"line":80,"column":75}},"28":{"start":{"line":82,"column":6},"end":{"line":82,"column":59}},"29":{"start":{"line":84,"column":4},"end":{"line":92,"column":5}},"30":{"start":{"line":85,"column":6},"end":{"line":85,"column":39}},"31":{"start":{"line":86,"column":6},"end":{"line":88,"column":7}},"32":{"start":{"line":87,"column":8},"end":{"line":87,"column":75}},"33":{"start":{"line":89,"column":6},"end":{"line":89,"column":46}},"34":{"start":{"line":90,"column":6},"end":{"line":90,"column":109}},"35":{"start":{"line":91,"column":6},"end":{"line":91,"column":58}},"36":{"start":{"line":93,"column":4},"end":{"line":93,"column":38}},"37":{"start":{"line":96,"column":2},"end":{"line":107,"column":3}},"38":{"start":{"line":97,"column":4},"end":{"line":99,"column":5}},"39":{"start":{"line":98,"column":6},"end":{"line":98,"column":36}},"40":{"start":{"line":100,"column":4},"end":{"line":100,"column":59}},"41":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"42":{"start":{"line":102,"column":6},"end":{"line":102,"column":179}},"43":{"start":{"line":104,"column":4},"end":{"line":104,"column":47}},"44":{"start":{"line":105,"column":4},"end":{"line":105,"column":37}},"45":{"start":{"line":106,"column":4},"end":{"line":106,"column":19}},"46":{"start":{"line":109,"column":2},"end":{"line":113,"column":3}},"47":{"start":{"line":110,"column":4},"end":{"line":110,"column":32}},"48":{"start":{"line":111,"column":4},"end":{"line":111,"column":121}},"49":{"start":{"line":112,"column":4},"end":{"line":112,"column":16}},"50":{"start":{"line":115,"column":2},"end":{"line":119,"column":3}},"51":{"start":{"line":116,"column":4},"end":{"line":116,"column":32}},"52":{"start":{"line":117,"column":4},"end":{"line":117,"column":120}},"53":{"start":{"line":118,"column":4},"end":{"line":118,"column":16}},"54":{"start":{"line":121,"column":2},"end":{"line":125,"column":3}},"55":{"start":{"line":122,"column":4},"end":{"line":122,"column":32}},"56":{"start":{"line":123,"column":4},"end":{"line":123,"column":137}},"57":{"start":{"line":124,"column":4},"end":{"line":124,"column":16}},"58":{"start":{"line":127,"column":2},"end":{"line":131,"column":3}},"59":{"start":{"line":128,"column":4},"end":{"line":128,"column":32}},"60":{"start":{"line":129,"column":4},"end":{"line":129,"column":140}},"61":{"start":{"line":130,"column":4},"end":{"line":130,"column":16}},"62":{"start":{"line":135,"column":2},"end":{"line":152,"column":3}},"63":{"start":{"line":136,"column":4},"end":{"line":151,"column":5}},"64":{"start":{"line":138,"column":8},"end":{"line":138,"column":36}},"65":{"start":{"line":140,"column":8},"end":{"line":140,"column":36}},"66":{"start":{"line":142,"column":8},"end":{"line":142,"column":39}},"67":{"start":{"line":144,"column":8},"end":{"line":144,"column":35}},"68":{"start":{"line":146,"column":8},"end":{"line":146,"column":34}},"69":{"start":{"line":148,"column":8},"end":{"line":148,"column":41}},"70":{"start":{"line":150,"column":8},"end":{"line":150,"column":182}},"71":{"start":{"line":154,"column":2},"end":{"line":172,"column":3}},"72":{"start":{"line":155,"column":4},"end":{"line":171,"column":7}},"73":{"start":{"line":159,"column":8},"end":{"line":159,"column":18}},"74":{"start":{"line":166,"column":8},"end":{"line":166,"column":21}},"75":{"start":{"line":169,"column":8},"end":{"line":169,"column":21}},"76":{"start":{"line":174,"column":2},"end":{"line":183,"column":3}},"77":{"start":{"line":175,"column":4},"end":{"line":182,"column":7}},"78":{"start":{"line":180,"column":8},"end":{"line":180,"column":53}},"79":{"start":{"line":185,"column":2},"end":{"line":194,"column":3}},"80":{"start":{"line":186,"column":4},"end":{"line":193,"column":7}},"81":{"start":{"line":190,"column":8},"end":{"line":190,"column":56}},"82":{"start":{"line":196,"column":2},"end":{"line":203,"column":3}},"83":{"start":{"line":197,"column":4},"end":{"line":202,"column":7}},"84":{"start":{"line":205,"column":2},"end":{"line":218,"column":3}},"85":{"start":{"line":206,"column":4},"end":{"line":217,"column":7}},"86":{"start":{"line":210,"column":8},"end":{"line":210,"column":39}},"87":{"start":{"line":212,"column":8},"end":{"line":215,"column":10}},"88":{"start":{"line":220,"column":2},"end":{"line":228,"column":3}},"89":{"start":{"line":221,"column":4},"end":{"line":227,"column":7}},"90":{"start":{"line":225,"column":8},"end":{"line":225,"column":75}},"91":{"start":{"line":230,"column":2},"end":{"line":241,"column":3}},"92":{"start":{"line":231,"column":4},"end":{"line":240,"column":7}},"93":{"start":{"line":232,"column":6},"end":{"line":232,"column":37}},"94":{"start":{"line":234,"column":6},"end":{"line":239,"column":8}},"95":{"start":{"line":243,"column":2},"end":{"line":247,"column":3}},"96":{"start":{"line":244,"column":4},"end":{"line":246,"column":24}},"97":{"start":{"line":245,"column":6},"end":{"line":245,"column":29}},"98":{"start":{"line":249,"column":2},"end":{"line":258,"column":3}},"99":{"start":{"line":250,"column":4},"end":{"line":250,"column":58}},"100":{"start":{"line":251,"column":4},"end":{"line":251,"column":175}},"101":{"start":{"line":252,"column":4},"end":{"line":257,"column":6}},"102":{"start":{"line":260,"column":2},"end":{"line":270,"column":3}},"103":{"start":{"line":263,"column":4},"end":{"line":263,"column":541}},"104":{"start":{"line":264,"column":4},"end":{"line":269,"column":7}},"105":{"start":{"line":274,"column":2},"end":{"line":276,"column":5}},"106":{"start":{"line":275,"column":4},"end":{"line":275,"column":48}},"107":{"start":{"line":279,"column":2},"end":{"line":279,"column":63}},"108":{"start":{"line":281,"column":2},"end":{"line":281,"column":111}},"109":{"start":{"line":283,"column":2},"end":{"line":283,"column":123}},"110":{"start":{"line":287,"column":2},"end":{"line":287,"column":108}},"111":{"start":{"line":290,"column":2},"end":{"line":296,"column":5}},"112":{"start":{"line":307,"column":0},"end":{"line":309,"column":1}},"113":{"start":{"line":308,"column":2},"end":{"line":308,"column":86}}},"branchMap":{"1":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":70},"end":{"line":34,"column":73}},{"start":{"line":34,"column":76},"end":{"line":34,"column":94}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":46},"end":{"line":34,"column":49}},{"start":{"line":34,"column":53},"end":{"line":34,"column":67}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":6}},{"start":{"line":79,"column":6},"end":{"line":79,"column":6}}]},"5":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]},"6":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":6},"end":{"line":86,"column":6}},{"start":{"line":86,"column":6},"end":{"line":86,"column":6}}]},"7":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"8":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":101,"column":4}},{"start":{"line":101,"column":4},"end":{"line":101,"column":4}}]},"9":{"line":136,"type":"switch","locations":[{"start":{"line":137,"column":6},"end":{"line":138,"column":36}},{"start":{"line":139,"column":6},"end":{"line":140,"column":36}},{"start":{"line":141,"column":6},"end":{"line":142,"column":39}},{"start":{"line":143,"column":6},"end":{"line":144,"column":35}},{"start":{"line":145,"column":6},"end":{"line":146,"column":34}},{"start":{"line":147,"column":6},"end":{"line":148,"column":41}},{"start":{"line":149,"column":6},"end":{"line":150,"column":182}}]},"10":{"line":251,"type":"cond-expr","locations":[{"start":{"line":251,"column":62},"end":{"line":251,"column":162}},{"start":{"line":251,"column":165},"end":{"line":251,"column":174}}]},"11":{"line":263,"type":"cond-expr","locations":[{"start":{"line":263,"column":55},"end":{"line":263,"column":95}},{"start":{"line":263,"column":98},"end":{"line":263,"column":540}}]},"12":{"line":263,"type":"cond-expr","locations":[{"start":{"line":263,"column":142},"end":{"line":263,"column":144}},{"start":{"line":263,"column":147},"end":{"line":263,"column":184}}]},"13":{"line":263,"type":"cond-expr","locations":[{"start":{"line":263,"column":224},"end":{"line":263,"column":226}},{"start":{"line":263,"column":229},"end":{"line":263,"column":350}}]},"14":{"line":263,"type":"cond-expr","locations":[{"start":{"line":263,"column":389},"end":{"line":263,"column":391}},{"start":{"line":263,"column":394},"end":{"line":263,"column":539}}]},"15":{"line":281,"type":"cond-expr","locations":[{"start":{"line":281,"column":56},"end":{"line":281,"column":103}},{"start":{"line":281,"column":106},"end":{"line":281,"column":110}}]},"16":{"line":283,"type":"cond-expr","locations":[{"start":{"line":283,"column":64},"end":{"line":283,"column":115}},{"start":{"line":283,"column":118},"end":{"line":283,"column":122}}]},"17":{"line":287,"type":"cond-expr","locations":[{"start":{"line":287,"column":52},"end":{"line":287,"column":102}},{"start":{"line":287,"column":105},"end":{"line":287,"column":107}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.buildClientSchema = buildClientSchema;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _keyMap = require('../jsutils/keyMap');","","var _keyMap2 = _interopRequireDefault(_keyMap);","","var _keyValMap = require('../jsutils/keyValMap');","","var _keyValMap2 = _interopRequireDefault(_keyValMap);","","var _valueFromAST = require('./valueFromAST');","","var _parser = require('../language/parser');","","var _schema = require('../type/schema');","","var _definition = require('../type/definition');","","var _introspection = require('../type/introspection');","","var _scalars = require('../type/scalars');","","var _directives = require('../type/directives');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Build a GraphQLSchema for use by client tools."," *"," * Given the result of a client running the introspection query, creates and"," * returns a GraphQLSchema instance which can be then used with all graphql-js"," * tools, but cannot be used to execute a query, as introspection does not"," * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other"," * server-internal mechanisms."," */","function buildClientSchema(introspection) {","","  // Get the schema from the introspection result.","  var schemaIntrospection = introspection.__schema;","","  // Converts the list of types into a keyMap based on the type names.","  var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function (type) {","    return type.name;","  });","","  // A cache to use to store the actual GraphQLType definition objects by name.","  // Initialize to the GraphQL built in scalars. All functions below are inline","  // so that this type def cache is within the scope of the closure.","  var typeDefCache = {","    String: _scalars.GraphQLString,","    Int: _scalars.GraphQLInt,","    Float: _scalars.GraphQLFloat,","    Boolean: _scalars.GraphQLBoolean,","    ID: _scalars.GraphQLID,","    __Schema: _introspection.__Schema,","    __Directive: _introspection.__Directive,","    __DirectiveLocation: _introspection.__DirectiveLocation,","    __Type: _introspection.__Type,","    __Field: _introspection.__Field,","    __InputValue: _introspection.__InputValue,","    __EnumValue: _introspection.__EnumValue,","    __TypeKind: _introspection.__TypeKind","  };","","  // Given a type reference in introspection, return the GraphQLType instance.","  // preferring cached instances before building new instances.","  function getType(typeRef) {","    if (typeRef.kind === _introspection.TypeKind.LIST) {","      var itemRef = typeRef.ofType;","      if (!itemRef) {","        throw new Error('Decorated type deeper than introspection query.');","      }","      return new _definition.GraphQLList(getType(itemRef));","    }","    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {","      var nullableRef = typeRef.ofType;","      if (!nullableRef) {","        throw new Error('Decorated type deeper than introspection query.');","      }","      var nullableType = getType(nullableRef);","      (0, _invariant2.default)(!(nullableType instanceof _definition.GraphQLNonNull), 'No nesting nonnull.');","      return new _definition.GraphQLNonNull(nullableType);","    }","    return getNamedType(typeRef.name);","  }","","  function getNamedType(typeName) {","    if (typeDefCache[typeName]) {","      return typeDefCache[typeName];","    }","    var typeIntrospection = typeIntrospectionMap[typeName];","    if (!typeIntrospection) {","      throw new Error('Invalid or incomplete schema, unknown type: ' + typeName + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');","    }","    var typeDef = buildType(typeIntrospection);","    typeDefCache[typeName] = typeDef;","    return typeDef;","  }","","  function getInputType(typeRef) {","    var type = getType(typeRef);","    (0, _invariant2.default)((0, _definition.isInputType)(type), 'Introspection must provide input type for arguments.');","    return type;","  }","","  function getOutputType(typeRef) {","    var type = getType(typeRef);","    (0, _invariant2.default)((0, _definition.isOutputType)(type), 'Introspection must provide output type for fields.');","    return type;","  }","","  function getObjectType(typeRef) {","    var type = getType(typeRef);","    (0, _invariant2.default)(type instanceof _definition.GraphQLObjectType, 'Introspection must provide object type for possibleTypes.');","    return type;","  }","","  function getInterfaceType(typeRef) {","    var type = getType(typeRef);","    (0, _invariant2.default)(type instanceof _definition.GraphQLInterfaceType, 'Introspection must provide interface type for interfaces.');","    return type;","  }","","  // Given a type's introspection result, construct the correct","  // GraphQLType instance.","  function buildType(type) {","    switch (type.kind) {","      case _introspection.TypeKind.SCALAR:","        return buildScalarDef(type);","      case _introspection.TypeKind.OBJECT:","        return buildObjectDef(type);","      case _introspection.TypeKind.INTERFACE:","        return buildInterfaceDef(type);","      case _introspection.TypeKind.UNION:","        return buildUnionDef(type);","      case _introspection.TypeKind.ENUM:","        return buildEnumDef(type);","      case _introspection.TypeKind.INPUT_OBJECT:","        return buildInputObjectDef(type);","      default:","        throw new Error('Invalid or incomplete schema, unknown kind: ' + type.kind + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');","    }","  }","","  function buildScalarDef(scalarIntrospection) {","    return new _definition.GraphQLScalarType({","      name: scalarIntrospection.name,","      description: scalarIntrospection.description,","      serialize: function serialize(id) {","        return id;","      },","      // Note: validation calls the parse functions to determine if a","      // literal value is correct. Returning null would cause use of custom","      // scalars to always fail validation. Returning false causes them to","      // always pass validation.","      parseValue: function parseValue() {","        return false;","      },","      parseLiteral: function parseLiteral() {","        return false;","      }","    });","  }","","  function buildObjectDef(objectIntrospection) {","    return new _definition.GraphQLObjectType({","      name: objectIntrospection.name,","      description: objectIntrospection.description,","      interfaces: objectIntrospection.interfaces.map(getInterfaceType),","      fields: function fields() {","        return buildFieldDefMap(objectIntrospection);","      }","    });","  }","","  function buildInterfaceDef(interfaceIntrospection) {","    return new _definition.GraphQLInterfaceType({","      name: interfaceIntrospection.name,","      description: interfaceIntrospection.description,","      fields: function fields() {","        return buildFieldDefMap(interfaceIntrospection);","      },","      resolveType: cannotExecuteClientSchema","    });","  }","","  function buildUnionDef(unionIntrospection) {","    return new _definition.GraphQLUnionType({","      name: unionIntrospection.name,","      description: unionIntrospection.description,","      types: unionIntrospection.possibleTypes.map(getObjectType),","      resolveType: cannotExecuteClientSchema","    });","  }","","  function buildEnumDef(enumIntrospection) {","    return new _definition.GraphQLEnumType({","      name: enumIntrospection.name,","      description: enumIntrospection.description,","      values: (0, _keyValMap2.default)(enumIntrospection.enumValues, function (valueIntrospection) {","        return valueIntrospection.name;","      }, function (valueIntrospection) {","        return {","          description: valueIntrospection.description,","          deprecationReason: valueIntrospection.deprecationReason","        };","      })","    });","  }","","  function buildInputObjectDef(inputObjectIntrospection) {","    return new _definition.GraphQLInputObjectType({","      name: inputObjectIntrospection.name,","      description: inputObjectIntrospection.description,","      fields: function fields() {","        return buildInputValueDefMap(inputObjectIntrospection.inputFields);","      }","    });","  }","","  function buildFieldDefMap(typeIntrospection) {","    return (0, _keyValMap2.default)(typeIntrospection.fields, function (fieldIntrospection) {","      return fieldIntrospection.name;","    }, function (fieldIntrospection) {","      return {","        description: fieldIntrospection.description,","        deprecationReason: fieldIntrospection.deprecationReason,","        type: getOutputType(fieldIntrospection.type),","        args: buildInputValueDefMap(fieldIntrospection.args)","      };","    });","  }","","  function buildInputValueDefMap(inputValueIntrospections) {","    return (0, _keyValMap2.default)(inputValueIntrospections, function (inputValue) {","      return inputValue.name;","    }, buildInputValue);","  }","","  function buildInputValue(inputValueIntrospection) {","    var type = getInputType(inputValueIntrospection.type);","    var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;","    return {","      name: inputValueIntrospection.name,","      description: inputValueIntrospection.description,","      type: type,","      defaultValue: defaultValue","    };","  }","","  function buildDirective(directiveIntrospection) {","    // Support deprecated `on****` fields for building `locations`, as this","    // is used by GraphiQL which may need to support outdated servers.","    var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directives.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directives.DirectiveLocation.QUERY, _directives.DirectiveLocation.MUTATION, _directives.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directives.DirectiveLocation.FRAGMENT_DEFINITION, _directives.DirectiveLocation.FRAGMENT_SPREAD, _directives.DirectiveLocation.INLINE_FRAGMENT]);","    return new _directives.GraphQLDirective({","      name: directiveIntrospection.name,","      description: directiveIntrospection.description,","      locations: locations,","      args: buildInputValueDefMap(directiveIntrospection.args)","    });","  }","","  // Iterate through all types, getting the type definition for each, ensuring","  // that any type not directly referenced by a field will get created.","  var types = schemaIntrospection.types.map(function (typeIntrospection) {","    return getNamedType(typeIntrospection.name);","  });","","  // Get the root Query, Mutation, and Subscription types.","  var queryType = getObjectType(schemaIntrospection.queryType);","","  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;","","  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;","","  // Get the directives supported by Introspection, assuming empty-set if","  // directives were not queried for.","  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];","","  // Then produce and return a Schema with these types.","  return new _schema.GraphQLSchema({","    query: queryType,","    mutation: mutationType,","    subscription: subscriptionType,","    types: types,","    directives: directives","  });","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function cannotExecuteClientSchema() {","  throw new Error('Client Schema cannot use Interface or Union types for execution.');","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":1,"34":3,"45":1,"48":0,"51":0,"52":0,"58":0,"76":1,"77":0,"78":0,"79":0,"80":0,"82":0,"84":0,"85":0,"86":0,"87":0,"89":0,"90":0,"91":0,"93":0,"96":1,"97":0,"98":0,"100":0,"101":0,"102":0,"104":0,"105":0,"106":0,"109":1,"110":0,"111":0,"112":0,"115":1,"116":0,"117":0,"118":0,"121":1,"122":0,"123":0,"124":0,"127":1,"128":0,"129":0,"130":0,"135":1,"136":0,"138":0,"140":0,"142":0,"144":0,"146":0,"148":0,"150":0,"154":1,"155":0,"159":0,"166":0,"169":0,"174":1,"175":0,"180":0,"185":1,"186":0,"190":0,"196":1,"197":0,"205":1,"206":0,"210":0,"212":0,"220":1,"221":0,"225":0,"230":1,"231":0,"232":0,"234":0,"243":1,"244":0,"245":0,"249":1,"250":0,"251":0,"252":0,"260":1,"263":0,"264":0,"274":0,"275":0,"279":0,"281":0,"283":0,"287":0,"290":0,"307":1,"308":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/keyValMap.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/jsutils/keyValMap.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"keyValMap","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":39}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":21},"end":{"line":35,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"3":{"start":{"line":34,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":35,"column":2},"end":{"line":37,"column":9}},"5":{"start":{"line":36,"column":4},"end":{"line":36,"column":47}}},"branchMap":{},"code":["\"use strict\";","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.default = keyValMap;","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","/**"," * Creates a keyed JS object from an array, given a function to produce the keys"," * and a function to produce the values from each item in the array."," *"," *     const phoneBook = ["," *       { name: 'Jon', num: '555-1234' },"," *       { name: 'Jenny', num: '867-5309' }"," *     ]"," *"," *     // { Jon: '555-1234', Jenny: '867-5309' }"," *     const phonesByName = keyValMap("," *       phoneBook,"," *       entry => entry.name,"," *       entry => entry.num"," *     )"," *"," */","function keyValMap(list, keyFn, valFn) {","  return list.reduce(function (map, item) {","    return map[keyFn(item)] = valFn(item), map;","  }, {});","}"],"l":{"3":1,"6":1,"34":1,"35":0,"36":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/buildASTSchema.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/buildASTSchema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":3,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":1,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":1,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":0,"125":1,"126":0,"127":0,"128":0,"129":1,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":1,"151":0,"152":0,"153":0,"154":0,"155":1,"156":0,"157":0,"158":0,"159":1,"160":0,"161":0,"162":1,"163":0,"164":0,"165":0,"166":0,"167":1,"168":0,"169":0,"170":0,"171":1,"172":0,"173":0,"174":0,"175":0,"176":1,"177":0,"178":0,"179":1,"180":0,"181":0,"182":0,"183":0,"184":1,"185":0,"186":0,"187":1,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":1,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":1,"211":0,"212":1,"213":0,"214":0,"215":0,"216":0,"217":0,"218":1,"219":0},"b":{"1":[3,0],"2":[3,3],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0,0,0,0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0,0,0,0],"40":[0,0],"41":[0,0],"42":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":37}}},"2":{"name":"buildWrappedType","line":45,"loc":{"start":{"line":45,"column":0},"end":{"line":45,"column":52}}},"3":{"name":"getNamedTypeNode","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":36}}},"4":{"name":"buildASTSchema","line":83,"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":29}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":37},"end":{"line":121,"column":62}}},"6":{"name":"(anonymous_6)","line":181,"loc":{"start":{"line":181,"column":27},"end":{"line":181,"column":42}}},"7":{"name":"(anonymous_7)","line":188,"loc":{"start":{"line":188,"column":23},"end":{"line":188,"column":44}}},"8":{"name":"(anonymous_8)","line":194,"loc":{"start":{"line":194,"column":23},"end":{"line":194,"column":44}}},"9":{"name":"(anonymous_9)","line":200,"loc":{"start":{"line":200,"column":23},"end":{"line":200,"column":44}}},"10":{"name":"getDirective","line":214,"loc":{"start":{"line":214,"column":2},"end":{"line":214,"column":39}}},"11":{"name":"(anonymous_11)","line":218,"loc":{"start":{"line":218,"column":45},"end":{"line":218,"column":61}}},"12":{"name":"getObjectType","line":225,"loc":{"start":{"line":225,"column":2},"end":{"line":225,"column":35}}},"13":{"name":"produceType","line":231,"loc":{"start":{"line":231,"column":2},"end":{"line":231,"column":33}}},"14":{"name":"produceInputType","line":237,"loc":{"start":{"line":237,"column":2},"end":{"line":237,"column":38}}},"15":{"name":"produceOutputType","line":243,"loc":{"start":{"line":243,"column":2},"end":{"line":243,"column":39}}},"16":{"name":"produceObjectType","line":249,"loc":{"start":{"line":249,"column":2},"end":{"line":249,"column":39}}},"17":{"name":"produceInterfaceType","line":255,"loc":{"start":{"line":255,"column":2},"end":{"line":255,"column":42}}},"18":{"name":"typeDefNamed","line":261,"loc":{"start":{"line":261,"column":2},"end":{"line":261,"column":34}}},"19":{"name":"makeSchemaDef","line":278,"loc":{"start":{"line":278,"column":2},"end":{"line":278,"column":30}}},"20":{"name":"makeTypeDef","line":300,"loc":{"start":{"line":300,"column":2},"end":{"line":300,"column":28}}},"21":{"name":"fields","line":305,"loc":{"start":{"line":305,"column":14},"end":{"line":305,"column":32}}},"22":{"name":"interfaces","line":308,"loc":{"start":{"line":308,"column":18},"end":{"line":308,"column":40}}},"23":{"name":"makeFieldDefMap","line":314,"loc":{"start":{"line":314,"column":2},"end":{"line":314,"column":32}}},"24":{"name":"(anonymous_24)","line":315,"loc":{"start":{"line":315,"column":48},"end":{"line":315,"column":65}}},"25":{"name":"(anonymous_25)","line":317,"loc":{"start":{"line":317,"column":7},"end":{"line":317,"column":24}}},"26":{"name":"makeImplementedInterfaces","line":327,"loc":{"start":{"line":327,"column":2},"end":{"line":327,"column":42}}},"27":{"name":"(anonymous_27)","line":328,"loc":{"start":{"line":328,"column":48},"end":{"line":328,"column":65}}},"28":{"name":"makeInputValues","line":333,"loc":{"start":{"line":333,"column":2},"end":{"line":333,"column":35}}},"29":{"name":"(anonymous_29)","line":334,"loc":{"start":{"line":334,"column":44},"end":{"line":334,"column":61}}},"30":{"name":"(anonymous_30)","line":336,"loc":{"start":{"line":336,"column":7},"end":{"line":336,"column":24}}},"31":{"name":"makeInterfaceDef","line":346,"loc":{"start":{"line":346,"column":2},"end":{"line":346,"column":33}}},"32":{"name":"fields","line":351,"loc":{"start":{"line":351,"column":14},"end":{"line":351,"column":32}}},"33":{"name":"makeEnumDef","line":358,"loc":{"start":{"line":358,"column":2},"end":{"line":358,"column":28}}},"34":{"name":"(anonymous_34)","line":362,"loc":{"start":{"line":362,"column":51},"end":{"line":362,"column":72}}},"35":{"name":"(anonymous_35)","line":364,"loc":{"start":{"line":364,"column":9},"end":{"line":364,"column":30}}},"36":{"name":"makeUnionDef","line":375,"loc":{"start":{"line":375,"column":2},"end":{"line":375,"column":29}}},"37":{"name":"(anonymous_37)","line":379,"loc":{"start":{"line":379,"column":27},"end":{"line":379,"column":40}}},"38":{"name":"makeScalarDef","line":386,"loc":{"start":{"line":386,"column":2},"end":{"line":386,"column":30}}},"39":{"name":"serialize","line":390,"loc":{"start":{"line":390,"column":17},"end":{"line":390,"column":38}}},"40":{"name":"parseValue","line":397,"loc":{"start":{"line":397,"column":18},"end":{"line":397,"column":40}}},"41":{"name":"parseLiteral","line":400,"loc":{"start":{"line":400,"column":20},"end":{"line":400,"column":44}}},"42":{"name":"makeInputObjectDef","line":406,"loc":{"start":{"line":406,"column":2},"end":{"line":406,"column":35}}},"43":{"name":"fields","line":410,"loc":{"start":{"line":410,"column":14},"end":{"line":410,"column":32}}},"44":{"name":"getDeprecationReason","line":421,"loc":{"start":{"line":421,"column":0},"end":{"line":421,"column":42}}},"45":{"name":"(anonymous_45)","line":422,"loc":{"start":{"line":422,"column":68},"end":{"line":422,"column":89}}},"46":{"name":"getDescription","line":439,"loc":{"start":{"line":439,"column":0},"end":{"line":439,"column":30}}},"47":{"name":"(anonymous_47)","line":456,"loc":{"start":{"line":456,"column":32},"end":{"line":456,"column":51}}},"48":{"name":"buildSchema","line":465,"loc":{"start":{"line":465,"column":0},"end":{"line":465,"column":29}}},"49":{"name":"leadingSpaces","line":470,"loc":{"start":{"line":470,"column":0},"end":{"line":470,"column":28}}},"50":{"name":"cannotExecuteSchema","line":480,"loc":{"start":{"line":480,"column":0},"end":{"line":480,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":40}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":52}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":40}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":34}},"6":{"start":{"line":11,"column":0},"end":{"line":11,"column":39}},"7":{"start":{"line":13,"column":0},"end":{"line":13,"column":43}},"8":{"start":{"line":15,"column":0},"end":{"line":15,"column":49}},"9":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"10":{"start":{"line":19,"column":0},"end":{"line":19,"column":49}},"11":{"start":{"line":21,"column":0},"end":{"line":21,"column":53}},"12":{"start":{"line":23,"column":0},"end":{"line":23,"column":46}},"13":{"start":{"line":25,"column":0},"end":{"line":25,"column":42}},"14":{"start":{"line":27,"column":0},"end":{"line":27,"column":44}},"15":{"start":{"line":29,"column":0},"end":{"line":29,"column":45}},"16":{"start":{"line":31,"column":0},"end":{"line":31,"column":42}},"17":{"start":{"line":33,"column":0},"end":{"line":33,"column":40}},"18":{"start":{"line":35,"column":0},"end":{"line":35,"column":42}},"19":{"start":{"line":37,"column":0},"end":{"line":37,"column":48}},"20":{"start":{"line":39,"column":0},"end":{"line":39,"column":48}},"21":{"start":{"line":41,"column":0},"end":{"line":41,"column":54}},"22":{"start":{"line":43,"column":0},"end":{"line":43,"column":97}},"23":{"start":{"line":43,"column":39},"end":{"line":43,"column":95}},"24":{"start":{"line":45,"column":0},"end":{"line":55,"column":1}},"25":{"start":{"line":46,"column":2},"end":{"line":48,"column":3}},"26":{"start":{"line":47,"column":4},"end":{"line":47,"column":88}},"27":{"start":{"line":49,"column":2},"end":{"line":53,"column":3}},"28":{"start":{"line":50,"column":4},"end":{"line":50,"column":70}},"29":{"start":{"line":51,"column":4},"end":{"line":51,"column":106}},"30":{"start":{"line":52,"column":4},"end":{"line":52,"column":55}},"31":{"start":{"line":54,"column":2},"end":{"line":54,"column":19}},"32":{"start":{"line":65,"column":0},"end":{"line":71,"column":1}},"33":{"start":{"line":66,"column":2},"end":{"line":66,"column":27}},"34":{"start":{"line":67,"column":2},"end":{"line":69,"column":3}},"35":{"start":{"line":68,"column":4},"end":{"line":68,"column":31}},"36":{"start":{"line":70,"column":2},"end":{"line":70,"column":19}},"37":{"start":{"line":83,"column":0},"end":{"line":415,"column":1}},"38":{"start":{"line":84,"column":2},"end":{"line":86,"column":3}},"39":{"start":{"line":85,"column":4},"end":{"line":85,"column":52}},"40":{"start":{"line":88,"column":2},"end":{"line":88,"column":25}},"41":{"start":{"line":90,"column":2},"end":{"line":90,"column":20}},"42":{"start":{"line":91,"column":2},"end":{"line":91,"column":36}},"43":{"start":{"line":92,"column":2},"end":{"line":92,"column":25}},"44":{"start":{"line":93,"column":2},"end":{"line":115,"column":3}},"45":{"start":{"line":94,"column":4},"end":{"line":94,"column":31}},"46":{"start":{"line":95,"column":4},"end":{"line":114,"column":5}},"47":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"48":{"start":{"line":98,"column":10},"end":{"line":98,"column":70}},"49":{"start":{"line":100,"column":8},"end":{"line":100,"column":22}},"50":{"start":{"line":101,"column":8},"end":{"line":101,"column":14}},"51":{"start":{"line":108,"column":8},"end":{"line":108,"column":25}},"52":{"start":{"line":109,"column":8},"end":{"line":109,"column":34}},"53":{"start":{"line":110,"column":8},"end":{"line":110,"column":14}},"54":{"start":{"line":112,"column":8},"end":{"line":112,"column":30}},"55":{"start":{"line":113,"column":8},"end":{"line":113,"column":14}},"56":{"start":{"line":117,"column":2},"end":{"line":117,"column":29}},"57":{"start":{"line":118,"column":2},"end":{"line":118,"column":32}},"58":{"start":{"line":119,"column":2},"end":{"line":119,"column":36}},"59":{"start":{"line":120,"column":2},"end":{"line":159,"column":3}},"60":{"start":{"line":121,"column":4},"end":{"line":148,"column":7}},"61":{"start":{"line":122,"column":6},"end":{"line":122,"column":51}},"62":{"start":{"line":123,"column":6},"end":{"line":147,"column":7}},"63":{"start":{"line":124,"column":8},"end":{"line":126,"column":9}},"64":{"start":{"line":125,"column":10},"end":{"line":125,"column":73}},"65":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"66":{"start":{"line":128,"column":10},"end":{"line":128,"column":92}},"67":{"start":{"line":130,"column":8},"end":{"line":130,"column":33}},"68":{"start":{"line":131,"column":13},"end":{"line":147,"column":7}},"69":{"start":{"line":132,"column":8},"end":{"line":134,"column":9}},"70":{"start":{"line":133,"column":10},"end":{"line":133,"column":76}},"71":{"start":{"line":135,"column":8},"end":{"line":137,"column":9}},"72":{"start":{"line":136,"column":10},"end":{"line":136,"column":95}},"73":{"start":{"line":138,"column":8},"end":{"line":138,"column":36}},"74":{"start":{"line":139,"column":13},"end":{"line":147,"column":7}},"75":{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},"76":{"start":{"line":141,"column":10},"end":{"line":141,"column":80}},"77":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"78":{"start":{"line":144,"column":10},"end":{"line":144,"column":99}},"79":{"start":{"line":146,"column":8},"end":{"line":146,"column":40}},"80":{"start":{"line":150,"column":4},"end":{"line":152,"column":5}},"81":{"start":{"line":151,"column":6},"end":{"line":151,"column":30}},"82":{"start":{"line":153,"column":4},"end":{"line":155,"column":5}},"83":{"start":{"line":154,"column":6},"end":{"line":154,"column":36}},"84":{"start":{"line":156,"column":4},"end":{"line":158,"column":5}},"85":{"start":{"line":157,"column":6},"end":{"line":157,"column":44}},"86":{"start":{"line":161,"column":2},"end":{"line":163,"column":3}},"87":{"start":{"line":162,"column":4},"end":{"line":162,"column":93}},"88":{"start":{"line":165,"column":2},"end":{"line":179,"column":4}},"89":{"start":{"line":181,"column":2},"end":{"line":183,"column":5}},"90":{"start":{"line":182,"column":4},"end":{"line":182,"column":40}},"91":{"start":{"line":185,"column":2},"end":{"line":185,"column":51}},"92":{"start":{"line":188,"column":2},"end":{"line":192,"column":3}},"93":{"start":{"line":189,"column":4},"end":{"line":189,"column":37}},"94":{"start":{"line":191,"column":4},"end":{"line":191,"column":54}},"95":{"start":{"line":194,"column":2},"end":{"line":198,"column":3}},"96":{"start":{"line":195,"column":4},"end":{"line":195,"column":40}},"97":{"start":{"line":197,"column":4},"end":{"line":197,"column":57}},"98":{"start":{"line":200,"column":2},"end":{"line":204,"column":3}},"99":{"start":{"line":201,"column":4},"end":{"line":201,"column":43}},"100":{"start":{"line":203,"column":4},"end":{"line":203,"column":60}},"101":{"start":{"line":206,"column":2},"end":{"line":212,"column":5}},"102":{"start":{"line":214,"column":2},"end":{"line":223,"column":3}},"103":{"start":{"line":215,"column":4},"end":{"line":222,"column":7}},"104":{"start":{"line":219,"column":8},"end":{"line":219,"column":26}},"105":{"start":{"line":225,"column":2},"end":{"line":229,"column":3}},"106":{"start":{"line":226,"column":4},"end":{"line":226,"column":49}},"107":{"start":{"line":227,"column":4},"end":{"line":227,"column":109}},"108":{"start":{"line":228,"column":4},"end":{"line":228,"column":16}},"109":{"start":{"line":231,"column":2},"end":{"line":235,"column":3}},"110":{"start":{"line":232,"column":4},"end":{"line":232,"column":57}},"111":{"start":{"line":233,"column":4},"end":{"line":233,"column":41}},"112":{"start":{"line":234,"column":4},"end":{"line":234,"column":47}},"113":{"start":{"line":237,"column":2},"end":{"line":241,"column":3}},"114":{"start":{"line":238,"column":4},"end":{"line":238,"column":37}},"115":{"start":{"line":239,"column":4},"end":{"line":239,"column":89}},"116":{"start":{"line":240,"column":4},"end":{"line":240,"column":16}},"117":{"start":{"line":243,"column":2},"end":{"line":247,"column":3}},"118":{"start":{"line":244,"column":4},"end":{"line":244,"column":37}},"119":{"start":{"line":245,"column":4},"end":{"line":245,"column":91}},"120":{"start":{"line":246,"column":4},"end":{"line":246,"column":16}},"121":{"start":{"line":249,"column":2},"end":{"line":253,"column":3}},"122":{"start":{"line":250,"column":4},"end":{"line":250,"column":37}},"123":{"start":{"line":251,"column":4},"end":{"line":251,"column":101}},"124":{"start":{"line":252,"column":4},"end":{"line":252,"column":16}},"125":{"start":{"line":255,"column":2},"end":{"line":259,"column":3}},"126":{"start":{"line":256,"column":4},"end":{"line":256,"column":37}},"127":{"start":{"line":257,"column":4},"end":{"line":257,"column":107}},"128":{"start":{"line":258,"column":4},"end":{"line":258,"column":16}},"129":{"start":{"line":261,"column":2},"end":{"line":276,"column":3}},"130":{"start":{"line":262,"column":4},"end":{"line":264,"column":5}},"131":{"start":{"line":263,"column":6},"end":{"line":263,"column":36}},"132":{"start":{"line":266,"column":4},"end":{"line":268,"column":5}},"133":{"start":{"line":267,"column":6},"end":{"line":267,"column":72}},"134":{"start":{"line":270,"column":4},"end":{"line":270,"column":56}},"135":{"start":{"line":271,"column":4},"end":{"line":273,"column":5}},"136":{"start":{"line":272,"column":6},"end":{"line":272,"column":69}},"137":{"start":{"line":274,"column":4},"end":{"line":274,"column":42}},"138":{"start":{"line":275,"column":4},"end":{"line":275,"column":24}},"139":{"start":{"line":278,"column":2},"end":{"line":298,"column":3}},"140":{"start":{"line":279,"column":4},"end":{"line":281,"column":5}},"141":{"start":{"line":280,"column":6},"end":{"line":280,"column":45}},"142":{"start":{"line":282,"column":4},"end":{"line":297,"column":5}},"143":{"start":{"line":284,"column":8},"end":{"line":284,"column":32}},"144":{"start":{"line":286,"column":8},"end":{"line":286,"column":37}},"145":{"start":{"line":288,"column":8},"end":{"line":288,"column":32}},"146":{"start":{"line":290,"column":8},"end":{"line":290,"column":33}},"147":{"start":{"line":292,"column":8},"end":{"line":292,"column":34}},"148":{"start":{"line":294,"column":8},"end":{"line":294,"column":39}},"149":{"start":{"line":296,"column":8},"end":{"line":296,"column":71}},"150":{"start":{"line":300,"column":2},"end":{"line":312,"column":3}},"151":{"start":{"line":301,"column":4},"end":{"line":301,"column":34}},"152":{"start":{"line":302,"column":4},"end":{"line":311,"column":7}},"153":{"start":{"line":306,"column":8},"end":{"line":306,"column":36}},"154":{"start":{"line":309,"column":8},"end":{"line":309,"column":46}},"155":{"start":{"line":314,"column":2},"end":{"line":325,"column":3}},"156":{"start":{"line":315,"column":4},"end":{"line":324,"column":7}},"157":{"start":{"line":316,"column":6},"end":{"line":316,"column":30}},"158":{"start":{"line":318,"column":6},"end":{"line":323,"column":8}},"159":{"start":{"line":327,"column":2},"end":{"line":331,"column":3}},"160":{"start":{"line":328,"column":4},"end":{"line":330,"column":7}},"161":{"start":{"line":329,"column":6},"end":{"line":329,"column":41}},"162":{"start":{"line":333,"column":2},"end":{"line":344,"column":3}},"163":{"start":{"line":334,"column":4},"end":{"line":343,"column":7}},"164":{"start":{"line":335,"column":6},"end":{"line":335,"column":30}},"165":{"start":{"line":337,"column":6},"end":{"line":337,"column":46}},"166":{"start":{"line":338,"column":6},"end":{"line":342,"column":8}},"167":{"start":{"line":346,"column":2},"end":{"line":356,"column":3}},"168":{"start":{"line":347,"column":4},"end":{"line":347,"column":34}},"169":{"start":{"line":348,"column":4},"end":{"line":355,"column":7}},"170":{"start":{"line":352,"column":8},"end":{"line":352,"column":36}},"171":{"start":{"line":358,"column":2},"end":{"line":373,"column":3}},"172":{"start":{"line":359,"column":4},"end":{"line":370,"column":7}},"173":{"start":{"line":363,"column":8},"end":{"line":363,"column":36}},"174":{"start":{"line":365,"column":8},"end":{"line":368,"column":10}},"175":{"start":{"line":372,"column":4},"end":{"line":372,"column":20}},"176":{"start":{"line":375,"column":2},"end":{"line":384,"column":3}},"177":{"start":{"line":376,"column":4},"end":{"line":383,"column":7}},"178":{"start":{"line":380,"column":8},"end":{"line":380,"column":36}},"179":{"start":{"line":386,"column":2},"end":{"line":404,"column":3}},"180":{"start":{"line":387,"column":4},"end":{"line":403,"column":7}},"181":{"start":{"line":391,"column":8},"end":{"line":391,"column":20}},"182":{"start":{"line":398,"column":8},"end":{"line":398,"column":21}},"183":{"start":{"line":401,"column":8},"end":{"line":401,"column":21}},"184":{"start":{"line":406,"column":2},"end":{"line":414,"column":3}},"185":{"start":{"line":407,"column":4},"end":{"line":413,"column":7}},"186":{"start":{"line":411,"column":8},"end":{"line":411,"column":43}},"187":{"start":{"line":421,"column":0},"end":{"line":433,"column":1}},"188":{"start":{"line":422,"column":2},"end":{"line":424,"column":5}},"189":{"start":{"line":423,"column":4},"end":{"line":423,"column":80}},"190":{"start":{"line":425,"column":2},"end":{"line":427,"column":3}},"191":{"start":{"line":426,"column":4},"end":{"line":426,"column":11}},"192":{"start":{"line":429,"column":2},"end":{"line":430,"column":41}},"193":{"start":{"line":432,"column":2},"end":{"line":432,"column":16}},"194":{"start":{"line":439,"column":0},"end":{"line":459,"column":1}},"195":{"start":{"line":440,"column":2},"end":{"line":440,"column":21}},"196":{"start":{"line":441,"column":2},"end":{"line":443,"column":3}},"197":{"start":{"line":442,"column":4},"end":{"line":442,"column":11}},"198":{"start":{"line":444,"column":2},"end":{"line":444,"column":20}},"199":{"start":{"line":445,"column":2},"end":{"line":445,"column":25}},"200":{"start":{"line":446,"column":2},"end":{"line":446,"column":34}},"201":{"start":{"line":447,"column":2},"end":{"line":455,"column":3}},"202":{"start":{"line":448,"column":4},"end":{"line":448,"column":36}},"203":{"start":{"line":449,"column":4},"end":{"line":449,"column":38}},"204":{"start":{"line":450,"column":4},"end":{"line":452,"column":5}},"205":{"start":{"line":451,"column":6},"end":{"line":451,"column":25}},"206":{"start":{"line":453,"column":4},"end":{"line":453,"column":25}},"207":{"start":{"line":454,"column":4},"end":{"line":454,"column":23}},"208":{"start":{"line":456,"column":2},"end":{"line":458,"column":16}},"209":{"start":{"line":457,"column":4},"end":{"line":457,"column":36}},"210":{"start":{"line":465,"column":0},"end":{"line":467,"column":1}},"211":{"start":{"line":466,"column":2},"end":{"line":466,"column":52}},"212":{"start":{"line":470,"column":0},"end":{"line":478,"column":1}},"213":{"start":{"line":471,"column":2},"end":{"line":471,"column":12}},"214":{"start":{"line":472,"column":2},"end":{"line":476,"column":3}},"215":{"start":{"line":473,"column":4},"end":{"line":475,"column":5}},"216":{"start":{"line":474,"column":6},"end":{"line":474,"column":12}},"217":{"start":{"line":477,"column":2},"end":{"line":477,"column":11}},"218":{"start":{"line":480,"column":0},"end":{"line":482,"column":1}},"219":{"start":{"line":481,"column":2},"end":{"line":481,"column":89}}},"branchMap":{"1":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":70},"end":{"line":43,"column":73}},{"start":{"line":43,"column":76},"end":{"line":43,"column":94}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":46},"end":{"line":43,"column":49}},{"start":{"line":43,"column":53},"end":{"line":43,"column":67}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"4":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":2},"end":{"line":49,"column":2}},{"start":{"line":49,"column":2},"end":{"line":49,"column":2}}]},"5":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":9},"end":{"line":67,"column":44}},{"start":{"line":67,"column":48},"end":{"line":67,"column":87}}]},"6":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"7":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":10}},{"start":{"line":84,"column":14},"end":{"line":84,"column":42}}]},"8":{"line":95,"type":"switch","locations":[{"start":{"line":96,"column":6},"end":{"line":101,"column":14}},{"start":{"line":102,"column":6},"end":{"line":102,"column":41}},{"start":{"line":103,"column":6},"end":{"line":103,"column":41}},{"start":{"line":104,"column":6},"end":{"line":104,"column":44}},{"start":{"line":105,"column":6},"end":{"line":105,"column":39}},{"start":{"line":106,"column":6},"end":{"line":106,"column":40}},{"start":{"line":107,"column":6},"end":{"line":110,"column":14}},{"start":{"line":111,"column":6},"end":{"line":113,"column":14}}]},"9":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"10":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":2},"end":{"line":120,"column":2}},{"start":{"line":120,"column":2},"end":{"line":120,"column":2}}]},"11":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":6},"end":{"line":123,"column":6}},{"start":{"line":123,"column":6},"end":{"line":123,"column":6}}]},"12":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":8},"end":{"line":124,"column":8}},{"start":{"line":124,"column":8},"end":{"line":124,"column":8}}]},"13":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":8}},{"start":{"line":127,"column":8},"end":{"line":127,"column":8}}]},"14":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":13},"end":{"line":131,"column":13}},{"start":{"line":131,"column":13},"end":{"line":131,"column":13}}]},"15":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":8}},{"start":{"line":132,"column":8},"end":{"line":132,"column":8}}]},"16":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":8},"end":{"line":135,"column":8}},{"start":{"line":135,"column":8},"end":{"line":135,"column":8}}]},"17":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":13},"end":{"line":139,"column":13}},{"start":{"line":139,"column":13},"end":{"line":139,"column":13}}]},"18":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"19":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"20":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":4},"end":{"line":150,"column":4}},{"start":{"line":150,"column":4},"end":{"line":150,"column":4}}]},"21":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":4},"end":{"line":153,"column":4}},{"start":{"line":153,"column":4},"end":{"line":153,"column":4}}]},"22":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":156,"column":4}},{"start":{"line":156,"column":4},"end":{"line":156,"column":4}}]},"23":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":2},"end":{"line":161,"column":2}},{"start":{"line":161,"column":2},"end":{"line":161,"column":2}}]},"24":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":2},"end":{"line":188,"column":2}},{"start":{"line":188,"column":2},"end":{"line":188,"column":2}}]},"25":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":2},"end":{"line":194,"column":2}},{"start":{"line":194,"column":2},"end":{"line":194,"column":2}}]},"26":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":2},"end":{"line":200,"column":2}},{"start":{"line":200,"column":2},"end":{"line":200,"column":2}}]},"27":{"line":208,"type":"cond-expr","locations":[{"start":{"line":208,"column":33},"end":{"line":208,"column":73}},{"start":{"line":208,"column":76},"end":{"line":208,"column":80}}]},"28":{"line":209,"type":"cond-expr","locations":[{"start":{"line":209,"column":41},"end":{"line":209,"column":85}},{"start":{"line":209,"column":88},"end":{"line":209,"column":92}}]},"29":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":12},"end":{"line":221,"column":35}},{"start":{"line":221,"column":39},"end":{"line":221,"column":79}}]},"30":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":4},"end":{"line":262,"column":4}},{"start":{"line":262,"column":4},"end":{"line":262,"column":4}}]},"31":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":266,"column":4}},{"start":{"line":266,"column":4},"end":{"line":266,"column":4}}]},"32":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":271,"column":4}},{"start":{"line":271,"column":4},"end":{"line":271,"column":4}}]},"33":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":4},"end":{"line":279,"column":4}},{"start":{"line":279,"column":4},"end":{"line":279,"column":4}}]},"34":{"line":282,"type":"switch","locations":[{"start":{"line":283,"column":6},"end":{"line":284,"column":32}},{"start":{"line":285,"column":6},"end":{"line":286,"column":37}},{"start":{"line":287,"column":6},"end":{"line":288,"column":32}},{"start":{"line":289,"column":6},"end":{"line":290,"column":33}},{"start":{"line":291,"column":6},"end":{"line":292,"column":34}},{"start":{"line":293,"column":6},"end":{"line":294,"column":39}},{"start":{"line":295,"column":6},"end":{"line":296,"column":71}}]},"35":{"line":328,"type":"binary-expr","locations":[{"start":{"line":328,"column":11},"end":{"line":328,"column":25}},{"start":{"line":328,"column":29},"end":{"line":330,"column":6}}]},"36":{"line":422,"type":"binary-expr","locations":[{"start":{"line":422,"column":22},"end":{"line":422,"column":32}},{"start":{"line":422,"column":36},"end":{"line":424,"column":4}}]},"37":{"line":425,"type":"if","locations":[{"start":{"line":425,"column":2},"end":{"line":425,"column":2}},{"start":{"line":425,"column":2},"end":{"line":425,"column":2}}]},"38":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":2},"end":{"line":441,"column":2}},{"start":{"line":441,"column":2},"end":{"line":441,"column":2}}]},"39":{"line":447,"type":"binary-expr","locations":[{"start":{"line":447,"column":9},"end":{"line":447,"column":14}},{"start":{"line":447,"column":18},"end":{"line":447,"column":57}},{"start":{"line":447,"column":61},"end":{"line":447,"column":71}},{"start":{"line":447,"column":75},"end":{"line":447,"column":85}},{"start":{"line":447,"column":89},"end":{"line":447,"column":123}},{"start":{"line":447,"column":127},"end":{"line":447,"column":157}}]},"40":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":4},"end":{"line":450,"column":4}},{"start":{"line":450,"column":4},"end":{"line":450,"column":4}}]},"41":{"line":450,"type":"binary-expr","locations":[{"start":{"line":450,"column":8},"end":{"line":450,"column":31}},{"start":{"line":450,"column":35},"end":{"line":450,"column":53}}]},"42":{"line":473,"type":"if","locations":[{"start":{"line":473,"column":4},"end":{"line":473,"column":4}},{"start":{"line":473,"column":4},"end":{"line":473,"column":4}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.buildASTSchema = buildASTSchema;","exports.getDeprecationReason = getDeprecationReason;","exports.getDescription = getDescription;","exports.buildSchema = buildSchema;","","var _find = require('../jsutils/find');","","var _find2 = _interopRequireDefault(_find);","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _keyValMap = require('../jsutils/keyValMap');","","var _keyValMap2 = _interopRequireDefault(_keyValMap);","","var _valueFromAST = require('./valueFromAST');","","var _lexer = require('../language/lexer');","","var _parser = require('../language/parser');","","var _values = require('../execution/values');","","var _kinds = require('../language/kinds');","","var _schema = require('../type/schema');","","var _scalars = require('../type/scalars');","","var _definition = require('../type/definition');","","var _directives = require('../type/directives');","","var _introspection = require('../type/introspection');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","function buildWrappedType(innerType, inputTypeNode) {","  if (inputTypeNode.kind === _kinds.LIST_TYPE) {","    return new _definition.GraphQLList(buildWrappedType(innerType, inputTypeNode.type));","  }","  if (inputTypeNode.kind === _kinds.NON_NULL_TYPE) {","    var wrappedType = buildWrappedType(innerType, inputTypeNode.type);","    (0, _invariant2.default)(!(wrappedType instanceof _definition.GraphQLNonNull), 'No nesting nonnull.');","    return new _definition.GraphQLNonNull(wrappedType);","  }","  return innerType;","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function getNamedTypeNode(typeNode) {","  var namedType = typeNode;","  while (namedType.kind === _kinds.LIST_TYPE || namedType.kind === _kinds.NON_NULL_TYPE) {","    namedType = namedType.type;","  }","  return namedType;","}","","/**"," * This takes the ast of a schema document produced by the parse function in"," * src/language/parser.js."," *"," * If no schema definition is provided, then it will look for types named Query"," * and Mutation."," *"," * Given that AST it constructs a GraphQLSchema. The resulting schema"," * has no resolve methods, so execution will use default resolvers."," */","function buildASTSchema(ast) {","  if (!ast || ast.kind !== _kinds.DOCUMENT) {","    throw new Error('Must provide a document ast.');","  }","","  var schemaDef = void 0;","","  var typeDefs = [];","  var nodeMap = Object.create(null);","  var directiveDefs = [];","  for (var i = 0; i < ast.definitions.length; i++) {","    var d = ast.definitions[i];","    switch (d.kind) {","      case _kinds.SCHEMA_DEFINITION:","        if (schemaDef) {","          throw new Error('Must provide only one schema definition.');","        }","        schemaDef = d;","        break;","      case _kinds.SCALAR_TYPE_DEFINITION:","      case _kinds.OBJECT_TYPE_DEFINITION:","      case _kinds.INTERFACE_TYPE_DEFINITION:","      case _kinds.ENUM_TYPE_DEFINITION:","      case _kinds.UNION_TYPE_DEFINITION:","      case _kinds.INPUT_OBJECT_TYPE_DEFINITION:","        typeDefs.push(d);","        nodeMap[d.name.value] = d;","        break;","      case _kinds.DIRECTIVE_DEFINITION:","        directiveDefs.push(d);","        break;","    }","  }","","  var queryTypeName = void 0;","  var mutationTypeName = void 0;","  var subscriptionTypeName = void 0;","  if (schemaDef) {","    schemaDef.operationTypes.forEach(function (operationType) {","      var typeName = operationType.type.name.value;","      if (operationType.operation === 'query') {","        if (queryTypeName) {","          throw new Error('Must provide only one query type in schema.');","        }","        if (!nodeMap[typeName]) {","          throw new Error('Specified query type \"' + typeName + '\" not found in document.');","        }","        queryTypeName = typeName;","      } else if (operationType.operation === 'mutation') {","        if (mutationTypeName) {","          throw new Error('Must provide only one mutation type in schema.');","        }","        if (!nodeMap[typeName]) {","          throw new Error('Specified mutation type \"' + typeName + '\" not found in document.');","        }","        mutationTypeName = typeName;","      } else if (operationType.operation === 'subscription') {","        if (subscriptionTypeName) {","          throw new Error('Must provide only one subscription type in schema.');","        }","        if (!nodeMap[typeName]) {","          throw new Error('Specified subscription type \"' + typeName + '\" not found in document.');","        }","        subscriptionTypeName = typeName;","      }","    });","  } else {","    if (nodeMap.Query) {","      queryTypeName = 'Query';","    }","    if (nodeMap.Mutation) {","      mutationTypeName = 'Mutation';","    }","    if (nodeMap.Subscription) {","      subscriptionTypeName = 'Subscription';","    }","  }","","  if (!queryTypeName) {","    throw new Error('Must provide schema definition with query type or a type named Query.');","  }","","  var innerTypeMap = {","    String: _scalars.GraphQLString,","    Int: _scalars.GraphQLInt,","    Float: _scalars.GraphQLFloat,","    Boolean: _scalars.GraphQLBoolean,","    ID: _scalars.GraphQLID,","    __Schema: _introspection.__Schema,","    __Directive: _introspection.__Directive,","    __DirectiveLocation: _introspection.__DirectiveLocation,","    __Type: _introspection.__Type,","    __Field: _introspection.__Field,","    __InputValue: _introspection.__InputValue,","    __EnumValue: _introspection.__EnumValue,","    __TypeKind: _introspection.__TypeKind","  };","","  var types = typeDefs.map(function (def) {","    return typeDefNamed(def.name.value);","  });","","  var directives = directiveDefs.map(getDirective);","","  // If specified directives were not explicitly declared, add them.","  if (!directives.some(function (directive) {","    return directive.name === 'skip';","  })) {","    directives.push(_directives.GraphQLSkipDirective);","  }","","  if (!directives.some(function (directive) {","    return directive.name === 'include';","  })) {","    directives.push(_directives.GraphQLIncludeDirective);","  }","","  if (!directives.some(function (directive) {","    return directive.name === 'deprecated';","  })) {","    directives.push(_directives.GraphQLDeprecatedDirective);","  }","","  return new _schema.GraphQLSchema({","    query: getObjectType(nodeMap[queryTypeName]),","    mutation: mutationTypeName ? getObjectType(nodeMap[mutationTypeName]) : null,","    subscription: subscriptionTypeName ? getObjectType(nodeMap[subscriptionTypeName]) : null,","    types: types,","    directives: directives","  });","","  function getDirective(directiveNode) {","    return new _directives.GraphQLDirective({","      name: directiveNode.name.value,","      description: getDescription(directiveNode),","      locations: directiveNode.locations.map(function (node) {","        return node.value;","      }),","      args: directiveNode.arguments && makeInputValues(directiveNode.arguments)","    });","  }","","  function getObjectType(typeNode) {","    var type = typeDefNamed(typeNode.name.value);","    (0, _invariant2.default)(type instanceof _definition.GraphQLObjectType, 'AST must provide object type.');","    return type;","  }","","  function produceType(typeNode) {","    var typeName = getNamedTypeNode(typeNode).name.value;","    var typeDef = typeDefNamed(typeName);","    return buildWrappedType(typeDef, typeNode);","  }","","  function produceInputType(typeNode) {","    var type = produceType(typeNode);","    (0, _invariant2.default)((0, _definition.isInputType)(type), 'Expected Input type.');","    return type;","  }","","  function produceOutputType(typeNode) {","    var type = produceType(typeNode);","    (0, _invariant2.default)((0, _definition.isOutputType)(type), 'Expected Output type.');","    return type;","  }","","  function produceObjectType(typeNode) {","    var type = produceType(typeNode);","    (0, _invariant2.default)(type instanceof _definition.GraphQLObjectType, 'Expected Object type.');","    return type;","  }","","  function produceInterfaceType(typeNode) {","    var type = produceType(typeNode);","    (0, _invariant2.default)(type instanceof _definition.GraphQLInterfaceType, 'Expected Interface type.');","    return type;","  }","","  function typeDefNamed(typeName) {","    if (innerTypeMap[typeName]) {","      return innerTypeMap[typeName];","    }","","    if (!nodeMap[typeName]) {","      throw new Error('Type \"' + typeName + '\" not found in document.');","    }","","    var innerTypeDef = makeSchemaDef(nodeMap[typeName]);","    if (!innerTypeDef) {","      throw new Error('Nothing constructed for \"' + typeName + '\".');","    }","    innerTypeMap[typeName] = innerTypeDef;","    return innerTypeDef;","  }","","  function makeSchemaDef(def) {","    if (!def) {","      throw new Error('def must be defined');","    }","    switch (def.kind) {","      case _kinds.OBJECT_TYPE_DEFINITION:","        return makeTypeDef(def);","      case _kinds.INTERFACE_TYPE_DEFINITION:","        return makeInterfaceDef(def);","      case _kinds.ENUM_TYPE_DEFINITION:","        return makeEnumDef(def);","      case _kinds.UNION_TYPE_DEFINITION:","        return makeUnionDef(def);","      case _kinds.SCALAR_TYPE_DEFINITION:","        return makeScalarDef(def);","      case _kinds.INPUT_OBJECT_TYPE_DEFINITION:","        return makeInputObjectDef(def);","      default:","        throw new Error('Type kind \"' + def.kind + '\" not supported.');","    }","  }","","  function makeTypeDef(def) {","    var typeName = def.name.value;","    return new _definition.GraphQLObjectType({","      name: typeName,","      description: getDescription(def),","      fields: function fields() {","        return makeFieldDefMap(def);","      },","      interfaces: function interfaces() {","        return makeImplementedInterfaces(def);","      }","    });","  }","","  function makeFieldDefMap(def) {","    return (0, _keyValMap2.default)(def.fields, function (field) {","      return field.name.value;","    }, function (field) {","      return {","        type: produceOutputType(field.type),","        description: getDescription(field),","        args: makeInputValues(field.arguments),","        deprecationReason: getDeprecationReason(field.directives)","      };","    });","  }","","  function makeImplementedInterfaces(def) {","    return def.interfaces && def.interfaces.map(function (iface) {","      return produceInterfaceType(iface);","    });","  }","","  function makeInputValues(values) {","    return (0, _keyValMap2.default)(values, function (value) {","      return value.name.value;","    }, function (value) {","      var type = produceInputType(value.type);","      return {","        type: type,","        description: getDescription(value),","        defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type)","      };","    });","  }","","  function makeInterfaceDef(def) {","    var typeName = def.name.value;","    return new _definition.GraphQLInterfaceType({","      name: typeName,","      description: getDescription(def),","      fields: function fields() {","        return makeFieldDefMap(def);","      },","      resolveType: cannotExecuteSchema","    });","  }","","  function makeEnumDef(def) {","    var enumType = new _definition.GraphQLEnumType({","      name: def.name.value,","      description: getDescription(def),","      values: (0, _keyValMap2.default)(def.values, function (enumValue) {","        return enumValue.name.value;","      }, function (enumValue) {","        return {","          description: getDescription(enumValue),","          deprecationReason: getDeprecationReason(enumValue.directives)","        };","      })","    });","","    return enumType;","  }","","  function makeUnionDef(def) {","    return new _definition.GraphQLUnionType({","      name: def.name.value,","      description: getDescription(def),","      types: def.types.map(function (t) {","        return produceObjectType(t);","      }),","      resolveType: cannotExecuteSchema","    });","  }","","  function makeScalarDef(def) {","    return new _definition.GraphQLScalarType({","      name: def.name.value,","      description: getDescription(def),","      serialize: function serialize() {","        return null;","      },","      // Note: validation calls the parse functions to determine if a","      // literal value is correct. Returning null would cause use of custom","      // scalars to always fail validation. Returning false causes them to","      // always pass validation.","      parseValue: function parseValue() {","        return false;","      },","      parseLiteral: function parseLiteral() {","        return false;","      }","    });","  }","","  function makeInputObjectDef(def) {","    return new _definition.GraphQLInputObjectType({","      name: def.name.value,","      description: getDescription(def),","      fields: function fields() {","        return makeInputValues(def.fields);","      }","    });","  }","}","","/**"," * Given a collection of directives, returns the string value for the"," * deprecation reason."," */","function getDeprecationReason(directives) {","  var deprecatedAST = directives && (0, _find2.default)(directives, function (directive) {","    return directive.name.value === _directives.GraphQLDeprecatedDirective.name;","  });","  if (!deprecatedAST) {","    return;","  }","","  var _getArgumentValues = (0, _values.getArgumentValues)(_directives.GraphQLDeprecatedDirective, deprecatedAST),","      reason = _getArgumentValues.reason;","","  return reason;","}","","/**"," * Given an ast node, returns its string description based on a contiguous"," * block full-line of comments preceding it."," */","function getDescription(node) {","  var loc = node.loc;","  if (!loc) {","    return;","  }","  var comments = [];","  var minSpaces = void 0;","  var token = loc.startToken.prev;","  while (token && token.kind === _lexer.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {","    var value = String(token.value);","    var spaces = leadingSpaces(value);","    if (minSpaces === undefined || spaces < minSpaces) {","      minSpaces = spaces;","    }","    comments.push(value);","    token = token.prev;","  }","  return comments.reverse().map(function (comment) {","    return comment.slice(minSpaces);","  }).join('\\n');","}","","/**"," * A helper function to build a GraphQLSchema directly from a source"," * document."," */","function buildSchema(source) {","  return buildASTSchema((0, _parser.parse)(source));","}","","// Count the number of spaces on the starting side of a string.","function leadingSpaces(str) {","  var i = 0;","  for (; i < str.length; i++) {","    if (str[i] !== ' ') {","      break;","    }","  }","  return i;","}","","function cannotExecuteSchema() {","  throw new Error('Generated Schema cannot use Interface or Union types for execution.');","}"],"l":{"3":1,"6":1,"7":1,"8":1,"9":1,"11":1,"13":1,"15":1,"17":1,"19":1,"21":1,"23":1,"25":1,"27":1,"29":1,"31":1,"33":1,"35":1,"37":1,"39":1,"41":1,"43":3,"45":1,"46":0,"47":0,"49":0,"50":0,"51":0,"52":0,"54":0,"65":1,"66":0,"67":0,"68":0,"70":0,"83":1,"84":0,"85":0,"88":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"97":0,"98":0,"100":0,"101":0,"108":0,"109":0,"110":0,"112":0,"113":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"127":0,"128":0,"130":0,"131":0,"132":0,"133":0,"135":0,"136":0,"138":0,"139":0,"140":0,"141":0,"143":0,"144":0,"146":0,"150":0,"151":0,"153":0,"154":0,"156":0,"157":0,"161":0,"162":0,"165":0,"181":0,"182":0,"185":0,"188":0,"189":0,"191":0,"194":0,"195":0,"197":0,"200":0,"201":0,"203":0,"206":0,"214":1,"215":0,"219":0,"225":1,"226":0,"227":0,"228":0,"231":1,"232":0,"233":0,"234":0,"237":1,"238":0,"239":0,"240":0,"243":1,"244":0,"245":0,"246":0,"249":1,"250":0,"251":0,"252":0,"255":1,"256":0,"257":0,"258":0,"261":1,"262":0,"263":0,"266":0,"267":0,"270":0,"271":0,"272":0,"274":0,"275":0,"278":1,"279":0,"280":0,"282":0,"284":0,"286":0,"288":0,"290":0,"292":0,"294":0,"296":0,"300":1,"301":0,"302":0,"306":0,"309":0,"314":1,"315":0,"316":0,"318":0,"327":1,"328":0,"329":0,"333":1,"334":0,"335":0,"337":0,"338":0,"346":1,"347":0,"348":0,"352":0,"358":1,"359":0,"363":0,"365":0,"372":0,"375":1,"376":0,"380":0,"386":1,"387":0,"391":0,"398":0,"401":0,"406":1,"407":0,"411":0,"421":1,"422":0,"423":0,"425":0,"426":0,"429":0,"432":0,"439":1,"440":0,"441":0,"442":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"453":0,"454":0,"456":0,"457":0,"465":1,"466":0,"470":1,"471":0,"472":0,"473":0,"474":0,"477":0,"480":1,"481":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/extendSchema.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/extendSchema.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":3,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":1,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":1,"124":0,"125":0,"126":1,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":1,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":1,"172":0,"173":0,"174":0,"175":1,"176":0,"177":0,"178":1,"179":0,"180":1,"181":0,"182":0,"183":0,"184":0,"185":1,"186":0,"187":0,"188":0,"189":1,"190":0,"191":0,"192":1,"193":0,"194":0,"195":1,"196":0,"197":1,"198":0,"199":0,"200":0,"201":1,"202":0,"203":0,"204":0,"205":0,"206":1,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":1,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":1,"223":0},"b":{"1":[3,0],"2":[3,3],"3":[0,0],"4":[0,0,0,0,0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0,0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":37}}},"2":{"name":"extendSchema","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":43}}},"3":{"name":"(anonymous_3)","line":160,"loc":{"start":{"line":160,"column":39},"end":{"line":160,"column":59}}},"4":{"name":"(anonymous_4)","line":165,"loc":{"start":{"line":165,"column":41},"end":{"line":165,"column":61}}},"5":{"name":"getMergedDirectives","line":181,"loc":{"start":{"line":181,"column":2},"end":{"line":181,"column":33}}},"6":{"name":"(anonymous_6)","line":185,"loc":{"start":{"line":185,"column":49},"end":{"line":185,"column":74}}},"7":{"name":"getTypeFromDef","line":191,"loc":{"start":{"line":191,"column":2},"end":{"line":191,"column":35}}},"8":{"name":"getTypeFromAST","line":197,"loc":{"start":{"line":197,"column":2},"end":{"line":197,"column":32}}},"9":{"name":"getObjectTypeFromAST","line":205,"loc":{"start":{"line":205,"column":2},"end":{"line":205,"column":38}}},"10":{"name":"getInterfaceTypeFromAST","line":211,"loc":{"start":{"line":211,"column":2},"end":{"line":211,"column":41}}},"11":{"name":"getInputTypeFromAST","line":217,"loc":{"start":{"line":217,"column":2},"end":{"line":217,"column":37}}},"12":{"name":"getOutputTypeFromAST","line":223,"loc":{"start":{"line":223,"column":2},"end":{"line":223,"column":38}}},"13":{"name":"_getNamedType","line":231,"loc":{"start":{"line":231,"column":2},"end":{"line":231,"column":35}}},"14":{"name":"extendType","line":254,"loc":{"start":{"line":254,"column":2},"end":{"line":254,"column":28}}},"15":{"name":"extendObjectType","line":267,"loc":{"start":{"line":267,"column":2},"end":{"line":267,"column":34}}},"16":{"name":"interfaces","line":271,"loc":{"start":{"line":271,"column":18},"end":{"line":271,"column":40}}},"17":{"name":"fields","line":274,"loc":{"start":{"line":274,"column":14},"end":{"line":274,"column":32}}},"18":{"name":"extendInterfaceType","line":281,"loc":{"start":{"line":281,"column":2},"end":{"line":281,"column":37}}},"19":{"name":"fields","line":285,"loc":{"start":{"line":285,"column":14},"end":{"line":285,"column":32}}},"20":{"name":"extendUnionType","line":292,"loc":{"start":{"line":292,"column":2},"end":{"line":292,"column":33}}},"21":{"name":"extendImplementedInterfaces","line":301,"loc":{"start":{"line":301,"column":2},"end":{"line":301,"column":45}}},"22":{"name":"(anonymous_22)","line":307,"loc":{"start":{"line":307,"column":25},"end":{"line":307,"column":46}}},"23":{"name":"(anonymous_23)","line":308,"loc":{"start":{"line":308,"column":48},"end":{"line":308,"column":69}}},"24":{"name":"(anonymous_24)","line":310,"loc":{"start":{"line":310,"column":30},"end":{"line":310,"column":45}}},"25":{"name":"extendFieldMap","line":323,"loc":{"start":{"line":323,"column":2},"end":{"line":323,"column":32}}},"26":{"name":"(anonymous_26)","line":326,"loc":{"start":{"line":326,"column":37},"end":{"line":326,"column":58}}},"27":{"name":"(anonymous_27)","line":332,"loc":{"start":{"line":332,"column":48},"end":{"line":332,"column":63}}},"28":{"name":"(anonymous_28)","line":342,"loc":{"start":{"line":342,"column":25},"end":{"line":342,"column":46}}},"29":{"name":"(anonymous_29)","line":343,"loc":{"start":{"line":343,"column":44},"end":{"line":343,"column":61}}},"30":{"name":"extendFieldType","line":361,"loc":{"start":{"line":361,"column":2},"end":{"line":361,"column":36}}},"31":{"name":"buildType","line":371,"loc":{"start":{"line":371,"column":2},"end":{"line":371,"column":31}}},"32":{"name":"buildObjectType","line":389,"loc":{"start":{"line":389,"column":2},"end":{"line":389,"column":37}}},"33":{"name":"interfaces","line":393,"loc":{"start":{"line":393,"column":18},"end":{"line":393,"column":40}}},"34":{"name":"fields","line":396,"loc":{"start":{"line":396,"column":14},"end":{"line":396,"column":32}}},"35":{"name":"buildInterfaceType","line":402,"loc":{"start":{"line":402,"column":2},"end":{"line":402,"column":40}}},"36":{"name":"fields","line":406,"loc":{"start":{"line":406,"column":14},"end":{"line":406,"column":32}}},"37":{"name":"buildUnionType","line":413,"loc":{"start":{"line":413,"column":2},"end":{"line":413,"column":36}}},"38":{"name":"buildScalarType","line":422,"loc":{"start":{"line":422,"column":2},"end":{"line":422,"column":37}}},"39":{"name":"serialize","line":426,"loc":{"start":{"line":426,"column":17},"end":{"line":426,"column":40}}},"40":{"name":"parseValue","line":433,"loc":{"start":{"line":433,"column":18},"end":{"line":433,"column":40}}},"41":{"name":"parseLiteral","line":436,"loc":{"start":{"line":436,"column":20},"end":{"line":436,"column":44}}},"42":{"name":"buildEnumType","line":442,"loc":{"start":{"line":442,"column":2},"end":{"line":442,"column":35}}},"43":{"name":"(anonymous_43)","line":446,"loc":{"start":{"line":446,"column":56},"end":{"line":446,"column":77}}},"44":{"name":"(anonymous_44)","line":448,"loc":{"start":{"line":448,"column":9},"end":{"line":448,"column":30}}},"45":{"name":"buildInputObjectType","line":457,"loc":{"start":{"line":457,"column":2},"end":{"line":457,"column":42}}},"46":{"name":"fields","line":461,"loc":{"start":{"line":461,"column":14},"end":{"line":461,"column":32}}},"47":{"name":"getDirective","line":467,"loc":{"start":{"line":467,"column":2},"end":{"line":467,"column":39}}},"48":{"name":"(anonymous_48)","line":470,"loc":{"start":{"line":470,"column":45},"end":{"line":470,"column":61}}},"49":{"name":"buildImplementedInterfaces","line":477,"loc":{"start":{"line":477,"column":2},"end":{"line":477,"column":48}}},"50":{"name":"buildFieldMap","line":481,"loc":{"start":{"line":481,"column":2},"end":{"line":481,"column":35}}},"51":{"name":"(anonymous_51)","line":482,"loc":{"start":{"line":482,"column":53},"end":{"line":482,"column":70}}},"52":{"name":"(anonymous_52)","line":484,"loc":{"start":{"line":484,"column":7},"end":{"line":484,"column":24}}},"53":{"name":"buildInputValues","line":494,"loc":{"start":{"line":494,"column":2},"end":{"line":494,"column":36}}},"54":{"name":"(anonymous_54)","line":495,"loc":{"start":{"line":495,"column":44},"end":{"line":495,"column":61}}},"55":{"name":"(anonymous_55)","line":497,"loc":{"start":{"line":497,"column":7},"end":{"line":497,"column":24}}},"56":{"name":"buildInputFieldType","line":507,"loc":{"start":{"line":507,"column":2},"end":{"line":507,"column":41}}},"57":{"name":"buildOutputFieldType","line":519,"loc":{"start":{"line":519,"column":2},"end":{"line":519,"column":42}}},"58":{"name":"cannotExecuteExtendedSchema","line":532,"loc":{"start":{"line":532,"column":0},"end":{"line":532,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":53}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":43}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":47}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":49}},"8":{"start":{"line":18,"column":0},"end":{"line":18,"column":53}},"9":{"start":{"line":20,"column":0},"end":{"line":20,"column":50}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":46}},"11":{"start":{"line":24,"column":0},"end":{"line":24,"column":53}},"12":{"start":{"line":26,"column":0},"end":{"line":26,"column":40}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":48}},"14":{"start":{"line":30,"column":0},"end":{"line":30,"column":48}},"15":{"start":{"line":32,"column":0},"end":{"line":32,"column":54}},"16":{"start":{"line":34,"column":0},"end":{"line":34,"column":42}},"17":{"start":{"line":36,"column":0},"end":{"line":36,"column":42}},"18":{"start":{"line":38,"column":0},"end":{"line":38,"column":97}},"19":{"start":{"line":38,"column":39},"end":{"line":38,"column":95}},"20":{"start":{"line":62,"column":0},"end":{"line":530,"column":1}},"21":{"start":{"line":63,"column":2},"end":{"line":63,"column":104}},"22":{"start":{"line":65,"column":2},"end":{"line":65,"column":115}},"23":{"start":{"line":68,"column":2},"end":{"line":68,"column":29}},"24":{"start":{"line":69,"column":2},"end":{"line":69,"column":29}},"25":{"start":{"line":73,"column":2},"end":{"line":73,"column":32}},"26":{"start":{"line":75,"column":2},"end":{"line":120,"column":3}},"27":{"start":{"line":76,"column":4},"end":{"line":76,"column":41}},"28":{"start":{"line":77,"column":4},"end":{"line":119,"column":5}},"29":{"start":{"line":86,"column":8},"end":{"line":86,"column":38}},"30":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"31":{"start":{"line":88,"column":10},"end":{"line":88,"column":167}},"32":{"start":{"line":90,"column":8},"end":{"line":90,"column":42}},"33":{"start":{"line":91,"column":8},"end":{"line":91,"column":14}},"34":{"start":{"line":95,"column":8},"end":{"line":95,"column":57}},"35":{"start":{"line":96,"column":8},"end":{"line":96,"column":60}},"36":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"37":{"start":{"line":98,"column":10},"end":{"line":98,"column":169}},"38":{"start":{"line":100,"column":8},"end":{"line":102,"column":9}},"39":{"start":{"line":101,"column":10},"end":{"line":101,"column":126}},"40":{"start":{"line":103,"column":8},"end":{"line":103,"column":61}},"41":{"start":{"line":104,"column":8},"end":{"line":108,"column":9}},"42":{"start":{"line":105,"column":10},"end":{"line":105,"column":31}},"43":{"start":{"line":107,"column":10},"end":{"line":107,"column":29}},"44":{"start":{"line":109,"column":8},"end":{"line":109,"column":57}},"45":{"start":{"line":110,"column":8},"end":{"line":110,"column":14}},"46":{"start":{"line":112,"column":8},"end":{"line":112,"column":43}},"47":{"start":{"line":113,"column":8},"end":{"line":113,"column":67}},"48":{"start":{"line":114,"column":8},"end":{"line":116,"column":9}},"49":{"start":{"line":115,"column":10},"end":{"line":115,"column":150}},"50":{"start":{"line":117,"column":8},"end":{"line":117,"column":39}},"51":{"start":{"line":118,"column":8},"end":{"line":118,"column":14}},"52":{"start":{"line":124,"column":2},"end":{"line":126,"column":3}},"53":{"start":{"line":125,"column":4},"end":{"line":125,"column":18}},"54":{"start":{"line":132,"column":2},"end":{"line":146,"column":4}},"55":{"start":{"line":149,"column":2},"end":{"line":149,"column":56}},"56":{"start":{"line":151,"column":2},"end":{"line":151,"column":54}},"57":{"start":{"line":152,"column":2},"end":{"line":152,"column":88}},"58":{"start":{"line":154,"column":2},"end":{"line":154,"column":62}},"59":{"start":{"line":155,"column":2},"end":{"line":155,"column":100}},"60":{"start":{"line":159,"column":2},"end":{"line":159,"column":36}},"61":{"start":{"line":160,"column":2},"end":{"line":162,"column":5}},"62":{"start":{"line":161,"column":4},"end":{"line":161,"column":45}},"63":{"start":{"line":165,"column":2},"end":{"line":167,"column":5}},"64":{"start":{"line":166,"column":4},"end":{"line":166,"column":60}},"65":{"start":{"line":170,"column":2},"end":{"line":176,"column":5}},"66":{"start":{"line":181,"column":2},"end":{"line":189,"column":3}},"67":{"start":{"line":182,"column":4},"end":{"line":182,"column":52}},"68":{"start":{"line":183,"column":4},"end":{"line":183,"column":88}},"69":{"start":{"line":185,"column":4},"end":{"line":187,"column":7}},"70":{"start":{"line":186,"column":6},"end":{"line":186,"column":41}},"71":{"start":{"line":188,"column":4},"end":{"line":188,"column":52}},"72":{"start":{"line":191,"column":2},"end":{"line":195,"column":3}},"73":{"start":{"line":192,"column":4},"end":{"line":192,"column":43}},"74":{"start":{"line":193,"column":4},"end":{"line":193,"column":63}},"75":{"start":{"line":194,"column":4},"end":{"line":194,"column":16}},"76":{"start":{"line":197,"column":2},"end":{"line":203,"column":3}},"77":{"start":{"line":198,"column":4},"end":{"line":198,"column":46}},"78":{"start":{"line":199,"column":4},"end":{"line":201,"column":5}},"79":{"start":{"line":200,"column":6},"end":{"line":200,"column":194}},"80":{"start":{"line":202,"column":4},"end":{"line":202,"column":16}},"81":{"start":{"line":205,"column":2},"end":{"line":209,"column":3}},"82":{"start":{"line":206,"column":4},"end":{"line":206,"column":36}},"83":{"start":{"line":207,"column":4},"end":{"line":207,"column":100}},"84":{"start":{"line":208,"column":4},"end":{"line":208,"column":16}},"85":{"start":{"line":211,"column":2},"end":{"line":215,"column":3}},"86":{"start":{"line":212,"column":4},"end":{"line":212,"column":36}},"87":{"start":{"line":213,"column":4},"end":{"line":213,"column":106}},"88":{"start":{"line":214,"column":4},"end":{"line":214,"column":16}},"89":{"start":{"line":217,"column":2},"end":{"line":221,"column":3}},"90":{"start":{"line":218,"column":4},"end":{"line":218,"column":36}},"91":{"start":{"line":219,"column":4},"end":{"line":219,"column":88}},"92":{"start":{"line":220,"column":4},"end":{"line":220,"column":16}},"93":{"start":{"line":223,"column":2},"end":{"line":227,"column":3}},"94":{"start":{"line":224,"column":4},"end":{"line":224,"column":36}},"95":{"start":{"line":225,"column":4},"end":{"line":225,"column":90}},"96":{"start":{"line":226,"column":4},"end":{"line":226,"column":16}},"97":{"start":{"line":231,"column":2},"end":{"line":250,"column":3}},"98":{"start":{"line":232,"column":4},"end":{"line":232,"column":47}},"99":{"start":{"line":233,"column":4},"end":{"line":235,"column":5}},"100":{"start":{"line":234,"column":6},"end":{"line":234,"column":27}},"101":{"start":{"line":237,"column":4},"end":{"line":237,"column":48}},"102":{"start":{"line":238,"column":4},"end":{"line":242,"column":5}},"103":{"start":{"line":239,"column":6},"end":{"line":239,"column":45}},"104":{"start":{"line":240,"column":6},"end":{"line":240,"column":39}},"105":{"start":{"line":241,"column":6},"end":{"line":241,"column":21}},"106":{"start":{"line":244,"column":4},"end":{"line":244,"column":47}},"107":{"start":{"line":245,"column":4},"end":{"line":249,"column":5}},"108":{"start":{"line":246,"column":6},"end":{"line":246,"column":41}},"109":{"start":{"line":247,"column":6},"end":{"line":247,"column":40}},"110":{"start":{"line":248,"column":6},"end":{"line":248,"column":22}},"111":{"start":{"line":254,"column":2},"end":{"line":265,"column":3}},"112":{"start":{"line":255,"column":4},"end":{"line":257,"column":5}},"113":{"start":{"line":256,"column":6},"end":{"line":256,"column":36}},"114":{"start":{"line":258,"column":4},"end":{"line":260,"column":5}},"115":{"start":{"line":259,"column":6},"end":{"line":259,"column":39}},"116":{"start":{"line":261,"column":4},"end":{"line":263,"column":5}},"117":{"start":{"line":262,"column":6},"end":{"line":262,"column":35}},"118":{"start":{"line":264,"column":4},"end":{"line":264,"column":16}},"119":{"start":{"line":267,"column":2},"end":{"line":279,"column":3}},"120":{"start":{"line":268,"column":4},"end":{"line":278,"column":7}},"121":{"start":{"line":272,"column":8},"end":{"line":272,"column":49}},"122":{"start":{"line":275,"column":8},"end":{"line":275,"column":36}},"123":{"start":{"line":281,"column":2},"end":{"line":290,"column":3}},"124":{"start":{"line":282,"column":4},"end":{"line":289,"column":7}},"125":{"start":{"line":286,"column":8},"end":{"line":286,"column":36}},"126":{"start":{"line":292,"column":2},"end":{"line":299,"column":3}},"127":{"start":{"line":293,"column":4},"end":{"line":298,"column":7}},"128":{"start":{"line":301,"column":2},"end":{"line":321,"column":3}},"129":{"start":{"line":302,"column":4},"end":{"line":302,"column":62}},"130":{"start":{"line":305,"column":4},"end":{"line":305,"column":50}},"131":{"start":{"line":306,"column":4},"end":{"line":318,"column":5}},"132":{"start":{"line":307,"column":6},"end":{"line":317,"column":9}},"133":{"start":{"line":308,"column":8},"end":{"line":316,"column":11}},"134":{"start":{"line":309,"column":10},"end":{"line":309,"column":51}},"135":{"start":{"line":310,"column":10},"end":{"line":314,"column":11}},"136":{"start":{"line":311,"column":12},"end":{"line":311,"column":46}},"137":{"start":{"line":313,"column":12},"end":{"line":313,"column":193}},"138":{"start":{"line":315,"column":10},"end":{"line":315,"column":62}},"139":{"start":{"line":320,"column":4},"end":{"line":320,"column":22}},"140":{"start":{"line":323,"column":2},"end":{"line":359,"column":3}},"141":{"start":{"line":324,"column":4},"end":{"line":324,"column":25}},"142":{"start":{"line":325,"column":4},"end":{"line":325,"column":39}},"143":{"start":{"line":326,"column":4},"end":{"line":337,"column":7}},"144":{"start":{"line":327,"column":6},"end":{"line":327,"column":41}},"145":{"start":{"line":328,"column":6},"end":{"line":336,"column":8}},"146":{"start":{"line":333,"column":10},"end":{"line":333,"column":26}},"147":{"start":{"line":340,"column":4},"end":{"line":340,"column":50}},"148":{"start":{"line":341,"column":4},"end":{"line":356,"column":5}},"149":{"start":{"line":342,"column":6},"end":{"line":355,"column":9}},"150":{"start":{"line":343,"column":8},"end":{"line":354,"column":11}},"151":{"start":{"line":344,"column":10},"end":{"line":344,"column":43}},"152":{"start":{"line":345,"column":10},"end":{"line":347,"column":11}},"153":{"start":{"line":346,"column":12},"end":{"line":346,"column":190}},"154":{"start":{"line":348,"column":10},"end":{"line":353,"column":12}},"155":{"start":{"line":358,"column":4},"end":{"line":358,"column":23}},"156":{"start":{"line":361,"column":2},"end":{"line":369,"column":3}},"157":{"start":{"line":362,"column":4},"end":{"line":364,"column":5}},"158":{"start":{"line":363,"column":6},"end":{"line":363,"column":74}},"159":{"start":{"line":365,"column":4},"end":{"line":367,"column":5}},"160":{"start":{"line":366,"column":6},"end":{"line":366,"column":77}},"161":{"start":{"line":368,"column":4},"end":{"line":368,"column":35}},"162":{"start":{"line":371,"column":2},"end":{"line":387,"column":3}},"163":{"start":{"line":372,"column":4},"end":{"line":385,"column":5}},"164":{"start":{"line":374,"column":8},"end":{"line":374,"column":41}},"165":{"start":{"line":376,"column":8},"end":{"line":376,"column":44}},"166":{"start":{"line":378,"column":8},"end":{"line":378,"column":40}},"167":{"start":{"line":380,"column":8},"end":{"line":380,"column":41}},"168":{"start":{"line":382,"column":8},"end":{"line":382,"column":39}},"169":{"start":{"line":384,"column":8},"end":{"line":384,"column":46}},"170":{"start":{"line":386,"column":4},"end":{"line":386,"column":62}},"171":{"start":{"line":389,"column":2},"end":{"line":400,"column":3}},"172":{"start":{"line":390,"column":4},"end":{"line":399,"column":7}},"173":{"start":{"line":394,"column":8},"end":{"line":394,"column":52}},"174":{"start":{"line":397,"column":8},"end":{"line":397,"column":39}},"175":{"start":{"line":402,"column":2},"end":{"line":411,"column":3}},"176":{"start":{"line":403,"column":4},"end":{"line":410,"column":7}},"177":{"start":{"line":407,"column":8},"end":{"line":407,"column":39}},"178":{"start":{"line":413,"column":2},"end":{"line":420,"column":3}},"179":{"start":{"line":414,"column":4},"end":{"line":419,"column":7}},"180":{"start":{"line":422,"column":2},"end":{"line":440,"column":3}},"181":{"start":{"line":423,"column":4},"end":{"line":439,"column":7}},"182":{"start":{"line":427,"column":8},"end":{"line":427,"column":18}},"183":{"start":{"line":434,"column":8},"end":{"line":434,"column":21}},"184":{"start":{"line":437,"column":8},"end":{"line":437,"column":21}},"185":{"start":{"line":442,"column":2},"end":{"line":455,"column":3}},"186":{"start":{"line":443,"column":4},"end":{"line":454,"column":7}},"187":{"start":{"line":447,"column":8},"end":{"line":447,"column":36}},"188":{"start":{"line":449,"column":8},"end":{"line":452,"column":10}},"189":{"start":{"line":457,"column":2},"end":{"line":465,"column":3}},"190":{"start":{"line":458,"column":4},"end":{"line":464,"column":7}},"191":{"start":{"line":462,"column":8},"end":{"line":462,"column":49}},"192":{"start":{"line":467,"column":2},"end":{"line":475,"column":3}},"193":{"start":{"line":468,"column":4},"end":{"line":474,"column":7}},"194":{"start":{"line":471,"column":8},"end":{"line":471,"column":26}},"195":{"start":{"line":477,"column":2},"end":{"line":479,"column":3}},"196":{"start":{"line":478,"column":4},"end":{"line":478,"column":83}},"197":{"start":{"line":481,"column":2},"end":{"line":492,"column":3}},"198":{"start":{"line":482,"column":4},"end":{"line":491,"column":7}},"199":{"start":{"line":483,"column":6},"end":{"line":483,"column":30}},"200":{"start":{"line":485,"column":6},"end":{"line":490,"column":8}},"201":{"start":{"line":494,"column":2},"end":{"line":505,"column":3}},"202":{"start":{"line":495,"column":4},"end":{"line":504,"column":7}},"203":{"start":{"line":496,"column":6},"end":{"line":496,"column":30}},"204":{"start":{"line":498,"column":6},"end":{"line":498,"column":49}},"205":{"start":{"line":499,"column":6},"end":{"line":503,"column":8}},"206":{"start":{"line":507,"column":2},"end":{"line":517,"column":3}},"207":{"start":{"line":508,"column":4},"end":{"line":510,"column":5}},"208":{"start":{"line":509,"column":6},"end":{"line":509,"column":77}},"209":{"start":{"line":511,"column":4},"end":{"line":515,"column":5}},"210":{"start":{"line":512,"column":6},"end":{"line":512,"column":60}},"211":{"start":{"line":513,"column":6},"end":{"line":513,"column":106}},"212":{"start":{"line":514,"column":6},"end":{"line":514,"column":58}},"213":{"start":{"line":516,"column":4},"end":{"line":516,"column":41}},"214":{"start":{"line":519,"column":2},"end":{"line":529,"column":3}},"215":{"start":{"line":520,"column":4},"end":{"line":522,"column":5}},"216":{"start":{"line":521,"column":6},"end":{"line":521,"column":78}},"217":{"start":{"line":523,"column":4},"end":{"line":527,"column":5}},"218":{"start":{"line":524,"column":6},"end":{"line":524,"column":61}},"219":{"start":{"line":525,"column":6},"end":{"line":525,"column":106}},"220":{"start":{"line":526,"column":6},"end":{"line":526,"column":58}},"221":{"start":{"line":528,"column":4},"end":{"line":528,"column":42}},"222":{"start":{"line":532,"column":0},"end":{"line":534,"column":1}},"223":{"start":{"line":533,"column":2},"end":{"line":533,"column":88}}},"branchMap":{"1":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":70},"end":{"line":38,"column":73}},{"start":{"line":38,"column":76},"end":{"line":38,"column":94}}]},"2":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":46},"end":{"line":38,"column":49}},{"start":{"line":38,"column":53},"end":{"line":38,"column":67}}]},"3":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":27},"end":{"line":65,"column":38}},{"start":{"line":65,"column":42},"end":{"line":65,"column":78}}]},"4":{"line":77,"type":"switch","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":41}},{"start":{"line":79,"column":6},"end":{"line":79,"column":44}},{"start":{"line":80,"column":6},"end":{"line":80,"column":39}},{"start":{"line":81,"column":6},"end":{"line":81,"column":40}},{"start":{"line":82,"column":6},"end":{"line":82,"column":41}},{"start":{"line":83,"column":6},"end":{"line":91,"column":14}},{"start":{"line":92,"column":6},"end":{"line":110,"column":14}},{"start":{"line":111,"column":6},"end":{"line":118,"column":14}}]},"5":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":8}},{"start":{"line":87,"column":8},"end":{"line":87,"column":8}}]},"6":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"7":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":8},"end":{"line":100,"column":8}},{"start":{"line":100,"column":8},"end":{"line":100,"column":8}}]},"8":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":104,"column":8}},{"start":{"line":104,"column":8},"end":{"line":104,"column":8}}]},"9":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":8}},{"start":{"line":114,"column":8},"end":{"line":114,"column":8}}]},"10":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":2},"end":{"line":124,"column":2}},{"start":{"line":124,"column":2},"end":{"line":124,"column":2}}]},"11":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":6},"end":{"line":124,"column":49}},{"start":{"line":124,"column":53},"end":{"line":124,"column":96}},{"start":{"line":124,"column":100},"end":{"line":124,"column":133}}]},"12":{"line":152,"type":"cond-expr","locations":[{"start":{"line":152,"column":44},"end":{"line":152,"column":80}},{"start":{"line":152,"column":83},"end":{"line":152,"column":87}}]},"13":{"line":155,"type":"cond-expr","locations":[{"start":{"line":155,"column":52},"end":{"line":155,"column":92}},{"start":{"line":155,"column":95},"end":{"line":155,"column":99}}]},"14":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":4},"end":{"line":199,"column":4}},{"start":{"line":199,"column":4},"end":{"line":199,"column":4}}]},"15":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":4},"end":{"line":233,"column":4}},{"start":{"line":233,"column":4},"end":{"line":233,"column":4}}]},"16":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":238,"column":4}},{"start":{"line":238,"column":4},"end":{"line":238,"column":4}}]},"17":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":4},"end":{"line":245,"column":4}},{"start":{"line":245,"column":4},"end":{"line":245,"column":4}}]},"18":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":4},"end":{"line":255,"column":4}},{"start":{"line":255,"column":4},"end":{"line":255,"column":4}}]},"19":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":4},"end":{"line":258,"column":4}},{"start":{"line":258,"column":4},"end":{"line":258,"column":4}}]},"20":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":4},"end":{"line":261,"column":4}},{"start":{"line":261,"column":4},"end":{"line":261,"column":4}}]},"21":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":4},"end":{"line":306,"column":4}},{"start":{"line":306,"column":4},"end":{"line":306,"column":4}}]},"22":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":10},"end":{"line":310,"column":10}},{"start":{"line":310,"column":10},"end":{"line":310,"column":10}}]},"23":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":4},"end":{"line":341,"column":4}},{"start":{"line":341,"column":4},"end":{"line":341,"column":4}}]},"24":{"line":345,"type":"if","locations":[{"start":{"line":345,"column":10},"end":{"line":345,"column":10}},{"start":{"line":345,"column":10},"end":{"line":345,"column":10}}]},"25":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":4},"end":{"line":362,"column":4}},{"start":{"line":362,"column":4},"end":{"line":362,"column":4}}]},"26":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":4},"end":{"line":365,"column":4}},{"start":{"line":365,"column":4},"end":{"line":365,"column":4}}]},"27":{"line":372,"type":"switch","locations":[{"start":{"line":373,"column":6},"end":{"line":374,"column":41}},{"start":{"line":375,"column":6},"end":{"line":376,"column":44}},{"start":{"line":377,"column":6},"end":{"line":378,"column":40}},{"start":{"line":379,"column":6},"end":{"line":380,"column":41}},{"start":{"line":381,"column":6},"end":{"line":382,"column":39}},{"start":{"line":383,"column":6},"end":{"line":384,"column":46}}]},"28":{"line":473,"type":"binary-expr","locations":[{"start":{"line":473,"column":12},"end":{"line":473,"column":35}},{"start":{"line":473,"column":39},"end":{"line":473,"column":80}}]},"29":{"line":478,"type":"binary-expr","locations":[{"start":{"line":478,"column":11},"end":{"line":478,"column":30}},{"start":{"line":478,"column":34},"end":{"line":478,"column":82}}]},"30":{"line":508,"type":"if","locations":[{"start":{"line":508,"column":4},"end":{"line":508,"column":4}},{"start":{"line":508,"column":4},"end":{"line":508,"column":4}}]},"31":{"line":511,"type":"if","locations":[{"start":{"line":511,"column":4},"end":{"line":511,"column":4}},{"start":{"line":511,"column":4},"end":{"line":511,"column":4}}]},"32":{"line":520,"type":"if","locations":[{"start":{"line":520,"column":4},"end":{"line":520,"column":4}},{"start":{"line":520,"column":4},"end":{"line":520,"column":4}}]},"33":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":4},"end":{"line":523,"column":4}},{"start":{"line":523,"column":4},"end":{"line":523,"column":4}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.extendSchema = extendSchema;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _keyMap = require('../jsutils/keyMap');","","var _keyMap2 = _interopRequireDefault(_keyMap);","","var _keyValMap = require('../jsutils/keyValMap');","","var _keyValMap2 = _interopRequireDefault(_keyValMap);","","var _buildASTSchema = require('./buildASTSchema');","","var _valueFromAST = require('./valueFromAST');","","var _GraphQLError = require('../error/GraphQLError');","","var _schema = require('../type/schema');","","var _definition = require('../type/definition');","","var _directives = require('../type/directives');","","var _introspection = require('../type/introspection');","","var _scalars = require('../type/scalars');","","var _kinds = require('../language/kinds');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," * Produces a new schema given an existing schema and a document which may"," * contain GraphQL type extensions and definitions. The original schema will"," * remain unaltered."," *"," * Because a schema represents a graph of references, a schema cannot be"," * extended without effectively making an entire copy. We do not know until it's"," * too late if subgraphs remain unchanged."," *"," * This algorithm copies the provided schema, applying extensions while"," * producing the copy. The original schema remains unaltered."," */","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function extendSchema(schema, documentAST) {","  (0, _invariant2.default)(schema instanceof _schema.GraphQLSchema, 'Must provide valid GraphQLSchema');","","  (0, _invariant2.default)(documentAST && documentAST.kind === _kinds.DOCUMENT, 'Must provide valid Document AST');","","  // Collect the type definitions and extensions found in the document.","  var typeDefinitionMap = {};","  var typeExtensionsMap = {};","","  // New directives and types are separate because a directives and types can","  // have the same name. For example, a type named \"skip\".","  var directiveDefinitions = [];","","  for (var i = 0; i < documentAST.definitions.length; i++) {","    var def = documentAST.definitions[i];","    switch (def.kind) {","      case _kinds.OBJECT_TYPE_DEFINITION:","      case _kinds.INTERFACE_TYPE_DEFINITION:","      case _kinds.ENUM_TYPE_DEFINITION:","      case _kinds.UNION_TYPE_DEFINITION:","      case _kinds.SCALAR_TYPE_DEFINITION:","      case _kinds.INPUT_OBJECT_TYPE_DEFINITION:","        // Sanity check that none of the defined types conflict with the","        // schema's existing types.","        var typeName = def.name.value;","        if (schema.getType(typeName)) {","          throw new _GraphQLError.GraphQLError('Type \"' + typeName + '\" already exists in the schema. It cannot also ' + 'be defined in this type definition.', [def]);","        }","        typeDefinitionMap[typeName] = def;","        break;","      case _kinds.TYPE_EXTENSION_DEFINITION:","        // Sanity check that this type extension exists within the","        // schema's existing types.","        var extendedTypeName = def.definition.name.value;","        var existingType = schema.getType(extendedTypeName);","        if (!existingType) {","          throw new _GraphQLError.GraphQLError('Cannot extend type \"' + extendedTypeName + '\" because it does not ' + 'exist in the existing schema.', [def.definition]);","        }","        if (!(existingType instanceof _definition.GraphQLObjectType)) {","          throw new _GraphQLError.GraphQLError('Cannot extend non-object type \"' + extendedTypeName + '\".', [def.definition]);","        }","        var extensions = typeExtensionsMap[extendedTypeName];","        if (extensions) {","          extensions.push(def);","        } else {","          extensions = [def];","        }","        typeExtensionsMap[extendedTypeName] = extensions;","        break;","      case _kinds.DIRECTIVE_DEFINITION:","        var directiveName = def.name.value;","        var existingDirective = schema.getDirective(directiveName);","        if (existingDirective) {","          throw new _GraphQLError.GraphQLError('Directive \"' + directiveName + '\" already exists in the schema. It ' + 'cannot be redefined.', [def]);","        }","        directiveDefinitions.push(def);","        break;","    }","  }","","  // If this document contains no new types, extensions, or directives then","  // return the same unmodified GraphQLSchema instance.","  if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0) {","    return schema;","  }","","  // A cache to use to store the actual GraphQLType definition objects by name.","  // Initialize to the GraphQL built in scalars and introspection types. All","  // functions below are inline so that this type def cache is within the scope","  // of the closure.","  var typeDefCache = {","    String: _scalars.GraphQLString,","    Int: _scalars.GraphQLInt,","    Float: _scalars.GraphQLFloat,","    Boolean: _scalars.GraphQLBoolean,","    ID: _scalars.GraphQLID,","    __Schema: _introspection.__Schema,","    __Directive: _introspection.__Directive,","    __DirectiveLocation: _introspection.__DirectiveLocation,","    __Type: _introspection.__Type,","    __Field: _introspection.__Field,","    __InputValue: _introspection.__InputValue,","    __EnumValue: _introspection.__EnumValue,","    __TypeKind: _introspection.__TypeKind","  };","","  // Get the root Query, Mutation, and Subscription object types.","  var queryType = getTypeFromDef(schema.getQueryType());","","  var existingMutationType = schema.getMutationType();","  var mutationType = existingMutationType ? getTypeFromDef(existingMutationType) : null;","","  var existingSubscriptionType = schema.getSubscriptionType();","  var subscriptionType = existingSubscriptionType ? getTypeFromDef(existingSubscriptionType) : null;","","  // Iterate through all types, getting the type definition for each, ensuring","  // that any type not directly referenced by a field will get created.","  var typeMap = schema.getTypeMap();","  var types = Object.keys(typeMap).map(function (typeName) {","    return getTypeFromDef(typeMap[typeName]);","  });","","  // Do the same with new types, appending to the list of defined types.","  Object.keys(typeDefinitionMap).forEach(function (typeName) {","    types.push(getTypeFromAST(typeDefinitionMap[typeName]));","  });","","  // Then produce and return a Schema with these types.","  return new _schema.GraphQLSchema({","    query: queryType,","    mutation: mutationType,","    subscription: subscriptionType,","    types: types,","    directives: getMergedDirectives()","  });","","  // Below are functions used for producing this schema that have closed over","  // this scope and have access to the schema, cache, and newly defined types.","","  function getMergedDirectives() {","    var existingDirectives = schema.getDirectives();","    (0, _invariant2.default)(existingDirectives, 'schema must have default directives');","","    var newDirectives = directiveDefinitions.map(function (directiveNode) {","      return getDirective(directiveNode);","    });","    return existingDirectives.concat(newDirectives);","  }","","  function getTypeFromDef(typeDef) {","    var type = _getNamedType(typeDef.name);","    (0, _invariant2.default)(type, 'Missing type from schema');","    return type;","  }","","  function getTypeFromAST(node) {","    var type = _getNamedType(node.name.value);","    if (!type) {","      throw new _GraphQLError.GraphQLError('Unknown type: \"' + node.name.value + '\". Ensure that this type exists ' + 'either in the original schema, or is added in a type definition.', [node]);","    }","    return type;","  }","","  function getObjectTypeFromAST(node) {","    var type = getTypeFromAST(node);","    (0, _invariant2.default)(type instanceof _definition.GraphQLObjectType, 'Must be Object type.');","    return type;","  }","","  function getInterfaceTypeFromAST(node) {","    var type = getTypeFromAST(node);","    (0, _invariant2.default)(type instanceof _definition.GraphQLInterfaceType, 'Must be Interface type.');","    return type;","  }","","  function getInputTypeFromAST(node) {","    var type = getTypeFromAST(node);","    (0, _invariant2.default)((0, _definition.isInputType)(type), 'Must be Input type.');","    return type;","  }","","  function getOutputTypeFromAST(node) {","    var type = getTypeFromAST(node);","    (0, _invariant2.default)((0, _definition.isOutputType)(type), 'Must be Output type.');","    return type;","  }","","  // Given a name, returns a type from either the existing schema or an","  // added type.","  function _getNamedType(typeName) {","    var cachedTypeDef = typeDefCache[typeName];","    if (cachedTypeDef) {","      return cachedTypeDef;","    }","","    var existingType = schema.getType(typeName);","    if (existingType) {","      var typeDef = extendType(existingType);","      typeDefCache[typeName] = typeDef;","      return typeDef;","    }","","    var typeNode = typeDefinitionMap[typeName];","    if (typeNode) {","      var _typeDef = buildType(typeNode);","      typeDefCache[typeName] = _typeDef;","      return _typeDef;","    }","  }","","  // Given a type's introspection result, construct the correct","  // GraphQLType instance.","  function extendType(type) {","    if (type instanceof _definition.GraphQLObjectType) {","      return extendObjectType(type);","    }","    if (type instanceof _definition.GraphQLInterfaceType) {","      return extendInterfaceType(type);","    }","    if (type instanceof _definition.GraphQLUnionType) {","      return extendUnionType(type);","    }","    return type;","  }","","  function extendObjectType(type) {","    return new _definition.GraphQLObjectType({","      name: type.name,","      description: type.description,","      interfaces: function interfaces() {","        return extendImplementedInterfaces(type);","      },","      fields: function fields() {","        return extendFieldMap(type);","      },","      isTypeOf: type.isTypeOf","    });","  }","","  function extendInterfaceType(type) {","    return new _definition.GraphQLInterfaceType({","      name: type.name,","      description: type.description,","      fields: function fields() {","        return extendFieldMap(type);","      },","      resolveType: type.resolveType","    });","  }","","  function extendUnionType(type) {","    return new _definition.GraphQLUnionType({","      name: type.name,","      description: type.description,","      types: type.getTypes().map(getTypeFromDef),","      resolveType: type.resolveType","    });","  }","","  function extendImplementedInterfaces(type) {","    var interfaces = type.getInterfaces().map(getTypeFromDef);","","    // If there are any extensions to the interfaces, apply those here.","    var extensions = typeExtensionsMap[type.name];","    if (extensions) {","      extensions.forEach(function (extension) {","        extension.definition.interfaces.forEach(function (namedType) {","          var interfaceName = namedType.name.value;","          if (interfaces.some(function (def) {","            return def.name === interfaceName;","          })) {","            throw new _GraphQLError.GraphQLError('Type \"' + type.name + '\" already implements \"' + interfaceName + '\". ' + 'It cannot also be implemented in this type extension.', [namedType]);","          }","          interfaces.push(getInterfaceTypeFromAST(namedType));","        });","      });","    }","","    return interfaces;","  }","","  function extendFieldMap(type) {","    var newFieldMap = {};","    var oldFieldMap = type.getFields();","    Object.keys(oldFieldMap).forEach(function (fieldName) {","      var field = oldFieldMap[fieldName];","      newFieldMap[fieldName] = {","        description: field.description,","        deprecationReason: field.deprecationReason,","        type: extendFieldType(field.type),","        args: (0, _keyMap2.default)(field.args, function (arg) {","          return arg.name;","        }),","        resolve: field.resolve","      };","    });","","    // If there are any extensions to the fields, apply those here.","    var extensions = typeExtensionsMap[type.name];","    if (extensions) {","      extensions.forEach(function (extension) {","        extension.definition.fields.forEach(function (field) {","          var fieldName = field.name.value;","          if (oldFieldMap[fieldName]) {","            throw new _GraphQLError.GraphQLError('Field \"' + type.name + '.' + fieldName + '\" already exists in the ' + 'schema. It cannot also be defined in this type extension.', [field]);","          }","          newFieldMap[fieldName] = {","            description: (0, _buildASTSchema.getDescription)(field),","            type: buildOutputFieldType(field.type),","            args: buildInputValues(field.arguments),","            deprecationReason: (0, _buildASTSchema.getDeprecationReason)(field.directives)","          };","        });","      });","    }","","    return newFieldMap;","  }","","  function extendFieldType(typeDef) {","    if (typeDef instanceof _definition.GraphQLList) {","      return new _definition.GraphQLList(extendFieldType(typeDef.ofType));","    }","    if (typeDef instanceof _definition.GraphQLNonNull) {","      return new _definition.GraphQLNonNull(extendFieldType(typeDef.ofType));","    }","    return getTypeFromDef(typeDef);","  }","","  function buildType(typeNode) {","    switch (typeNode.kind) {","      case _kinds.OBJECT_TYPE_DEFINITION:","        return buildObjectType(typeNode);","      case _kinds.INTERFACE_TYPE_DEFINITION:","        return buildInterfaceType(typeNode);","      case _kinds.UNION_TYPE_DEFINITION:","        return buildUnionType(typeNode);","      case _kinds.SCALAR_TYPE_DEFINITION:","        return buildScalarType(typeNode);","      case _kinds.ENUM_TYPE_DEFINITION:","        return buildEnumType(typeNode);","      case _kinds.INPUT_OBJECT_TYPE_DEFINITION:","        return buildInputObjectType(typeNode);","    }","    throw new TypeError('Unknown type kind ' + typeNode.kind);","  }","","  function buildObjectType(typeNode) {","    return new _definition.GraphQLObjectType({","      name: typeNode.name.value,","      description: (0, _buildASTSchema.getDescription)(typeNode),","      interfaces: function interfaces() {","        return buildImplementedInterfaces(typeNode);","      },","      fields: function fields() {","        return buildFieldMap(typeNode);","      }","    });","  }","","  function buildInterfaceType(typeNode) {","    return new _definition.GraphQLInterfaceType({","      name: typeNode.name.value,","      description: (0, _buildASTSchema.getDescription)(typeNode),","      fields: function fields() {","        return buildFieldMap(typeNode);","      },","      resolveType: cannotExecuteExtendedSchema","    });","  }","","  function buildUnionType(typeNode) {","    return new _definition.GraphQLUnionType({","      name: typeNode.name.value,","      description: (0, _buildASTSchema.getDescription)(typeNode),","      types: typeNode.types.map(getObjectTypeFromAST),","      resolveType: cannotExecuteExtendedSchema","    });","  }","","  function buildScalarType(typeNode) {","    return new _definition.GraphQLScalarType({","      name: typeNode.name.value,","      description: (0, _buildASTSchema.getDescription)(typeNode),","      serialize: function serialize(id) {","        return id;","      },","      // Note: validation calls the parse functions to determine if a","      // literal value is correct. Returning null would cause use of custom","      // scalars to always fail validation. Returning false causes them to","      // always pass validation.","      parseValue: function parseValue() {","        return false;","      },","      parseLiteral: function parseLiteral() {","        return false;","      }","    });","  }","","  function buildEnumType(typeNode) {","    return new _definition.GraphQLEnumType({","      name: typeNode.name.value,","      description: (0, _buildASTSchema.getDescription)(typeNode),","      values: (0, _keyValMap2.default)(typeNode.values, function (enumValue) {","        return enumValue.name.value;","      }, function (enumValue) {","        return {","          description: (0, _buildASTSchema.getDescription)(enumValue),","          deprecationReason: (0, _buildASTSchema.getDeprecationReason)(enumValue.directives)","        };","      })","    });","  }","","  function buildInputObjectType(typeNode) {","    return new _definition.GraphQLInputObjectType({","      name: typeNode.name.value,","      description: (0, _buildASTSchema.getDescription)(typeNode),","      fields: function fields() {","        return buildInputValues(typeNode.fields);","      }","    });","  }","","  function getDirective(directiveNode) {","    return new _directives.GraphQLDirective({","      name: directiveNode.name.value,","      locations: directiveNode.locations.map(function (node) {","        return node.value;","      }),","      args: directiveNode.arguments && buildInputValues(directiveNode.arguments)","    });","  }","","  function buildImplementedInterfaces(typeNode) {","    return typeNode.interfaces && typeNode.interfaces.map(getInterfaceTypeFromAST);","  }","","  function buildFieldMap(typeNode) {","    return (0, _keyValMap2.default)(typeNode.fields, function (field) {","      return field.name.value;","    }, function (field) {","      return {","        type: buildOutputFieldType(field.type),","        description: (0, _buildASTSchema.getDescription)(field),","        args: buildInputValues(field.arguments),","        deprecationReason: (0, _buildASTSchema.getDeprecationReason)(field.directives)","      };","    });","  }","","  function buildInputValues(values) {","    return (0, _keyValMap2.default)(values, function (value) {","      return value.name.value;","    }, function (value) {","      var type = buildInputFieldType(value.type);","      return {","        type: type,","        description: (0, _buildASTSchema.getDescription)(value),","        defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type)","      };","    });","  }","","  function buildInputFieldType(typeNode) {","    if (typeNode.kind === _kinds.LIST_TYPE) {","      return new _definition.GraphQLList(buildInputFieldType(typeNode.type));","    }","    if (typeNode.kind === _kinds.NON_NULL_TYPE) {","      var nullableType = buildInputFieldType(typeNode.type);","      (0, _invariant2.default)(!(nullableType instanceof _definition.GraphQLNonNull), 'Must be nullable');","      return new _definition.GraphQLNonNull(nullableType);","    }","    return getInputTypeFromAST(typeNode);","  }","","  function buildOutputFieldType(typeNode) {","    if (typeNode.kind === _kinds.LIST_TYPE) {","      return new _definition.GraphQLList(buildOutputFieldType(typeNode.type));","    }","    if (typeNode.kind === _kinds.NON_NULL_TYPE) {","      var nullableType = buildOutputFieldType(typeNode.type);","      (0, _invariant2.default)(!(nullableType instanceof _definition.GraphQLNonNull), 'Must be nullable');","      return new _definition.GraphQLNonNull(nullableType);","    }","    return getOutputTypeFromAST(typeNode);","  }","}","","function cannotExecuteExtendedSchema() {","  throw new Error('Extended Schema cannot use Interface or Union types for execution.');","}"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":1,"34":1,"36":1,"38":3,"62":1,"63":0,"65":0,"68":0,"69":0,"73":0,"75":0,"76":0,"77":0,"86":0,"87":0,"88":0,"90":0,"91":0,"95":0,"96":0,"97":0,"98":0,"100":0,"101":0,"103":0,"104":0,"105":0,"107":0,"109":0,"110":0,"112":0,"113":0,"114":0,"115":0,"117":0,"118":0,"124":0,"125":0,"132":0,"149":0,"151":0,"152":0,"154":0,"155":0,"159":0,"160":0,"161":0,"165":0,"166":0,"170":0,"181":1,"182":0,"183":0,"185":0,"186":0,"188":0,"191":1,"192":0,"193":0,"194":0,"197":1,"198":0,"199":0,"200":0,"202":0,"205":1,"206":0,"207":0,"208":0,"211":1,"212":0,"213":0,"214":0,"217":1,"218":0,"219":0,"220":0,"223":1,"224":0,"225":0,"226":0,"231":1,"232":0,"233":0,"234":0,"237":0,"238":0,"239":0,"240":0,"241":0,"244":0,"245":0,"246":0,"247":0,"248":0,"254":1,"255":0,"256":0,"258":0,"259":0,"261":0,"262":0,"264":0,"267":1,"268":0,"272":0,"275":0,"281":1,"282":0,"286":0,"292":1,"293":0,"301":1,"302":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"313":0,"315":0,"320":0,"323":1,"324":0,"325":0,"326":0,"327":0,"328":0,"333":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"348":0,"358":0,"361":1,"362":0,"363":0,"365":0,"366":0,"368":0,"371":1,"372":0,"374":0,"376":0,"378":0,"380":0,"382":0,"384":0,"386":0,"389":1,"390":0,"394":0,"397":0,"402":1,"403":0,"407":0,"413":1,"414":0,"422":1,"423":0,"427":0,"434":0,"437":0,"442":1,"443":0,"447":0,"449":0,"457":1,"458":0,"462":0,"467":1,"468":0,"471":0,"477":1,"478":0,"481":1,"482":0,"483":0,"485":0,"494":1,"495":0,"496":0,"498":0,"499":0,"507":1,"508":0,"509":0,"511":0,"512":0,"513":0,"514":0,"516":0,"519":1,"520":0,"521":0,"523":0,"524":0,"525":0,"526":0,"528":0,"532":1,"533":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/schemaPrinter.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/schemaPrinter.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":3,"18":1,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":1,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":1,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0},"b":{"1":[3,0],"2":[3,3],"3":[0,0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"fnMap":{"1":{"name":"_interopRequireDefault","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":37}}},"2":{"name":"printSchema","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":29}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":37},"end":{"line":44,"column":50}}},"4":{"name":"printIntrospectionSchema","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":42}}},"5":{"name":"isSpecDirective","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":40}}},"6":{"name":"isDefinedType","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":33}}},"7":{"name":"isIntrospectionType","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":39}}},"8":{"name":"isBuiltInScalar","line":65,"loc":{"start":{"line":65,"column":0},"end":{"line":65,"column":35}}},"9":{"name":"printFilteredSchema","line":69,"loc":{"start":{"line":69,"column":0},"end":{"line":69,"column":66}}},"10":{"name":"(anonymous_10)","line":70,"loc":{"start":{"line":70,"column":49},"end":{"line":70,"column":70}}},"11":{"name":"(anonymous_11)","line":74,"loc":{"start":{"line":74,"column":59},"end":{"line":74,"column":83}}},"12":{"name":"(anonymous_12)","line":76,"loc":{"start":{"line":76,"column":9},"end":{"line":76,"column":29}}},"13":{"name":"printSchemaDefinition","line":83,"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":39}}},"14":{"name":"isSchemaOfCommonNames","line":120,"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":39}}},"15":{"name":"printType","line":139,"loc":{"start":{"line":139,"column":0},"end":{"line":139,"column":25}}},"16":{"name":"printScalar","line":155,"loc":{"start":{"line":155,"column":0},"end":{"line":155,"column":27}}},"17":{"name":"printObject","line":159,"loc":{"start":{"line":159,"column":0},"end":{"line":159,"column":27}}},"18":{"name":"(anonymous_18)","line":161,"loc":{"start":{"line":161,"column":82},"end":{"line":161,"column":95}}},"19":{"name":"printInterface","line":167,"loc":{"start":{"line":167,"column":0},"end":{"line":167,"column":30}}},"20":{"name":"printUnion","line":171,"loc":{"start":{"line":171,"column":0},"end":{"line":171,"column":26}}},"21":{"name":"printEnum","line":175,"loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":25}}},"22":{"name":"printEnumValues","line":179,"loc":{"start":{"line":179,"column":0},"end":{"line":179,"column":33}}},"23":{"name":"(anonymous_23)","line":180,"loc":{"start":{"line":180,"column":20},"end":{"line":180,"column":40}}},"24":{"name":"printInputObject","line":185,"loc":{"start":{"line":185,"column":0},"end":{"line":185,"column":32}}},"25":{"name":"(anonymous_25)","line":187,"loc":{"start":{"line":187,"column":41},"end":{"line":187,"column":62}}},"26":{"name":"(anonymous_26)","line":190,"loc":{"start":{"line":190,"column":79},"end":{"line":190,"column":95}}},"27":{"name":"printFields","line":195,"loc":{"start":{"line":195,"column":0},"end":{"line":195,"column":27}}},"28":{"name":"(anonymous_28)","line":197,"loc":{"start":{"line":197,"column":41},"end":{"line":197,"column":62}}},"29":{"name":"(anonymous_29)","line":200,"loc":{"start":{"line":200,"column":20},"end":{"line":200,"column":36}}},"30":{"name":"printArgs","line":205,"loc":{"start":{"line":205,"column":0},"end":{"line":205,"column":25}}},"31":{"name":"(anonymous_31)","line":213,"loc":{"start":{"line":213,"column":17},"end":{"line":213,"column":32}}},"32":{"name":"(anonymous_32)","line":219,"loc":{"start":{"line":219,"column":26},"end":{"line":219,"column":44}}},"33":{"name":"printInputValue","line":224,"loc":{"start":{"line":224,"column":0},"end":{"line":224,"column":30}}},"34":{"name":"printDirective","line":232,"loc":{"start":{"line":232,"column":0},"end":{"line":232,"column":35}}},"35":{"name":"printDeprecated","line":236,"loc":{"start":{"line":236,"column":0},"end":{"line":236,"column":41}}},"36":{"name":"printDescription","line":247,"loc":{"start":{"line":247,"column":0},"end":{"line":247,"column":31}}},"37":{"name":"breakLine","line":271,"loc":{"start":{"line":271,"column":0},"end":{"line":271,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":34}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":60}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":30}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":53}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":49}},"8":{"start":{"line":16,"column":0},"end":{"line":16,"column":53}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":49}},"10":{"start":{"line":20,"column":0},"end":{"line":20,"column":53}},"11":{"start":{"line":22,"column":0},"end":{"line":22,"column":57}},"12":{"start":{"line":24,"column":0},"end":{"line":24,"column":46}},"13":{"start":{"line":26,"column":0},"end":{"line":26,"column":48}},"14":{"start":{"line":28,"column":0},"end":{"line":28,"column":42}},"15":{"start":{"line":30,"column":0},"end":{"line":30,"column":48}},"16":{"start":{"line":32,"column":0},"end":{"line":32,"column":97}},"17":{"start":{"line":32,"column":39},"end":{"line":32,"column":95}},"18":{"start":{"line":43,"column":0},"end":{"line":47,"column":1}},"19":{"start":{"line":44,"column":2},"end":{"line":46,"column":20}},"20":{"start":{"line":45,"column":4},"end":{"line":45,"column":31}},"21":{"start":{"line":49,"column":0},"end":{"line":51,"column":1}},"22":{"start":{"line":50,"column":2},"end":{"line":50,"column":75}},"23":{"start":{"line":53,"column":0},"end":{"line":55,"column":1}},"24":{"start":{"line":54,"column":2},"end":{"line":54,"column":99}},"25":{"start":{"line":57,"column":0},"end":{"line":59,"column":1}},"26":{"start":{"line":58,"column":2},"end":{"line":58,"column":70}},"27":{"start":{"line":61,"column":0},"end":{"line":63,"column":1}},"28":{"start":{"line":62,"column":2},"end":{"line":62,"column":38}},"29":{"start":{"line":65,"column":0},"end":{"line":67,"column":1}},"30":{"start":{"line":66,"column":2},"end":{"line":66,"column":124}},"31":{"start":{"line":69,"column":0},"end":{"line":81,"column":1}},"32":{"start":{"line":70,"column":2},"end":{"line":72,"column":5}},"33":{"start":{"line":71,"column":4},"end":{"line":71,"column":43}},"34":{"start":{"line":73,"column":2},"end":{"line":73,"column":36}},"35":{"start":{"line":74,"column":2},"end":{"line":78,"column":5}},"36":{"start":{"line":75,"column":4},"end":{"line":75,"column":38}},"37":{"start":{"line":77,"column":4},"end":{"line":77,"column":29}},"38":{"start":{"line":80,"column":2},"end":{"line":80,"column":138}},"39":{"start":{"line":83,"column":0},"end":{"line":106,"column":1}},"40":{"start":{"line":84,"column":2},"end":{"line":86,"column":3}},"41":{"start":{"line":85,"column":4},"end":{"line":85,"column":11}},"42":{"start":{"line":88,"column":2},"end":{"line":88,"column":26}},"43":{"start":{"line":90,"column":2},"end":{"line":90,"column":40}},"44":{"start":{"line":91,"column":2},"end":{"line":93,"column":3}},"45":{"start":{"line":92,"column":4},"end":{"line":92,"column":54}},"46":{"start":{"line":95,"column":2},"end":{"line":95,"column":46}},"47":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"48":{"start":{"line":97,"column":4},"end":{"line":97,"column":60}},"49":{"start":{"line":100,"column":2},"end":{"line":100,"column":54}},"50":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"51":{"start":{"line":102,"column":4},"end":{"line":102,"column":68}},"52":{"start":{"line":105,"column":2},"end":{"line":105,"column":58}},"53":{"start":{"line":120,"column":0},"end":{"line":137,"column":1}},"54":{"start":{"line":121,"column":2},"end":{"line":121,"column":40}},"55":{"start":{"line":122,"column":2},"end":{"line":124,"column":3}},"56":{"start":{"line":123,"column":4},"end":{"line":123,"column":17}},"57":{"start":{"line":126,"column":2},"end":{"line":126,"column":46}},"58":{"start":{"line":127,"column":2},"end":{"line":129,"column":3}},"59":{"start":{"line":128,"column":4},"end":{"line":128,"column":17}},"60":{"start":{"line":131,"column":2},"end":{"line":131,"column":54}},"61":{"start":{"line":132,"column":2},"end":{"line":134,"column":3}},"62":{"start":{"line":133,"column":4},"end":{"line":133,"column":17}},"63":{"start":{"line":136,"column":2},"end":{"line":136,"column":14}},"64":{"start":{"line":139,"column":0},"end":{"line":153,"column":1}},"65":{"start":{"line":140,"column":2},"end":{"line":150,"column":3}},"66":{"start":{"line":141,"column":4},"end":{"line":141,"column":29}},"67":{"start":{"line":142,"column":9},"end":{"line":150,"column":3}},"68":{"start":{"line":143,"column":4},"end":{"line":143,"column":29}},"69":{"start":{"line":144,"column":9},"end":{"line":150,"column":3}},"70":{"start":{"line":145,"column":4},"end":{"line":145,"column":32}},"71":{"start":{"line":146,"column":9},"end":{"line":150,"column":3}},"72":{"start":{"line":147,"column":4},"end":{"line":147,"column":28}},"73":{"start":{"line":148,"column":9},"end":{"line":150,"column":3}},"74":{"start":{"line":149,"column":4},"end":{"line":149,"column":27}},"75":{"start":{"line":151,"column":2},"end":{"line":151,"column":79}},"76":{"start":{"line":152,"column":2},"end":{"line":152,"column":32}},"77":{"start":{"line":155,"column":0},"end":{"line":157,"column":1}},"78":{"start":{"line":156,"column":2},"end":{"line":156,"column":58}},"79":{"start":{"line":159,"column":0},"end":{"line":165,"column":1}},"80":{"start":{"line":160,"column":2},"end":{"line":160,"column":40}},"81":{"start":{"line":161,"column":2},"end":{"line":163,"column":21}},"82":{"start":{"line":162,"column":4},"end":{"line":162,"column":18}},"83":{"start":{"line":164,"column":2},"end":{"line":164,"column":122}},"84":{"start":{"line":167,"column":0},"end":{"line":169,"column":1}},"85":{"start":{"line":168,"column":2},"end":{"line":168,"column":103}},"86":{"start":{"line":171,"column":0},"end":{"line":173,"column":1}},"87":{"start":{"line":172,"column":2},"end":{"line":172,"column":95}},"88":{"start":{"line":175,"column":0},"end":{"line":177,"column":1}},"89":{"start":{"line":176,"column":2},"end":{"line":176,"column":114}},"90":{"start":{"line":179,"column":0},"end":{"line":183,"column":1}},"91":{"start":{"line":180,"column":2},"end":{"line":182,"column":16}},"92":{"start":{"line":181,"column":4},"end":{"line":181,"column":90}},"93":{"start":{"line":185,"column":0},"end":{"line":193,"column":1}},"94":{"start":{"line":186,"column":2},"end":{"line":186,"column":34}},"95":{"start":{"line":187,"column":2},"end":{"line":189,"column":5}},"96":{"start":{"line":188,"column":4},"end":{"line":188,"column":31}},"97":{"start":{"line":190,"column":2},"end":{"line":192,"column":29}},"98":{"start":{"line":191,"column":4},"end":{"line":191,"column":69}},"99":{"start":{"line":195,"column":0},"end":{"line":203,"column":1}},"100":{"start":{"line":196,"column":2},"end":{"line":196,"column":34}},"101":{"start":{"line":197,"column":2},"end":{"line":199,"column":5}},"102":{"start":{"line":198,"column":4},"end":{"line":198,"column":31}},"103":{"start":{"line":200,"column":2},"end":{"line":202,"column":16}},"104":{"start":{"line":201,"column":4},"end":{"line":201,"column":128}},"105":{"start":{"line":205,"column":0},"end":{"line":222,"column":1}},"106":{"start":{"line":206,"column":2},"end":{"line":206,"column":91}},"107":{"start":{"line":208,"column":2},"end":{"line":210,"column":3}},"108":{"start":{"line":209,"column":4},"end":{"line":209,"column":14}},"109":{"start":{"line":213,"column":2},"end":{"line":217,"column":3}},"110":{"start":{"line":214,"column":4},"end":{"line":214,"column":28}},"111":{"start":{"line":216,"column":4},"end":{"line":216,"column":60}},"112":{"start":{"line":219,"column":2},"end":{"line":221,"column":43}},"113":{"start":{"line":220,"column":4},"end":{"line":220,"column":101}},"114":{"start":{"line":224,"column":0},"end":{"line":230,"column":1}},"115":{"start":{"line":225,"column":2},"end":{"line":225,"column":51}},"116":{"start":{"line":226,"column":2},"end":{"line":228,"column":3}},"117":{"start":{"line":227,"column":4},"end":{"line":227,"column":104}},"118":{"start":{"line":229,"column":2},"end":{"line":229,"column":17}},"119":{"start":{"line":232,"column":0},"end":{"line":234,"column":1}},"120":{"start":{"line":233,"column":2},"end":{"line":233,"column":141}},"121":{"start":{"line":236,"column":0},"end":{"line":245,"column":1}},"122":{"start":{"line":237,"column":2},"end":{"line":237,"column":48}},"123":{"start":{"line":238,"column":2},"end":{"line":240,"column":3}},"124":{"start":{"line":239,"column":4},"end":{"line":239,"column":14}},"125":{"start":{"line":241,"column":2},"end":{"line":243,"column":3}},"126":{"start":{"line":242,"column":4},"end":{"line":242,"column":26}},"127":{"start":{"line":244,"column":2},"end":{"line":244,"column":126}},"128":{"start":{"line":247,"column":0},"end":{"line":269,"column":1}},"129":{"start":{"line":248,"column":2},"end":{"line":248,"column":91}},"130":{"start":{"line":249,"column":2},"end":{"line":249,"column":94}},"131":{"start":{"line":251,"column":2},"end":{"line":253,"column":3}},"132":{"start":{"line":252,"column":4},"end":{"line":252,"column":14}},"133":{"start":{"line":254,"column":2},"end":{"line":254,"column":42}},"134":{"start":{"line":255,"column":2},"end":{"line":255,"column":61}},"135":{"start":{"line":256,"column":2},"end":{"line":267,"column":3}},"136":{"start":{"line":257,"column":4},"end":{"line":266,"column":5}},"137":{"start":{"line":258,"column":6},"end":{"line":258,"column":41}},"138":{"start":{"line":262,"column":6},"end":{"line":262,"column":67}},"139":{"start":{"line":263,"column":6},"end":{"line":265,"column":7}},"140":{"start":{"line":264,"column":8},"end":{"line":264,"column":63}},"141":{"start":{"line":268,"column":2},"end":{"line":268,"column":21}},"142":{"start":{"line":271,"column":0},"end":{"line":284,"column":1}},"143":{"start":{"line":272,"column":2},"end":{"line":274,"column":3}},"144":{"start":{"line":273,"column":4},"end":{"line":273,"column":18}},"145":{"start":{"line":275,"column":2},"end":{"line":275,"column":81}},"146":{"start":{"line":276,"column":2},"end":{"line":278,"column":3}},"147":{"start":{"line":277,"column":4},"end":{"line":277,"column":18}},"148":{"start":{"line":279,"column":2},"end":{"line":279,"column":50}},"149":{"start":{"line":280,"column":2},"end":{"line":282,"column":3}},"150":{"start":{"line":281,"column":4},"end":{"line":281,"column":52}},"151":{"start":{"line":283,"column":2},"end":{"line":283,"column":18}}},"branchMap":{"1":{"line":32,"type":"cond-expr","locations":[{"start":{"line":32,"column":70},"end":{"line":32,"column":73}},{"start":{"line":32,"column":76},"end":{"line":32,"column":94}}]},"2":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":46},"end":{"line":32,"column":49}},{"start":{"line":32,"column":53},"end":{"line":32,"column":67}}]},"3":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":9},"end":{"line":54,"column":33}},{"start":{"line":54,"column":37},"end":{"line":54,"column":64}},{"start":{"line":54,"column":68},"end":{"line":54,"column":98}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":9},"end":{"line":58,"column":39}},{"start":{"line":58,"column":43},"end":{"line":58,"column":69}}]},"5":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":9},"end":{"line":66,"column":30}},{"start":{"line":66,"column":34},"end":{"line":66,"column":56}},{"start":{"line":66,"column":60},"end":{"line":66,"column":78}},{"start":{"line":66,"column":82},"end":{"line":66,"column":102}},{"start":{"line":66,"column":106},"end":{"line":66,"column":123}}]},"6":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"7":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":2},"end":{"line":91,"column":2}},{"start":{"line":91,"column":2},"end":{"line":91,"column":2}}]},"8":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"9":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"10":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":2},"end":{"line":122,"column":2}},{"start":{"line":122,"column":2},"end":{"line":122,"column":2}}]},"11":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":6},"end":{"line":122,"column":15}},{"start":{"line":122,"column":19},"end":{"line":122,"column":45}}]},"12":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":2},"end":{"line":127,"column":2}},{"start":{"line":127,"column":2},"end":{"line":127,"column":2}}]},"13":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":6},"end":{"line":127,"column":18}},{"start":{"line":127,"column":22},"end":{"line":127,"column":54}}]},"14":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":2},"end":{"line":132,"column":2}},{"start":{"line":132,"column":2},"end":{"line":132,"column":2}}]},"15":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":6},"end":{"line":132,"column":22}},{"start":{"line":132,"column":26},"end":{"line":132,"column":66}}]},"16":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":2},"end":{"line":140,"column":2}},{"start":{"line":140,"column":2},"end":{"line":140,"column":2}}]},"17":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":9},"end":{"line":142,"column":9}},{"start":{"line":142,"column":9},"end":{"line":142,"column":9}}]},"18":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":9},"end":{"line":144,"column":9}},{"start":{"line":144,"column":9},"end":{"line":144,"column":9}}]},"19":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":9},"end":{"line":146,"column":9}},{"start":{"line":146,"column":9},"end":{"line":146,"column":9}}]},"20":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":9},"end":{"line":148,"column":9}},{"start":{"line":148,"column":9},"end":{"line":148,"column":9}}]},"21":{"line":161,"type":"cond-expr","locations":[{"start":{"line":161,"column":50},"end":{"line":163,"column":15}},{"start":{"line":163,"column":18},"end":{"line":163,"column":20}}]},"22":{"line":206,"type":"cond-expr","locations":[{"start":{"line":206,"column":73},"end":{"line":206,"column":85}},{"start":{"line":206,"column":88},"end":{"line":206,"column":90}}]},"23":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":20},"end":{"line":206,"column":40}},{"start":{"line":206,"column":44},"end":{"line":206,"column":70}}]},"24":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":2},"end":{"line":208,"column":2}},{"start":{"line":208,"column":2},"end":{"line":208,"column":2}}]},"25":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":2},"end":{"line":213,"column":2}},{"start":{"line":213,"column":2},"end":{"line":213,"column":2}}]},"26":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":2},"end":{"line":226,"column":2}},{"start":{"line":226,"column":2},"end":{"line":226,"column":2}}]},"27":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":2},"end":{"line":238,"column":2}},{"start":{"line":238,"column":2},"end":{"line":238,"column":2}}]},"28":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"29":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":6},"end":{"line":241,"column":19}},{"start":{"line":241,"column":23},"end":{"line":241,"column":72}}]},"30":{"line":248,"type":"cond-expr","locations":[{"start":{"line":248,"column":73},"end":{"line":248,"column":85}},{"start":{"line":248,"column":88},"end":{"line":248,"column":90}}]},"31":{"line":248,"type":"binary-expr","locations":[{"start":{"line":248,"column":20},"end":{"line":248,"column":40}},{"start":{"line":248,"column":44},"end":{"line":248,"column":70}}]},"32":{"line":249,"type":"cond-expr","locations":[{"start":{"line":249,"column":74},"end":{"line":249,"column":86}},{"start":{"line":249,"column":89},"end":{"line":249,"column":93}}]},"33":{"line":249,"type":"binary-expr","locations":[{"start":{"line":249,"column":21},"end":{"line":249,"column":41}},{"start":{"line":249,"column":45},"end":{"line":249,"column":71}}]},"34":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":2},"end":{"line":251,"column":2}},{"start":{"line":251,"column":2},"end":{"line":251,"column":2}}]},"35":{"line":255,"type":"cond-expr","locations":[{"start":{"line":255,"column":51},"end":{"line":255,"column":55}},{"start":{"line":255,"column":58},"end":{"line":255,"column":60}}]},"36":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":20},"end":{"line":255,"column":31}},{"start":{"line":255,"column":35},"end":{"line":255,"column":48}}]},"37":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":4},"end":{"line":257,"column":4}},{"start":{"line":257,"column":4},"end":{"line":257,"column":4}}]},"38":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":2},"end":{"line":272,"column":2}},{"start":{"line":272,"column":2},"end":{"line":272,"column":2}}]},"39":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":2},"end":{"line":276,"column":2}},{"start":{"line":276,"column":2},"end":{"line":276,"column":2}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.printSchema = printSchema;","exports.printIntrospectionSchema = printIntrospectionSchema;","exports.printType = printType;","","var _invariant = require('../jsutils/invariant');","","var _invariant2 = _interopRequireDefault(_invariant);","","var _isNullish = require('../jsutils/isNullish');","","var _isNullish2 = _interopRequireDefault(_isNullish);","","var _isInvalid = require('../jsutils/isInvalid');","","var _isInvalid2 = _interopRequireDefault(_isInvalid);","","var _astFromValue = require('../utilities/astFromValue');","","var _printer = require('../language/printer');","","var _definition = require('../type/definition');","","var _scalars = require('../type/scalars');","","var _directives = require('../type/directives');","","function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }","","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","function printSchema(schema) {","  return printFilteredSchema(schema, function (n) {","    return !isSpecDirective(n);","  }, isDefinedType);","}","","function printIntrospectionSchema(schema) {","  return printFilteredSchema(schema, isSpecDirective, isIntrospectionType);","}","","function isSpecDirective(directiveName) {","  return directiveName === 'skip' || directiveName === 'include' || directiveName === 'deprecated';","}","","function isDefinedType(typename) {","  return !isIntrospectionType(typename) && !isBuiltInScalar(typename);","}","","function isIntrospectionType(typename) {","  return typename.indexOf('__') === 0;","}","","function isBuiltInScalar(typename) {","  return typename === 'String' || typename === 'Boolean' || typename === 'Int' || typename === 'Float' || typename === 'ID';","}","","function printFilteredSchema(schema, directiveFilter, typeFilter) {","  var directives = schema.getDirectives().filter(function (directive) {","    return directiveFilter(directive.name);","  });","  var typeMap = schema.getTypeMap();","  var types = Object.keys(typeMap).filter(typeFilter).sort(function (name1, name2) {","    return name1.localeCompare(name2);","  }).map(function (typeName) {","    return typeMap[typeName];","  });","","  return [printSchemaDefinition(schema)].concat(directives.map(printDirective), types.map(printType)).filter(Boolean).join('\\n\\n') + '\\n';","}","","function printSchemaDefinition(schema) {","  if (isSchemaOfCommonNames(schema)) {","    return;","  }","","  var operationTypes = [];","","  var queryType = schema.getQueryType();","  if (queryType) {","    operationTypes.push('  query: ' + queryType.name);","  }","","  var mutationType = schema.getMutationType();","  if (mutationType) {","    operationTypes.push('  mutation: ' + mutationType.name);","  }","","  var subscriptionType = schema.getSubscriptionType();","  if (subscriptionType) {","    operationTypes.push('  subscription: ' + subscriptionType.name);","  }","","  return 'schema {\\n' + operationTypes.join('\\n') + '\\n}';","}","","/**"," * GraphQL schema define root types for each type of operation. These types are"," * the same as any other type and can be named in any manner, however there is"," * a common naming convention:"," *"," *   schema {"," *     query: Query"," *     mutation: Mutation"," *   }"," *"," * When using this naming convention, the schema description can be omitted."," */","function isSchemaOfCommonNames(schema) {","  var queryType = schema.getQueryType();","  if (queryType && queryType.name !== 'Query') {","    return false;","  }","","  var mutationType = schema.getMutationType();","  if (mutationType && mutationType.name !== 'Mutation') {","    return false;","  }","","  var subscriptionType = schema.getSubscriptionType();","  if (subscriptionType && subscriptionType.name !== 'Subscription') {","    return false;","  }","","  return true;","}","","function printType(type) {","  if (type instanceof _definition.GraphQLScalarType) {","    return printScalar(type);","  } else if (type instanceof _definition.GraphQLObjectType) {","    return printObject(type);","  } else if (type instanceof _definition.GraphQLInterfaceType) {","    return printInterface(type);","  } else if (type instanceof _definition.GraphQLUnionType) {","    return printUnion(type);","  } else if (type instanceof _definition.GraphQLEnumType) {","    return printEnum(type);","  }","  (0, _invariant2.default)(type instanceof _definition.GraphQLInputObjectType);","  return printInputObject(type);","}","","function printScalar(type) {","  return printDescription(type) + ('scalar ' + type.name);","}","","function printObject(type) {","  var interfaces = type.getInterfaces();","  var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {","    return i.name;","  }).join(', ') : '';","  return printDescription(type) + ('type ' + type.name + implementedInterfaces + ' {\\n') + printFields(type) + '\\n' + '}';","}","","function printInterface(type) {","  return printDescription(type) + ('interface ' + type.name + ' {\\n') + printFields(type) + '\\n' + '}';","}","","function printUnion(type) {","  return printDescription(type) + ('union ' + type.name + ' = ' + type.getTypes().join(' | '));","}","","function printEnum(type) {","  return printDescription(type) + ('enum ' + type.name + ' {\\n') + printEnumValues(type.getValues()) + '\\n' + '}';","}","","function printEnumValues(values) {","  return values.map(function (value, i) {","    return printDescription(value, '  ', !i) + '  ' + value.name + printDeprecated(value);","  }).join('\\n');","}","","function printInputObject(type) {","  var fieldMap = type.getFields();","  var fields = Object.keys(fieldMap).map(function (fieldName) {","    return fieldMap[fieldName];","  });","  return printDescription(type) + ('input ' + type.name + ' {\\n') + fields.map(function (f, i) {","    return printDescription(f, '  ', !i) + '  ' + printInputValue(f);","  }).join('\\n') + '\\n' + '}';","}","","function printFields(type) {","  var fieldMap = type.getFields();","  var fields = Object.keys(fieldMap).map(function (fieldName) {","    return fieldMap[fieldName];","  });","  return fields.map(function (f, i) {","    return printDescription(f, '  ', !i) + '  ' + f.name + printArgs(f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);","  }).join('\\n');","}","","function printArgs(args) {","  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';","","  if (args.length === 0) {","    return '';","  }","","  // If every arg does not have a description, print them on one line.","  if (args.every(function (arg) {","    return !arg.description;","  })) {","    return '(' + args.map(printInputValue).join(', ') + ')';","  }","","  return '(\\n' + args.map(function (arg, i) {","    return printDescription(arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);","  }).join('\\n') + '\\n' + indentation + ')';","}","","function printInputValue(arg) {","  var argDecl = arg.name + ': ' + String(arg.type);","  if (!(0, _isInvalid2.default)(arg.defaultValue)) {","    argDecl += ' = ' + (0, _printer.print)((0, _astFromValue.astFromValue)(arg.defaultValue, arg.type));","  }","  return argDecl;","}","","function printDirective(directive) {","  return printDescription(directive) + 'directive @' + directive.name + printArgs(directive.args) + ' on ' + directive.locations.join(' | ');","}","","function printDeprecated(fieldOrEnumVal) {","  var reason = fieldOrEnumVal.deprecationReason;","  if ((0, _isNullish2.default)(reason)) {","    return '';","  }","  if (reason === '' || reason === _directives.DEFAULT_DEPRECATION_REASON) {","    return ' @deprecated';","  }","  return ' @deprecated(reason: ' + (0, _printer.print)((0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString)) + ')';","}","","function printDescription(def) {","  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';","  var firstInBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;","","  if (!def.description) {","    return '';","  }","  var lines = def.description.split('\\n');","  var description = indentation && !firstInBlock ? '\\n' : '';","  for (var i = 0; i < lines.length; i++) {","    if (lines[i] === '') {","      description += indentation + '#\\n';","    } else {","      // For > 120 character long lines, cut at space boundaries into sublines","      // of ~80 chars.","      var sublines = breakLine(lines[i], 120 - indentation.length);","      for (var j = 0; j < sublines.length; j++) {","        description += indentation + '# ' + sublines[j] + '\\n';","      }","    }","  }","  return description;","}","","function breakLine(line, len) {","  if (line.length < len + 5) {","    return [line];","  }","  var parts = line.split(new RegExp('((?: |^).{15,' + (len - 40) + '}(?= |$))'));","  if (parts.length < 4) {","    return [line];","  }","  var sublines = [parts[0] + parts[1] + parts[2]];","  for (var i = 3; i < parts.length; i += 2) {","    sublines.push(parts[i].slice(1) + parts[i + 1]);","  }","  return sublines;","}"],"l":{"3":1,"6":1,"7":1,"8":1,"10":1,"12":1,"14":1,"16":1,"18":1,"20":1,"22":1,"24":1,"26":1,"28":1,"30":1,"32":3,"43":1,"44":0,"45":0,"49":1,"50":0,"53":1,"54":0,"57":1,"58":0,"61":1,"62":0,"65":1,"66":0,"69":1,"70":0,"71":0,"73":0,"74":0,"75":0,"77":0,"80":0,"83":1,"84":0,"85":0,"88":0,"90":0,"91":0,"92":0,"95":0,"96":0,"97":0,"100":0,"101":0,"102":0,"105":0,"120":1,"121":0,"122":0,"123":0,"126":0,"127":0,"128":0,"131":0,"132":0,"133":0,"136":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"151":0,"152":0,"155":1,"156":0,"159":1,"160":0,"161":0,"162":0,"164":0,"167":1,"168":0,"171":1,"172":0,"175":1,"176":0,"179":1,"180":0,"181":0,"185":1,"186":0,"187":0,"188":0,"190":0,"191":0,"195":1,"196":0,"197":0,"198":0,"200":0,"201":0,"205":1,"206":0,"208":0,"209":0,"213":0,"214":0,"216":0,"219":0,"220":0,"224":1,"225":0,"226":0,"227":0,"229":0,"232":1,"233":0,"236":1,"237":0,"238":0,"239":0,"241":0,"242":0,"244":0,"247":1,"248":0,"249":0,"251":0,"252":0,"254":0,"255":0,"256":0,"257":0,"258":0,"262":0,"263":0,"264":0,"268":0,"271":1,"272":0,"273":0,"275":0,"276":0,"277":0,"279":0,"280":0,"281":0,"283":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/concatAST.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/concatAST.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"concatAST","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":30}},"3":{"start":{"line":14,"column":0},"end":{"line":26,"column":1}},"4":{"start":{"line":15,"column":2},"end":{"line":15,"column":28}},"5":{"start":{"line":16,"column":2},"end":{"line":21,"column":3}},"6":{"start":{"line":17,"column":4},"end":{"line":17,"column":42}},"7":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"8":{"start":{"line":19,"column":6},"end":{"line":19,"column":44}},"9":{"start":{"line":22,"column":2},"end":{"line":25,"column":4}}},"branchMap":{},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.concatAST = concatAST;","","","/**"," * Provided a collection of ASTs, presumably each from different files,"," * concatenate the ASTs together into batched AST, useful for validating many"," * GraphQL source files which together represent one conceptual application."," */","function concatAST(asts) {","  var batchDefinitions = [];","  for (var i = 0; i < asts.length; i++) {","    var definitions = asts[i].definitions;","    for (var j = 0; j < definitions.length; j++) {","      batchDefinitions.push(definitions[j]);","    }","  }","  return {","    kind: 'Document',","    definitions: batchDefinitions","  };","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"22":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/separateOperations.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/separateOperations.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"separateOperations","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":16,"column":41}}},"2":{"name":"OperationDefinition","line":27,"loc":{"start":{"line":27,"column":25},"end":{"line":27,"column":60}}},"3":{"name":"FragmentDefinition","line":32,"loc":{"start":{"line":32,"column":24},"end":{"line":32,"column":58}}},"4":{"name":"FragmentSpread","line":37,"loc":{"start":{"line":37,"column":20},"end":{"line":37,"column":50}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":21},"end":{"line":46,"column":42}}},"6":{"name":"(anonymous_6)","line":54,"loc":{"start":{"line":54,"column":38},"end":{"line":54,"column":54}}},"7":{"name":"(anonymous_7)","line":57,"loc":{"start":{"line":57,"column":21},"end":{"line":57,"column":39}}},"8":{"name":"opName","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":27}}},"9":{"name":"collectTransitiveDependencies","line":85,"loc":{"start":{"line":85,"column":0},"end":{"line":85,"column":70}}},"10":{"name":"(anonymous_10)","line":88,"loc":{"start":{"line":88,"column":39},"end":{"line":88,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":48}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"4":{"start":{"line":16,"column":0},"end":{"line":68,"column":1}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":22}},"6":{"start":{"line":19,"column":2},"end":{"line":19,"column":38}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":28}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":37}},"9":{"start":{"line":22,"column":2},"end":{"line":22,"column":24}},"10":{"start":{"line":23,"column":2},"end":{"line":23,"column":14}},"11":{"start":{"line":26,"column":2},"end":{"line":41,"column":5}},"12":{"start":{"line":28,"column":6},"end":{"line":28,"column":30}},"13":{"start":{"line":29,"column":6},"end":{"line":29,"column":28}},"14":{"start":{"line":30,"column":6},"end":{"line":30,"column":33}},"15":{"start":{"line":33,"column":6},"end":{"line":33,"column":33}},"16":{"start":{"line":34,"column":6},"end":{"line":34,"column":33}},"17":{"start":{"line":35,"column":6},"end":{"line":35,"column":33}},"18":{"start":{"line":38,"column":6},"end":{"line":38,"column":35}},"19":{"start":{"line":39,"column":6},"end":{"line":39,"column":88}},"20":{"start":{"line":45,"column":2},"end":{"line":45,"column":50}},"21":{"start":{"line":46,"column":2},"end":{"line":65,"column":5}},"22":{"start":{"line":47,"column":4},"end":{"line":47,"column":42}},"23":{"start":{"line":48,"column":4},"end":{"line":48,"column":43}},"24":{"start":{"line":49,"column":4},"end":{"line":49,"column":73}},"25":{"start":{"line":53,"column":4},"end":{"line":53,"column":34}},"26":{"start":{"line":54,"column":4},"end":{"line":56,"column":7}},"27":{"start":{"line":55,"column":6},"end":{"line":55,"column":40}},"28":{"start":{"line":57,"column":4},"end":{"line":59,"column":7}},"29":{"start":{"line":58,"column":6},"end":{"line":58,"column":65}},"30":{"start":{"line":61,"column":4},"end":{"line":64,"column":6}},"31":{"start":{"line":67,"column":2},"end":{"line":67,"column":31}},"32":{"start":{"line":79,"column":0},"end":{"line":81,"column":1}},"33":{"start":{"line":80,"column":2},"end":{"line":80,"column":52}},"34":{"start":{"line":85,"column":0},"end":{"line":95,"column":1}},"35":{"start":{"line":86,"column":2},"end":{"line":86,"column":41}},"36":{"start":{"line":87,"column":2},"end":{"line":94,"column":3}},"37":{"start":{"line":88,"column":4},"end":{"line":93,"column":7}},"38":{"start":{"line":89,"column":6},"end":{"line":92,"column":7}},"39":{"start":{"line":90,"column":8},"end":{"line":90,"column":33}},"40":{"start":{"line":91,"column":8},"end":{"line":91,"column":67}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":7},"end":{"line":39,"column":25}},{"start":{"line":39,"column":30},"end":{"line":39,"column":70}}]},"2":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":14},"end":{"line":58,"column":31}},{"start":{"line":58,"column":35},"end":{"line":58,"column":36}}]},"3":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":41},"end":{"line":58,"column":58}},{"start":{"line":58,"column":62},"end":{"line":58,"column":63}}]},"4":{"line":80,"type":"cond-expr","locations":[{"start":{"line":80,"column":26},"end":{"line":80,"column":46}},{"start":{"line":80,"column":49},"end":{"line":80,"column":51}}]},"5":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"6":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":6}},{"start":{"line":89,"column":6},"end":{"line":89,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.separateOperations = separateOperations;","","var _visitor = require('../language/visitor');","","/**"," * separateOperations accepts a single AST document which may contain many"," * operations and fragments and returns a collection of AST documents each of"," * which contains a single operation as well the fragment definitions it"," * refers to."," */","function separateOperations(documentAST) {","","  var operations = [];","  var fragments = Object.create(null);","  var positions = new Map();","  var depGraph = Object.create(null);","  var fromName = void 0;","  var idx = 0;","","  // Populate metadata and build a dependency graph.","  (0, _visitor.visit)(documentAST, {","    OperationDefinition: function OperationDefinition(node) {","      fromName = opName(node);","      operations.push(node);","      positions.set(node, idx++);","    },","    FragmentDefinition: function FragmentDefinition(node) {","      fromName = node.name.value;","      fragments[fromName] = node;","      positions.set(node, idx++);","    },","    FragmentSpread: function FragmentSpread(node) {","      var toName = node.name.value;","      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;","    }","  });","","  // For each operation, produce a new synthesized AST which includes only what","  // is necessary for completing that operation.","  var separatedDocumentASTs = Object.create(null);","  operations.forEach(function (operation) {","    var operationName = opName(operation);","    var dependencies = Object.create(null);","    collectTransitiveDependencies(dependencies, depGraph, operationName);","","    // The list of definition nodes to be included for this operation, sorted","    // to retain the same order as the original document.","    var definitions = [operation];","    Object.keys(dependencies).forEach(function (name) {","      definitions.push(fragments[name]);","    });","    definitions.sort(function (n1, n2) {","      return (positions.get(n1) || 0) - (positions.get(n2) || 0);","    });","","    separatedDocumentASTs[operationName] = {","      kind: 'Document',","      definitions: definitions","    };","  });","","  return separatedDocumentASTs;","}","/**"," *  Copyright (c) 2015, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","// Provides the empty string for anonymous operations.","function opName(operation) {","  return operation.name ? operation.name.value : '';","}","","// From a dependency graph, collects a list of transitive dependencies by","// recursing through a dependency graph.","function collectTransitiveDependencies(collected, depGraph, fromName) {","  var immediateDeps = depGraph[fromName];","  if (immediateDeps) {","    Object.keys(immediateDeps).forEach(function (toName) {","      if (!collected[toName]) {","        collected[toName] = true;","        collectTransitiveDependencies(collected, depGraph, toName);","      }","    });","  }","}"],"l":{"3":1,"6":1,"8":1,"16":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"26":0,"28":0,"29":0,"30":0,"33":0,"34":0,"35":0,"38":0,"39":0,"45":0,"46":0,"47":0,"48":0,"49":0,"53":0,"54":0,"55":0,"57":0,"58":0,"61":0,"67":0,"79":1,"80":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/findBreakingChanges.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/findBreakingChanges.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0],"24":[0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"findBreakingChanges","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":51}}},"2":{"name":"findDangerousChanges","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":52}}},"3":{"name":"findRemovedTypes","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":48}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":34},"end":{"line":69,"column":54}}},"5":{"name":"findTypesThatChangedKind","line":84,"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":56}}},"6":{"name":"(anonymous_6)","line":89,"loc":{"start":{"line":89,"column":34},"end":{"line":89,"column":54}}},"7":{"name":"findArgChanges","line":111,"loc":{"start":{"line":111,"column":0},"end":{"line":111,"column":46}}},"8":{"name":"(anonymous_8)","line":118,"loc":{"start":{"line":118,"column":34},"end":{"line":118,"column":54}}},"9":{"name":"(anonymous_9)","line":128,"loc":{"start":{"line":128,"column":39},"end":{"line":128,"column":60}}},"10":{"name":"(anonymous_10)","line":133,"loc":{"start":{"line":133,"column":44},"end":{"line":133,"column":65}}},"11":{"name":"(anonymous_11)","line":135,"loc":{"start":{"line":135,"column":48},"end":{"line":135,"column":63}}},"12":{"name":"typeKindName","line":178,"loc":{"start":{"line":178,"column":0},"end":{"line":178,"column":28}}},"13":{"name":"findFieldsThatChangedType","line":205,"loc":{"start":{"line":205,"column":0},"end":{"line":205,"column":57}}},"14":{"name":"(anonymous_14)","line":210,"loc":{"start":{"line":210,"column":34},"end":{"line":210,"column":54}}},"15":{"name":"(anonymous_15)","line":219,"loc":{"start":{"line":219,"column":42},"end":{"line":219,"column":63}}},"16":{"name":"findTypesRemovedFromUnions","line":246,"loc":{"start":{"line":246,"column":0},"end":{"line":246,"column":58}}},"17":{"name":"(anonymous_17)","line":251,"loc":{"start":{"line":251,"column":34},"end":{"line":251,"column":54}}},"18":{"name":"(anonymous_18)","line":258,"loc":{"start":{"line":258,"column":31},"end":{"line":258,"column":47}}},"19":{"name":"(anonymous_19)","line":261,"loc":{"start":{"line":261,"column":31},"end":{"line":261,"column":47}}},"20":{"name":"findValuesRemovedFromEnums","line":277,"loc":{"start":{"line":277,"column":0},"end":{"line":277,"column":58}}},"21":{"name":"(anonymous_21)","line":282,"loc":{"start":{"line":282,"column":34},"end":{"line":282,"column":54}}},"22":{"name":"(anonymous_22)","line":289,"loc":{"start":{"line":289,"column":32},"end":{"line":289,"column":49}}},"23":{"name":"(anonymous_23)","line":292,"loc":{"start":{"line":292,"column":32},"end":{"line":292,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":69}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":50}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":52}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}},"6":{"start":{"line":10,"column":0},"end":{"line":10,"column":60}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":40}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":64}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":64}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":48}},"12":{"start":{"line":18,"column":0},"end":{"line":18,"column":40}},"13":{"start":{"line":29,"column":0},"end":{"line":38,"column":2}},"14":{"start":{"line":40,"column":0},"end":{"line":42,"column":2}},"15":{"start":{"line":48,"column":0},"end":{"line":50,"column":1}},"16":{"start":{"line":49,"column":2},"end":{"line":49,"column":310}},"17":{"start":{"line":56,"column":0},"end":{"line":58,"column":1}},"18":{"start":{"line":57,"column":2},"end":{"line":57,"column":74}},"19":{"start":{"line":64,"column":0},"end":{"line":78,"column":1}},"20":{"start":{"line":65,"column":2},"end":{"line":65,"column":42}},"21":{"start":{"line":66,"column":2},"end":{"line":66,"column":42}},"22":{"start":{"line":68,"column":2},"end":{"line":68,"column":27}},"23":{"start":{"line":69,"column":2},"end":{"line":76,"column":5}},"24":{"start":{"line":70,"column":4},"end":{"line":75,"column":5}},"25":{"start":{"line":71,"column":6},"end":{"line":74,"column":9}},"26":{"start":{"line":77,"column":2},"end":{"line":77,"column":25}},"27":{"start":{"line":84,"column":0},"end":{"line":103,"column":1}},"28":{"start":{"line":85,"column":2},"end":{"line":85,"column":42}},"29":{"start":{"line":86,"column":2},"end":{"line":86,"column":42}},"30":{"start":{"line":88,"column":2},"end":{"line":88,"column":27}},"31":{"start":{"line":89,"column":2},"end":{"line":101,"column":5}},"32":{"start":{"line":90,"column":4},"end":{"line":92,"column":5}},"33":{"start":{"line":91,"column":6},"end":{"line":91,"column":13}},"34":{"start":{"line":93,"column":4},"end":{"line":93,"column":39}},"35":{"start":{"line":94,"column":4},"end":{"line":94,"column":39}},"36":{"start":{"line":95,"column":4},"end":{"line":100,"column":5}},"37":{"start":{"line":96,"column":6},"end":{"line":99,"column":9}},"38":{"start":{"line":102,"column":2},"end":{"line":102,"column":25}},"39":{"start":{"line":111,"column":0},"end":{"line":176,"column":1}},"40":{"start":{"line":112,"column":2},"end":{"line":112,"column":42}},"41":{"start":{"line":113,"column":2},"end":{"line":113,"column":42}},"42":{"start":{"line":115,"column":2},"end":{"line":115,"column":27}},"43":{"start":{"line":116,"column":2},"end":{"line":116,"column":28}},"44":{"start":{"line":118,"column":2},"end":{"line":170,"column":5}},"45":{"start":{"line":119,"column":4},"end":{"line":119,"column":39}},"46":{"start":{"line":120,"column":4},"end":{"line":120,"column":39}},"47":{"start":{"line":121,"column":4},"end":{"line":123,"column":5}},"48":{"start":{"line":122,"column":6},"end":{"line":122,"column":13}},"49":{"start":{"line":125,"column":4},"end":{"line":125,"column":44}},"50":{"start":{"line":126,"column":4},"end":{"line":126,"column":44}},"51":{"start":{"line":128,"column":4},"end":{"line":169,"column":7}},"52":{"start":{"line":129,"column":6},"end":{"line":131,"column":7}},"53":{"start":{"line":130,"column":8},"end":{"line":130,"column":15}},"54":{"start":{"line":133,"column":6},"end":{"line":168,"column":9}},"55":{"start":{"line":134,"column":8},"end":{"line":134,"column":52}},"56":{"start":{"line":135,"column":8},"end":{"line":137,"column":11}},"57":{"start":{"line":136,"column":10},"end":{"line":136,"column":45}},"58":{"start":{"line":138,"column":8},"end":{"line":138,"column":49}},"59":{"start":{"line":140,"column":8},"end":{"line":140,"column":75}},"60":{"start":{"line":141,"column":8},"end":{"line":141,"column":94}},"61":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"62":{"start":{"line":144,"column":10},"end":{"line":144,"column":17}},"63":{"start":{"line":148,"column":8},"end":{"line":167,"column":9}},"64":{"start":{"line":149,"column":10},"end":{"line":152,"column":13}},"65":{"start":{"line":155,"column":15},"end":{"line":167,"column":9}},"66":{"start":{"line":156,"column":10},"end":{"line":159,"column":13}},"67":{"start":{"line":162,"column":15},"end":{"line":167,"column":9}},"68":{"start":{"line":163,"column":10},"end":{"line":166,"column":13}},"69":{"start":{"line":172,"column":2},"end":{"line":175,"column":4}},"70":{"start":{"line":178,"column":0},"end":{"line":198,"column":1}},"71":{"start":{"line":179,"column":2},"end":{"line":181,"column":3}},"72":{"start":{"line":180,"column":4},"end":{"line":180,"column":27}},"73":{"start":{"line":182,"column":2},"end":{"line":184,"column":3}},"74":{"start":{"line":183,"column":4},"end":{"line":183,"column":28}},"75":{"start":{"line":185,"column":2},"end":{"line":187,"column":3}},"76":{"start":{"line":186,"column":4},"end":{"line":186,"column":31}},"77":{"start":{"line":188,"column":2},"end":{"line":190,"column":3}},"78":{"start":{"line":189,"column":4},"end":{"line":189,"column":26}},"79":{"start":{"line":191,"column":2},"end":{"line":193,"column":3}},"80":{"start":{"line":192,"column":4},"end":{"line":192,"column":26}},"81":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"82":{"start":{"line":195,"column":4},"end":{"line":195,"column":27}},"83":{"start":{"line":197,"column":2},"end":{"line":197,"column":63}},"84":{"start":{"line":205,"column":0},"end":{"line":240,"column":1}},"85":{"start":{"line":206,"column":2},"end":{"line":206,"column":42}},"86":{"start":{"line":207,"column":2},"end":{"line":207,"column":42}},"87":{"start":{"line":209,"column":2},"end":{"line":209,"column":32}},"88":{"start":{"line":210,"column":2},"end":{"line":238,"column":5}},"89":{"start":{"line":211,"column":4},"end":{"line":211,"column":39}},"90":{"start":{"line":212,"column":4},"end":{"line":212,"column":39}},"91":{"start":{"line":213,"column":4},"end":{"line":215,"column":5}},"92":{"start":{"line":214,"column":6},"end":{"line":214,"column":13}},"93":{"start":{"line":217,"column":4},"end":{"line":217,"column":47}},"94":{"start":{"line":218,"column":4},"end":{"line":218,"column":47}},"95":{"start":{"line":219,"column":4},"end":{"line":237,"column":7}},"96":{"start":{"line":221,"column":6},"end":{"line":236,"column":7}},"97":{"start":{"line":222,"column":8},"end":{"line":225,"column":11}},"98":{"start":{"line":228,"column":8},"end":{"line":228,"column":91}},"99":{"start":{"line":229,"column":8},"end":{"line":229,"column":91}},"100":{"start":{"line":230,"column":8},"end":{"line":235,"column":9}},"101":{"start":{"line":231,"column":10},"end":{"line":234,"column":13}},"102":{"start":{"line":239,"column":2},"end":{"line":239,"column":30}},"103":{"start":{"line":246,"column":0},"end":{"line":271,"column":1}},"104":{"start":{"line":247,"column":2},"end":{"line":247,"column":42}},"105":{"start":{"line":248,"column":2},"end":{"line":248,"column":42}},"106":{"start":{"line":250,"column":2},"end":{"line":250,"column":33}},"107":{"start":{"line":251,"column":2},"end":{"line":269,"column":5}},"108":{"start":{"line":252,"column":4},"end":{"line":252,"column":39}},"109":{"start":{"line":253,"column":4},"end":{"line":253,"column":39}},"110":{"start":{"line":254,"column":4},"end":{"line":256,"column":5}},"111":{"start":{"line":255,"column":6},"end":{"line":255,"column":13}},"112":{"start":{"line":257,"column":4},"end":{"line":257,"column":50}},"113":{"start":{"line":258,"column":4},"end":{"line":260,"column":7}},"114":{"start":{"line":259,"column":6},"end":{"line":259,"column":44}},"115":{"start":{"line":261,"column":4},"end":{"line":268,"column":7}},"116":{"start":{"line":262,"column":6},"end":{"line":267,"column":7}},"117":{"start":{"line":263,"column":8},"end":{"line":266,"column":11}},"118":{"start":{"line":270,"column":2},"end":{"line":270,"column":31}},"119":{"start":{"line":277,"column":0},"end":{"line":302,"column":1}},"120":{"start":{"line":278,"column":2},"end":{"line":278,"column":42}},"121":{"start":{"line":279,"column":2},"end":{"line":279,"column":42}},"122":{"start":{"line":281,"column":2},"end":{"line":281,"column":34}},"123":{"start":{"line":282,"column":2},"end":{"line":300,"column":5}},"124":{"start":{"line":283,"column":4},"end":{"line":283,"column":39}},"125":{"start":{"line":284,"column":4},"end":{"line":284,"column":39}},"126":{"start":{"line":285,"column":4},"end":{"line":287,"column":5}},"127":{"start":{"line":286,"column":6},"end":{"line":286,"column":13}},"128":{"start":{"line":288,"column":4},"end":{"line":288,"column":46}},"129":{"start":{"line":289,"column":4},"end":{"line":291,"column":7}},"130":{"start":{"line":290,"column":6},"end":{"line":290,"column":41}},"131":{"start":{"line":292,"column":4},"end":{"line":299,"column":7}},"132":{"start":{"line":293,"column":6},"end":{"line":298,"column":7}},"133":{"start":{"line":294,"column":8},"end":{"line":297,"column":11}},"134":{"start":{"line":301,"column":2},"end":{"line":301,"column":32}}},"branchMap":{"1":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"2":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"3":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"4":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"5":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":59}},{"start":{"line":121,"column":63},"end":{"line":121,"column":104}}]},"6":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"7":{"line":141,"type":"cond-expr","locations":[{"start":{"line":141,"column":41},"end":{"line":141,"column":86}},{"start":{"line":141,"column":89},"end":{"line":141,"column":93}}]},"8":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":143,"column":8}},{"start":{"line":143,"column":8},"end":{"line":143,"column":8}}]},"9":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"10":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":15},"end":{"line":155,"column":15}},{"start":{"line":155,"column":15},"end":{"line":155,"column":15}}]},"11":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":15},"end":{"line":162,"column":15}},{"start":{"line":162,"column":15},"end":{"line":162,"column":15}}]},"12":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":19},"end":{"line":162,"column":55}},{"start":{"line":162,"column":59},"end":{"line":162,"column":108}}]},"13":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":2},"end":{"line":179,"column":2}},{"start":{"line":179,"column":2},"end":{"line":179,"column":2}}]},"14":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":2},"end":{"line":182,"column":2}},{"start":{"line":182,"column":2},"end":{"line":182,"column":2}}]},"15":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":2},"end":{"line":185,"column":2}},{"start":{"line":185,"column":2},"end":{"line":185,"column":2}}]},"16":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":2},"end":{"line":188,"column":2}},{"start":{"line":188,"column":2},"end":{"line":188,"column":2}}]},"17":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":2},"end":{"line":191,"column":2}},{"start":{"line":191,"column":2},"end":{"line":191,"column":2}}]},"18":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":2},"end":{"line":194,"column":2}},{"start":{"line":194,"column":2},"end":{"line":194,"column":2}}]},"19":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":4},"end":{"line":213,"column":4}},{"start":{"line":213,"column":4},"end":{"line":213,"column":4}}]},"20":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":8},"end":{"line":213,"column":171}},{"start":{"line":213,"column":175},"end":{"line":213,"column":216}}]},"21":{"line":213,"type":"binary-expr","locations":[{"start":{"line":213,"column":10},"end":{"line":213,"column":58}},{"start":{"line":213,"column":62},"end":{"line":213,"column":113}},{"start":{"line":213,"column":117},"end":{"line":213,"column":170}}]},"22":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":6},"end":{"line":221,"column":6}},{"start":{"line":221,"column":6},"end":{"line":221,"column":6}}]},"23":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":8},"end":{"line":230,"column":8}},{"start":{"line":230,"column":8},"end":{"line":230,"column":8}}]},"24":{"line":230,"type":"binary-expr","locations":[{"start":{"line":230,"column":12},"end":{"line":230,"column":24}},{"start":{"line":230,"column":28},"end":{"line":230,"column":40}},{"start":{"line":230,"column":44},"end":{"line":230,"column":83}}]},"25":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":4},"end":{"line":254,"column":4}},{"start":{"line":254,"column":4},"end":{"line":254,"column":4}}]},"26":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":58}},{"start":{"line":254,"column":62},"end":{"line":254,"column":112}}]},"27":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":6},"end":{"line":262,"column":6}},{"start":{"line":262,"column":6},"end":{"line":262,"column":6}}]},"28":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":4},"end":{"line":285,"column":4}},{"start":{"line":285,"column":4},"end":{"line":285,"column":4}}]},"29":{"line":285,"type":"binary-expr","locations":[{"start":{"line":285,"column":8},"end":{"line":285,"column":57}},{"start":{"line":285,"column":61},"end":{"line":285,"column":110}}]},"30":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":6},"end":{"line":293,"column":6}},{"start":{"line":293,"column":6},"end":{"line":293,"column":6}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.DangerousChangeType = exports.BreakingChangeType = undefined;","exports.findBreakingChanges = findBreakingChanges;","exports.findDangerousChanges = findDangerousChanges;","exports.findRemovedTypes = findRemovedTypes;","exports.findTypesThatChangedKind = findTypesThatChangedKind;","exports.findArgChanges = findArgChanges;","exports.findFieldsThatChangedType = findFieldsThatChangedType;","exports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;","exports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;","","var _definition = require('../type/definition');","","var _schema = require('../type/schema');","","/**"," *  Copyright (c) 2016, Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */","","var BreakingChangeType = exports.BreakingChangeType = {","  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',","  FIELD_REMOVED: 'FIELD_REMOVED',","  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',","  TYPE_REMOVED: 'TYPE_REMOVED',","  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',","  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',","  ARG_REMOVED: 'ARG_REMOVED',","  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND'","};","","var DangerousChangeType = exports.DangerousChangeType = {","  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'","};","","/**"," * Given two schemas, returns an Array containing descriptions of all the types"," * of breaking changes covered by the other functions down below."," */","function findBreakingChanges(oldSchema, newSchema) {","  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedType(oldSchema, newSchema), findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges);","}","","/**"," * Given two schemas, returns an Array containing descriptions of all the types"," * of potentially dangerous changes covered by the other functions down below."," */","function findDangerousChanges(oldSchema, newSchema) {","  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges);","}","","/**"," * Given two schemas, returns an Array containing descriptions of any breaking"," * changes in the newSchema related to removing an entire type."," */","function findRemovedTypes(oldSchema, newSchema) {","  var oldTypeMap = oldSchema.getTypeMap();","  var newTypeMap = newSchema.getTypeMap();","","  var breakingChanges = [];","  Object.keys(oldTypeMap).forEach(function (typeName) {","    if (!newTypeMap[typeName]) {","      breakingChanges.push({","        type: BreakingChangeType.TYPE_REMOVED,","        description: typeName + ' was removed.'","      });","    }","  });","  return breakingChanges;","}","","/**"," * Given two schemas, returns an Array containing descriptions of any breaking"," * changes in the newSchema related to changing the type of a type."," */","function findTypesThatChangedKind(oldSchema, newSchema) {","  var oldTypeMap = oldSchema.getTypeMap();","  var newTypeMap = newSchema.getTypeMap();","","  var breakingChanges = [];","  Object.keys(oldTypeMap).forEach(function (typeName) {","    if (!newTypeMap[typeName]) {","      return;","    }","    var oldType = oldTypeMap[typeName];","    var newType = newTypeMap[typeName];","    if (!(oldType instanceof newType.constructor)) {","      breakingChanges.push({","        type: BreakingChangeType.TYPE_CHANGED_KIND,","        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')","      });","    }","  });","  return breakingChanges;","}","","/**"," * Given two schemas, returns an Array containing descriptions of any"," * breaking or dangerous changes in the newSchema related to arguments"," * (such as removal or change of type of an argument, or a change in an"," * argument's default value)."," */","function findArgChanges(oldSchema, newSchema) {","  var oldTypeMap = oldSchema.getTypeMap();","  var newTypeMap = newSchema.getTypeMap();","","  var breakingChanges = [];","  var dangerousChanges = [];","","  Object.keys(oldTypeMap).forEach(function (typeName) {","    var oldType = oldTypeMap[typeName];","    var newType = newTypeMap[typeName];","    if (!(oldType instanceof _definition.GraphQLObjectType) || !(newType instanceof oldType.constructor)) {","      return;","    }","","    var oldTypeFields = oldType.getFields();","    var newTypeFields = newType.getFields();","","    Object.keys(oldTypeFields).forEach(function (fieldName) {","      if (!newTypeFields[fieldName]) {","        return;","      }","","      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {","        var newArgs = newTypeFields[fieldName].args;","        var newTypeArgIndex = newArgs.findIndex(function (arg) {","          return arg.name === oldArgDef.name;","        });","        var newArgDef = newArgs[newTypeArgIndex];","","        var oldArgTypeName = (0, _definition.getNamedType)(oldArgDef.type);","        var newArgTypeName = newArgDef ? (0, _definition.getNamedType)(newArgDef.type) : null;","","        if (!oldArgTypeName) {","          return;","        }","","        // Arg not present","        if (!newArgTypeName) {","          breakingChanges.push({","            type: BreakingChangeType.ARG_REMOVED,","            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')","          });","","          // Arg changed type in a breaking way","        } else if (oldArgTypeName.name !== newArgTypeName.name) {","          breakingChanges.push({","            type: BreakingChangeType.ARG_CHANGED_KIND,","            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())","          });","","          // Arg default value has changed","        } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {","          dangerousChanges.push({","            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,","            description: oldType.name + '.' + fieldName + ' arg ' + oldArgDef.name + ' ' + 'has changed defaultValue'","          });","        }","      });","    });","  });","","  return {","    breakingChanges: breakingChanges,","    dangerousChanges: dangerousChanges","  };","}","","function typeKindName(type) {","  if (type instanceof _definition.GraphQLScalarType) {","    return 'a Scalar type';","  }","  if (type instanceof _definition.GraphQLObjectType) {","    return 'an Object type';","  }","  if (type instanceof _definition.GraphQLInterfaceType) {","    return 'an Interface type';","  }","  if (type instanceof _definition.GraphQLUnionType) {","    return 'a Union type';","  }","  if (type instanceof _definition.GraphQLEnumType) {","    return 'an Enum type';","  }","  if (type instanceof _definition.GraphQLInputObjectType) {","    return 'an Input type';","  }","  throw new TypeError('Unknown type ' + type.constructor.name);","}","","/**"," * Given two schemas, returns an Array containing descriptions of any breaking"," * changes in the newSchema related to the fields on a type. This includes if"," * a field has been removed from a type or if a field has changed type."," */","function findFieldsThatChangedType(oldSchema, newSchema) {","  var oldTypeMap = oldSchema.getTypeMap();","  var newTypeMap = newSchema.getTypeMap();","","  var breakingFieldChanges = [];","  Object.keys(oldTypeMap).forEach(function (typeName) {","    var oldType = oldTypeMap[typeName];","    var newType = newTypeMap[typeName];","    if (!(oldType instanceof _definition.GraphQLObjectType || oldType instanceof _definition.GraphQLInterfaceType || oldType instanceof _definition.GraphQLInputObjectType) || !(newType instanceof oldType.constructor)) {","      return;","    }","","    var oldTypeFieldsDef = oldType.getFields();","    var newTypeFieldsDef = newType.getFields();","    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {","      // Check if the field is missing on the type in the new schema.","      if (!(fieldName in newTypeFieldsDef)) {","        breakingFieldChanges.push({","          type: BreakingChangeType.FIELD_REMOVED,","          description: typeName + '.' + fieldName + ' was removed.'","        });","      } else {","        // Check if the field's type has changed in the new schema.","        var oldFieldType = (0, _definition.getNamedType)(oldTypeFieldsDef[fieldName].type);","        var newFieldType = (0, _definition.getNamedType)(newTypeFieldsDef[fieldName].type);","        if (oldFieldType && newFieldType && oldFieldType.name !== newFieldType.name) {","          breakingFieldChanges.push({","            type: BreakingChangeType.FIELD_CHANGED_KIND,","            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldType.name + ' to ' + newFieldType.name + '.')","          });","        }","      }","    });","  });","  return breakingFieldChanges;","}","","/**"," * Given two schemas, returns an Array containing descriptions of any breaking"," * changes in the newSchema related to removing types from a union type."," */","function findTypesRemovedFromUnions(oldSchema, newSchema) {","  var oldTypeMap = oldSchema.getTypeMap();","  var newTypeMap = newSchema.getTypeMap();","","  var typesRemovedFromUnion = [];","  Object.keys(oldTypeMap).forEach(function (typeName) {","    var oldType = oldTypeMap[typeName];","    var newType = newTypeMap[typeName];","    if (!(oldType instanceof _definition.GraphQLUnionType) || !(newType instanceof _definition.GraphQLUnionType)) {","      return;","    }","    var typeNamesInNewUnion = Object.create(null);","    newType.getTypes().forEach(function (type) {","      typeNamesInNewUnion[type.name] = true;","    });","    oldType.getTypes().forEach(function (type) {","      if (!typeNamesInNewUnion[type.name]) {","        typesRemovedFromUnion.push({","          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,","          description: type.name + ' was removed from union type ' + typeName + '.'","        });","      }","    });","  });","  return typesRemovedFromUnion;","}","","/**"," * Given two schemas, returns an Array containing descriptions of any breaking"," * changes in the newSchema related to removing values from an enum type."," */","function findValuesRemovedFromEnums(oldSchema, newSchema) {","  var oldTypeMap = oldSchema.getTypeMap();","  var newTypeMap = newSchema.getTypeMap();","","  var valuesRemovedFromEnums = [];","  Object.keys(oldTypeMap).forEach(function (typeName) {","    var oldType = oldTypeMap[typeName];","    var newType = newTypeMap[typeName];","    if (!(oldType instanceof _definition.GraphQLEnumType) || !(newType instanceof _definition.GraphQLEnumType)) {","      return;","    }","    var valuesInNewEnum = Object.create(null);","    newType.getValues().forEach(function (value) {","      valuesInNewEnum[value.name] = true;","    });","    oldType.getValues().forEach(function (value) {","      if (!valuesInNewEnum[value.name]) {","        valuesRemovedFromEnums.push({","          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,","          description: value.name + ' was removed from enum type ' + typeName + '.'","        });","      }","    });","  });","  return valuesRemovedFromEnums;","}"],"l":{"3":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"29":1,"40":1,"48":1,"49":0,"56":1,"57":0,"64":1,"65":0,"66":0,"68":0,"69":0,"70":0,"71":0,"77":0,"84":1,"85":0,"86":0,"88":0,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"96":0,"102":0,"111":1,"112":0,"113":0,"115":0,"116":0,"118":0,"119":0,"120":0,"121":0,"122":0,"125":0,"126":0,"128":0,"129":0,"130":0,"133":0,"134":0,"135":0,"136":0,"138":0,"140":0,"141":0,"143":0,"144":0,"148":0,"149":0,"155":0,"156":0,"162":0,"163":0,"172":0,"178":1,"179":0,"180":0,"182":0,"183":0,"185":0,"186":0,"188":0,"189":0,"191":0,"192":0,"194":0,"195":0,"197":0,"205":1,"206":0,"207":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"217":0,"218":0,"219":0,"221":0,"222":0,"228":0,"229":0,"230":0,"231":0,"239":0,"246":1,"247":0,"248":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"257":0,"258":0,"259":0,"261":0,"262":0,"263":0,"270":0,"277":1,"278":0,"279":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"288":0,"289":0,"290":0,"292":0,"293":0,"294":0,"301":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/findDeprecatedUsages.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/utilities/findDeprecatedUsages.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"findDeprecatedUsages","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":43}}},"2":{"name":"Field","line":28,"loc":{"start":{"line":28,"column":11},"end":{"line":28,"column":32}}},"3":{"name":"EnumValue","line":38,"loc":{"start":{"line":38,"column":15},"end":{"line":38,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":52}},"3":{"start":{"line":8,"column":0},"end":{"line":8,"column":53}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":46}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":48}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":40}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":38}},"8":{"start":{"line":23,"column":0},"end":{"line":51,"column":1}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":18}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":48}},"11":{"start":{"line":27,"column":2},"end":{"line":48,"column":6}},"12":{"start":{"line":29,"column":6},"end":{"line":29,"column":44}},"13":{"start":{"line":30,"column":6},"end":{"line":36,"column":7}},"14":{"start":{"line":31,"column":8},"end":{"line":31,"column":50}},"15":{"start":{"line":32,"column":8},"end":{"line":35,"column":9}},"16":{"start":{"line":33,"column":10},"end":{"line":33,"column":50}},"17":{"start":{"line":34,"column":10},"end":{"line":34,"column":167}},"18":{"start":{"line":39,"column":6},"end":{"line":39,"column":44}},"19":{"start":{"line":40,"column":6},"end":{"line":46,"column":7}},"20":{"start":{"line":41,"column":8},"end":{"line":41,"column":74}},"21":{"start":{"line":42,"column":8},"end":{"line":45,"column":9}},"22":{"start":{"line":43,"column":10},"end":{"line":43,"column":49}},"23":{"start":{"line":44,"column":10},"end":{"line":44,"column":165}},"24":{"start":{"line":50,"column":2},"end":{"line":50,"column":16}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":10},"end":{"line":30,"column":18}},{"start":{"line":30,"column":22},"end":{"line":30,"column":43}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"4":{"line":34,"type":"cond-expr","locations":[{"start":{"line":34,"column":138},"end":{"line":34,"column":150}},{"start":{"line":34,"column":153},"end":{"line":34,"column":155}}]},"5":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"6":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":10},"end":{"line":40,"column":17}},{"start":{"line":40,"column":21},"end":{"line":40,"column":41}}]},"7":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"8":{"line":44,"type":"cond-expr","locations":[{"start":{"line":44,"column":136},"end":{"line":44,"column":148}},{"start":{"line":44,"column":151},"end":{"line":44,"column":153}}]}},"code":["'use strict';","","Object.defineProperty(exports, \"__esModule\", {","  value: true","});","exports.findDeprecatedUsages = findDeprecatedUsages;","","var _GraphQLError = require('../error/GraphQLError');","","var _visitor = require('../language/visitor');","","var _definition = require('../type/definition');","","var _schema = require('../type/schema');","","var _TypeInfo = require('./TypeInfo');","","/**"," * A validation rule which reports deprecated usages."," *"," * Returns a list of GraphQLError instances describing each deprecated use."," */","function findDeprecatedUsages(schema, ast) {","  var errors = [];","  var typeInfo = new _TypeInfo.TypeInfo(schema);","","  (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {","    Field: function Field(node) {","      var fieldDef = typeInfo.getFieldDef();","      if (fieldDef && fieldDef.isDeprecated) {","        var parentType = typeInfo.getParentType();","        if (parentType) {","          var reason = fieldDef.deprecationReason;","          errors.push(new _GraphQLError.GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));","        }","      }","    },","    EnumValue: function EnumValue(node) {","      var enumVal = typeInfo.getEnumValue();","      if (enumVal && enumVal.isDeprecated) {","        var type = (0, _definition.getNamedType)(typeInfo.getInputType());","        if (type) {","          var reason = enumVal.deprecationReason;","          errors.push(new _GraphQLError.GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));","        }","      }","    }","  }));","","  return errors;","}","/**"," *  Copyright (c) Facebook, Inc."," *  All rights reserved."," *"," *  This source code is licensed under the BSD-style license found in the"," *  LICENSE file in the root directory of this source tree. An additional grant"," *  of patent rights can be found in the PATENTS file in the same directory."," */"],"l":{"3":1,"6":1,"8":1,"10":1,"12":1,"14":1,"16":1,"23":1,"24":0,"25":0,"27":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"50":0}},"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/ast.js":{"path":"/home/travis/build/npmtest/node-npmtest-graphql/node_modules/graphql/language/ast.js","s":{},"b":{},"f":{},"fnMap":{},"statementMap":{},"branchMap":{},"code":["'use strict';"],"l":{}}}